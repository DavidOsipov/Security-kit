[
  {
    "filePath": "/home/david/Security-kit/eslint.config.js",
    "messages": [],
    "suppressedMessages": [
      {
        "ruleId": "import/no-named-as-default-member",
        "severity": 1,
        "message": "Caution: `securityPlugin` also has a named export `configs`. Check if you meant to write `import {configs} from 'eslint-plugin-security'` instead.",
        "line": 6,
        "column": 44,
        "nodeType": "MemberExpression",
        "endLine": 6,
        "endColumn": 66,
        "suppressions": [
          {
            "kind": "directive",
            "justification": "plugin is CommonJS; access `configs` via the default export"
          }
        ]
      }
    ],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/david/Security-kit/node/coverage/block-navigation.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/david/Security-kit/node/coverage/prettify.js",
    "messages": [],
    "suppressedMessages": [
      {
        "ruleId": "sonarjs/regex-complexity",
        "severity": 2,
        "message": "Simplify this regular expression to reduce its complexity from 26 to the 20 allowed.",
        "line": 2,
        "column": 1947,
        "nodeType": "Literal",
        "endLine": 2,
        "endColumn": 2059,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "sonarjs/regex-complexity",
        "severity": 2,
        "message": "Simplify this regular expression to reduce its complexity from 65 to the 20 allowed.",
        "line": 2,
        "column": 2225,
        "nodeType": "Literal",
        "endLine": 2,
        "endColumn": 2524,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "regexp/no-useless-assertions",
        "severity": 2,
        "message": "'^' will always accept because it is never preceded by a character.",
        "line": 2,
        "column": 2229,
        "nodeType": "BinaryExpression",
        "messageId": "alwaysAcceptByChar",
        "endLine": 2,
        "endColumn": 2230,
        "suggestions": [
          {
            "messageId": "acceptSuggestion",
            "fix": { "range": [2249, 2250], "text": "" },
            "desc": "Remove the assertion. (Replace with empty string.)"
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "regexp/no-useless-assertions",
        "severity": 2,
        "message": "'^' will always accept because it is never preceded by a character.",
        "line": 2,
        "column": 2230,
        "nodeType": "BinaryExpression",
        "messageId": "alwaysAcceptByChar",
        "endLine": 2,
        "endColumn": 2231,
        "suggestions": [
          {
            "messageId": "acceptSuggestion",
            "fix": { "range": [2250, 2251], "text": "" },
            "desc": "Remove the assertion. (Replace with empty string.)"
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "regexp/prefer-character-class",
        "severity": 2,
        "message": "Unexpected the disjunction of single element alternatives. Use character class '[...]' instead.",
        "line": 2,
        "column": 2236,
        "nodeType": "BinaryExpression",
        "messageId": "unexpected",
        "endLine": 2,
        "endColumn": 2440,
        "fix": {
          "range": [2246, 2539],
          "text": "(?:^^\\\\.?|[+\\\\-\\\\!\\\\#\\\\%&\\\\(\\\\*\\\\,\\\\/:\\\\;<=>\\\\?\\\\@\\\\[\\\\^\\\\{\\\\|\\\\~]|\\\\!=|\\\\!==|\\\\%=|&&|&&=|&=|\\\\*=|\\\\+=|\\\\-=|\\\\->|\\\\/=|::|<<|<<=|<=|==|===|>=|>>|>>=|>>>|>>>=|\\\\^=|\\\\^\\\\^|\\\\^\\\\^=|\\\\|=|\\\\|\\\\||\\\\|\\\\|=|break|case|continue|delete|do|else|finally|instanceof|return|throw|try|typeof)"
        },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "regexp/no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\!.",
        "line": 2,
        "column": 2241,
        "nodeType": "BinaryExpression",
        "messageId": "unnecessary",
        "endLine": 2,
        "endColumn": 2243,
        "fix": { "range": [2261, 2264], "text": "!" },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "regexp/strict",
        "severity": 2,
        "message": "Useless identity escapes with non-syntax characters are forbidden.",
        "line": 2,
        "column": 2241,
        "nodeType": "BinaryExpression",
        "messageId": "uselessEscape",
        "endLine": 2,
        "endColumn": 2244,
        "fix": { "range": [2261, 2264], "text": "!" },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "regexp/no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\!.",
        "line": 2,
        "column": 2245,
        "nodeType": "BinaryExpression",
        "messageId": "unnecessary",
        "endLine": 2,
        "endColumn": 2247,
        "fix": { "range": [2265, 2268], "text": "!" },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "regexp/strict",
        "severity": 2,
        "message": "Useless identity escapes with non-syntax characters are forbidden.",
        "line": 2,
        "column": 2245,
        "nodeType": "BinaryExpression",
        "messageId": "uselessEscape",
        "endLine": 2,
        "endColumn": 2248,
        "fix": { "range": [2265, 2268], "text": "!" },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "regexp/no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\!.",
        "line": 2,
        "column": 2250,
        "nodeType": "BinaryExpression",
        "messageId": "unnecessary",
        "endLine": 2,
        "endColumn": 2252,
        "fix": { "range": [2270, 2273], "text": "!" },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "regexp/strict",
        "severity": 2,
        "message": "Useless identity escapes with non-syntax characters are forbidden.",
        "line": 2,
        "column": 2250,
        "nodeType": "BinaryExpression",
        "messageId": "uselessEscape",
        "endLine": 2,
        "endColumn": 2253,
        "fix": { "range": [2270, 2273], "text": "!" },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "regexp/no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\#.",
        "line": 2,
        "column": 2256,
        "nodeType": "BinaryExpression",
        "messageId": "unnecessary",
        "endLine": 2,
        "endColumn": 2258,
        "fix": { "range": [2276, 2279], "text": "#" },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "regexp/strict",
        "severity": 2,
        "message": "Useless identity escapes with non-syntax characters are forbidden.",
        "line": 2,
        "column": 2256,
        "nodeType": "BinaryExpression",
        "messageId": "uselessEscape",
        "endLine": 2,
        "endColumn": 2259,
        "fix": { "range": [2276, 2279], "text": "#" },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "regexp/no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\%.",
        "line": 2,
        "column": 2260,
        "nodeType": "BinaryExpression",
        "messageId": "unnecessary",
        "endLine": 2,
        "endColumn": 2262,
        "fix": { "range": [2280, 2283], "text": "%" },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "regexp/strict",
        "severity": 2,
        "message": "Useless identity escapes with non-syntax characters are forbidden.",
        "line": 2,
        "column": 2260,
        "nodeType": "BinaryExpression",
        "messageId": "uselessEscape",
        "endLine": 2,
        "endColumn": 2263,
        "fix": { "range": [2280, 2283], "text": "%" },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "regexp/no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\%.",
        "line": 2,
        "column": 2264,
        "nodeType": "BinaryExpression",
        "messageId": "unnecessary",
        "endLine": 2,
        "endColumn": 2266,
        "fix": { "range": [2284, 2287], "text": "%" },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "regexp/strict",
        "severity": 2,
        "message": "Useless identity escapes with non-syntax characters are forbidden.",
        "line": 2,
        "column": 2264,
        "nodeType": "BinaryExpression",
        "messageId": "uselessEscape",
        "endLine": 2,
        "endColumn": 2267,
        "fix": { "range": [2284, 2287], "text": "%" },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "regexp/no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\,.",
        "line": 2,
        "column": 2299,
        "nodeType": "BinaryExpression",
        "messageId": "unnecessary",
        "endLine": 2,
        "endColumn": 2301,
        "fix": { "range": [2319, 2322], "text": "," },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "regexp/strict",
        "severity": 2,
        "message": "Useless identity escapes with non-syntax characters are forbidden.",
        "line": 2,
        "column": 2299,
        "nodeType": "BinaryExpression",
        "messageId": "uselessEscape",
        "endLine": 2,
        "endColumn": 2302,
        "fix": { "range": [2319, 2322], "text": "," },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "regexp/no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\-.",
        "line": 2,
        "column": 2303,
        "nodeType": "BinaryExpression",
        "messageId": "unnecessary",
        "endLine": 2,
        "endColumn": 2305,
        "fix": { "range": [2323, 2326], "text": "-" },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "regexp/strict",
        "severity": 2,
        "message": "Useless identity escapes with non-syntax characters are forbidden.",
        "line": 2,
        "column": 2303,
        "nodeType": "BinaryExpression",
        "messageId": "uselessEscape",
        "endLine": 2,
        "endColumn": 2306,
        "fix": { "range": [2323, 2326], "text": "-" },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "regexp/no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\-.",
        "line": 2,
        "column": 2308,
        "nodeType": "BinaryExpression",
        "messageId": "unnecessary",
        "endLine": 2,
        "endColumn": 2310,
        "fix": { "range": [2328, 2331], "text": "-" },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "regexp/strict",
        "severity": 2,
        "message": "Useless identity escapes with non-syntax characters are forbidden.",
        "line": 2,
        "column": 2308,
        "nodeType": "BinaryExpression",
        "messageId": "uselessEscape",
        "endLine": 2,
        "endColumn": 2311,
        "fix": { "range": [2328, 2331], "text": "-" },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "regexp/no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\;.",
        "line": 2,
        "column": 2327,
        "nodeType": "BinaryExpression",
        "messageId": "unnecessary",
        "endLine": 2,
        "endColumn": 2329,
        "fix": { "range": [2347, 2350], "text": ";" },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "regexp/strict",
        "severity": 2,
        "message": "Useless identity escapes with non-syntax characters are forbidden.",
        "line": 2,
        "column": 2327,
        "nodeType": "BinaryExpression",
        "messageId": "uselessEscape",
        "endLine": 2,
        "endColumn": 2330,
        "fix": { "range": [2347, 2350], "text": ";" },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "regexp/no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\@.",
        "line": 2,
        "column": 2377,
        "nodeType": "BinaryExpression",
        "messageId": "unnecessary",
        "endLine": 2,
        "endColumn": 2379,
        "fix": { "range": [2397, 2400], "text": "@" },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "regexp/strict",
        "severity": 2,
        "message": "Useless identity escapes with non-syntax characters are forbidden.",
        "line": 2,
        "column": 2377,
        "nodeType": "BinaryExpression",
        "messageId": "uselessEscape",
        "endLine": 2,
        "endColumn": 2380,
        "fix": { "range": [2397, 2400], "text": "@" },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "regexp/no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\~.",
        "line": 2,
        "column": 2437,
        "nodeType": "BinaryExpression",
        "messageId": "unnecessary",
        "endLine": 2,
        "endColumn": 2439,
        "fix": { "range": [2457, 2460], "text": "~" },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "regexp/strict",
        "severity": 2,
        "message": "Useless identity escapes with non-syntax characters are forbidden.",
        "line": 2,
        "column": 2437,
        "nodeType": "BinaryExpression",
        "messageId": "uselessEscape",
        "endLine": 2,
        "endColumn": 2440,
        "fix": { "range": [2457, 2460], "text": "~" },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "sonarjs/block-scoped-var",
        "severity": 2,
        "message": "Consider moving declaration of 'V' as it is referenced outside current binding context.",
        "line": 2,
        "column": 2581,
        "nodeType": "Identifier",
        "endLine": 2,
        "endColumn": 2582,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "sonarjs/block-scoped-var",
        "severity": 2,
        "message": "Consider moving declaration of 'U' as it is referenced outside current binding context.",
        "line": 2,
        "column": 2585,
        "nodeType": "Identifier",
        "endLine": 2,
        "endColumn": 2586,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "sonarjs/block-scoped-var",
        "severity": 2,
        "message": "Consider moving declaration of 'ae' as it is referenced outside current binding context.",
        "line": 2,
        "column": 2609,
        "nodeType": "Identifier",
        "endLine": 2,
        "endColumn": 2611,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "security/detect-object-injection",
        "severity": 1,
        "message": "Variable Assigned to Object Injection Sink",
        "line": 2,
        "column": 2612,
        "nodeType": "MemberExpression",
        "endLine": 2,
        "endColumn": 2616,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "security/detect-object-injection",
        "severity": 1,
        "message": "Generic Object Injection Sink",
        "line": 2,
        "column": 2876,
        "nodeType": "MemberExpression",
        "endLine": 2,
        "endColumn": 2881,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "sonarjs/cognitive-complexity",
        "severity": 2,
        "message": "Refactor this function to reduce its Cognitive Complexity from 32 to the 15 allowed.",
        "line": 2,
        "column": 3229,
        "nodeType": null,
        "messageId": "refactorFunction",
        "endLine": 2,
        "endColumn": 3230,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "prefer-regex-literals",
        "severity": 2,
        "message": "Use a regular expression literal instead of the 'RegExp' constructor.",
        "line": 2,
        "column": 3276,
        "nodeType": "NewExpression",
        "messageId": "unexpectedRegExp",
        "endLine": 2,
        "endColumn": 3392,
        "suggestions": [
          {
            "messageId": "replaceWithLiteral",
            "fix": {
              "range": [3296, 3412],
              "text": "/\\\\u[0-9A-Fa-f]{4}|\\\\x[0-9A-Fa-f]{2}|\\\\[0-3][0-7]{0,2}|\\\\[0-7]{1,2}|\\\\[\\s\\S]|-|[^-\\\\]/g"
            },
            "desc": "Replace with an equivalent regular expression literal."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "sonarjs/regex-complexity",
        "severity": 2,
        "message": "Simplify this regular expression to reduce its complexity from 21 to the 20 allowed.",
        "line": 2,
        "column": 3287,
        "nodeType": "Literal",
        "endLine": 2,
        "endColumn": 3387,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "sonarjs/block-scoped-var",
        "severity": 2,
        "message": "Consider moving declaration of 'ar' as it is referenced outside current binding context.",
        "line": 2,
        "column": 3441,
        "nodeType": "Identifier",
        "endLine": 2,
        "endColumn": 3443,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "security/detect-object-injection",
        "severity": 1,
        "message": "Variable Assigned to Object Injection Sink",
        "line": 2,
        "column": 3483,
        "nodeType": "MemberExpression",
        "endLine": 2,
        "endColumn": 3489,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "sonarjs/updated-loop-counter",
        "severity": 2,
        "message": "Remove this assignment of \"ar\".",
        "line": 2,
        "column": 3597,
        "nodeType": "Identifier",
        "endLine": 2,
        "endColumn": 3599,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "sonarjs/block-scoped-var",
        "severity": 2,
        "message": "Consider moving declaration of 'at' as it is referenced outside current binding context.",
        "line": 2,
        "column": 3921,
        "nodeType": "Identifier",
        "endLine": 2,
        "endColumn": 3923,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "security/detect-object-injection",
        "severity": 1,
        "message": "Variable Assigned to Object Injection Sink",
        "line": 2,
        "column": 3924,
        "nodeType": "MemberExpression",
        "endLine": 2,
        "endColumn": 3930,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "sonarjs/no-nested-assignment",
        "severity": 2,
        "message": "Extract the assignment of \"ap\" from this expression.",
        "line": 2,
        "column": 3993,
        "nodeType": null,
        "messageId": "extractAssignment",
        "endLine": 2,
        "endColumn": 3994,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "security/detect-object-injection",
        "severity": 1,
        "message": "Variable Assigned to Object Injection Sink",
        "line": 2,
        "column": 4092,
        "nodeType": "MemberExpression",
        "endLine": 2,
        "endColumn": 4098,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "sonarjs/cognitive-complexity",
        "severity": 2,
        "message": "Refactor this function to reduce its Cognitive Complexity from 47 to the 15 allowed.",
        "line": 2,
        "column": 4224,
        "nodeType": null,
        "messageId": "refactorFunction",
        "endLine": 2,
        "endColumn": 4225,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "prefer-regex-literals",
        "severity": 2,
        "message": "Use a regular expression literal instead of the 'RegExp' constructor.",
        "line": 2,
        "column": 4253,
        "nodeType": "NewExpression",
        "messageId": "unexpectedRegExp",
        "endLine": 2,
        "endColumn": 4424,
        "suggestions": [
          {
            "messageId": "replaceWithLiteral",
            "fix": {
              "range": [4273, 4444],
              "text": "/(?:\\[(?:[^\\x5C\\x5D]|\\\\[\\s\\S])*\\]|\\\\u[A-Fa-f0-9]{4}|\\\\x[A-Fa-f0-9]{2}|\\\\[0-9]+|\\\\[^ux0-9]|\\(\\?[:!=]|[\\(\\)\\^]|[^\\x5B\\x5C\\(\\)\\^]+)/g"
            },
            "desc": "Replace with an equivalent regular expression literal."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "sonarjs/slow-regex",
        "severity": 2,
        "message": "Make sure the regex used here, which is vulnerable to super-linear runtime due to backtracking, cannot lead to denial of service.",
        "line": 2,
        "column": 4264,
        "nodeType": "Literal",
        "endLine": 2,
        "endColumn": 4419,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "sonarjs/regex-complexity",
        "severity": 2,
        "message": "Simplify this regular expression to reduce its complexity from 29 to the 20 allowed.",
        "line": 2,
        "column": 4264,
        "nodeType": "Literal",
        "endLine": 2,
        "endColumn": 4419,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "regexp/no-useless-non-capturing-group",
        "severity": 2,
        "message": "Unexpected unnecessary non-capturing group. This group can be removed without changing the behaviour of the regex.",
        "line": 2,
        "column": 4265,
        "nodeType": "Literal",
        "messageId": "unexpected",
        "endLine": 2,
        "endColumn": 4268,
        "fix": {
          "range": [4285, 4438],
          "text": "\\\\[(?:[^\\\\x5C\\\\x5D]|\\\\\\\\[\\\\s\\\\S])*\\\\]|\\\\\\\\u[A-Fa-f0-9]{4}|\\\\\\\\x[A-Fa-f0-9]{2}|\\\\\\\\[0-9]+|\\\\\\\\[^ux0-9]|\\\\(\\\\?[:!=]|[\\\\(\\\\)\\\\^]|[^\\\\x5B\\\\x5C\\\\(\\\\)\\\\^]+"
        },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "regexp/prefer-d",
        "severity": 2,
        "message": "Unexpected character class '[0-9]'. Use '\\d' instead.",
        "line": 2,
        "column": 4350,
        "nodeType": "Literal",
        "messageId": "unexpected",
        "endLine": 2,
        "endColumn": 4355,
        "fix": { "range": [4370, 4375], "text": "\\\\d" },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "sonarjs/concise-regex",
        "severity": 2,
        "message": "Use concise character class syntax '\\d' instead of '[0-9]'.",
        "line": 2,
        "column": 4350,
        "nodeType": null,
        "endLine": 2,
        "endColumn": 4355,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "regexp/no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\(.",
        "line": 2,
        "column": 4383,
        "nodeType": "Literal",
        "messageId": "unnecessary",
        "endLine": 2,
        "endColumn": 4385,
        "fix": { "range": [4403, 4406], "text": "(" },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "regexp/no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\).",
        "line": 2,
        "column": 4386,
        "nodeType": "Literal",
        "messageId": "unnecessary",
        "endLine": 2,
        "endColumn": 4388,
        "fix": { "range": [4406, 4409], "text": ")" },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "regexp/no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\^.",
        "line": 2,
        "column": 4389,
        "nodeType": "Literal",
        "messageId": "unnecessary",
        "endLine": 2,
        "endColumn": 4391,
        "fix": { "range": [4409, 4412], "text": "^" },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "regexp/no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\(.",
        "line": 2,
        "column": 4406,
        "nodeType": "Literal",
        "messageId": "unnecessary",
        "endLine": 2,
        "endColumn": 4408,
        "fix": { "range": [4426, 4429], "text": "(" },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "regexp/no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\).",
        "line": 2,
        "column": 4409,
        "nodeType": "Literal",
        "messageId": "unnecessary",
        "endLine": 2,
        "endColumn": 4411,
        "fix": { "range": [4429, 4432], "text": ")" },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "regexp/no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\^.",
        "line": 2,
        "column": 4412,
        "nodeType": "Literal",
        "messageId": "unnecessary",
        "endLine": 2,
        "endColumn": 4414,
        "fix": { "range": [4432, 4435], "text": "^" },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "sonarjs/block-scoped-var",
        "severity": 2,
        "message": "Consider moving declaration of 'ak' as it is referenced outside current binding context.",
        "line": 2,
        "column": 4461,
        "nodeType": "Identifier",
        "endLine": 2,
        "endColumn": 4463,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "sonarjs/block-scoped-var",
        "severity": 2,
        "message": "Consider moving declaration of 'am' as it is referenced outside current binding context.",
        "line": 2,
        "column": 4466,
        "nodeType": "Identifier",
        "endLine": 2,
        "endColumn": 4468,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "sonarjs/block-scoped-var",
        "severity": 2,
        "message": "Consider moving declaration of 'ag' as it is referenced outside current binding context.",
        "line": 2,
        "column": 4487,
        "nodeType": "Identifier",
        "endLine": 2,
        "endColumn": 4489,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "security/detect-object-injection",
        "severity": 1,
        "message": "Variable Assigned to Object Injection Sink",
        "line": 2,
        "column": 4490,
        "nodeType": "MemberExpression",
        "endLine": 2,
        "endColumn": 4496,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "sonarjs/block-scoped-var",
        "severity": 2,
        "message": "Consider moving declaration of 'af' as it is referenced outside current binding context.",
        "line": 2,
        "column": 4548,
        "nodeType": "Identifier",
        "endLine": 2,
        "endColumn": 4550,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "security/detect-object-injection",
        "severity": 1,
        "message": "Generic Object Injection Sink",
        "line": 2,
        "column": 4583,
        "nodeType": "MemberExpression",
        "endLine": 2,
        "endColumn": 4589,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "security/detect-object-injection",
        "severity": 1,
        "message": "Generic Object Injection Sink",
        "line": 2,
        "column": 4636,
        "nodeType": "MemberExpression",
        "endLine": 2,
        "endColumn": 4642,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "security/detect-object-injection",
        "severity": 1,
        "message": "Generic Object Injection Sink",
        "line": 2,
        "column": 4644,
        "nodeType": "MemberExpression",
        "endLine": 2,
        "endColumn": 4650,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "security/detect-object-injection",
        "severity": 1,
        "message": "Variable Assigned to Object Injection Sink",
        "line": 2,
        "column": 4694,
        "nodeType": "MemberExpression",
        "endLine": 2,
        "endColumn": 4700,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "security/detect-object-injection",
        "severity": 1,
        "message": "Generic Object Injection Sink",
        "line": 2,
        "column": 4722,
        "nodeType": "MemberExpression",
        "endLine": 2,
        "endColumn": 4728,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "security/detect-object-injection",
        "severity": 1,
        "message": "Generic Object Injection Sink",
        "line": 2,
        "column": 4742,
        "nodeType": "MemberExpression",
        "endLine": 2,
        "endColumn": 4748,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "security/detect-object-injection",
        "severity": 1,
        "message": "Generic Object Injection Sink",
        "line": 2,
        "column": 4824,
        "nodeType": "MemberExpression",
        "endLine": 2,
        "endColumn": 4830,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "security/detect-object-injection",
        "severity": 1,
        "message": "Generic Object Injection Sink",
        "line": 2,
        "column": 4836,
        "nodeType": "MemberExpression",
        "endLine": 2,
        "endColumn": 4842,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "security/detect-object-injection",
        "severity": 1,
        "message": "Generic Object Injection Sink",
        "line": 2,
        "column": 4885,
        "nodeType": "MemberExpression",
        "endLine": 2,
        "endColumn": 4891,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "security/detect-object-injection",
        "severity": 1,
        "message": "Generic Object Injection Sink",
        "line": 2,
        "column": 4909,
        "nodeType": "MemberExpression",
        "endLine": 2,
        "endColumn": 4915,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "security/detect-object-injection",
        "severity": 1,
        "message": "Variable Assigned to Object Injection Sink",
        "line": 2,
        "column": 4973,
        "nodeType": "MemberExpression",
        "endLine": 2,
        "endColumn": 4979,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "security/detect-object-injection",
        "severity": 1,
        "message": "Generic Object Injection Sink",
        "line": 2,
        "column": 5027,
        "nodeType": "MemberExpression",
        "endLine": 2,
        "endColumn": 5033,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "security/detect-object-injection",
        "severity": 1,
        "message": "Generic Object Injection Sink",
        "line": 2,
        "column": 5059,
        "nodeType": "MemberExpression",
        "endLine": 2,
        "endColumn": 5065,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "regexp/use-ignore-case",
        "severity": 2,
        "message": "The character class(es) '[a-zA-Z]' can be simplified using the `i` flag.",
        "line": 2,
        "column": 5087,
        "nodeType": "Literal",
        "messageId": "unexpected",
        "endLine": 2,
        "endColumn": 5088,
        "fix": { "range": [5098, 5108], "text": "[a-z]/gi" },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "security/detect-object-injection",
        "severity": 1,
        "message": "Variable Assigned to Object Injection Sink",
        "line": 2,
        "column": 5247,
        "nodeType": "MemberExpression",
        "endLine": 2,
        "endColumn": 5251,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "security/detect-non-literal-regexp",
        "severity": 1,
        "message": "Found non-literal argument to RegExp Constructor",
        "line": 2,
        "column": 5335,
        "nodeType": "NewExpression",
        "endLine": 2,
        "endColumn": 5371,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "security/detect-object-injection",
        "severity": 1,
        "message": "Generic Object Injection Sink",
        "line": 2,
        "column": 5825,
        "nodeType": "MemberExpression",
        "endLine": 2,
        "endColumn": 5829,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "security/detect-object-injection",
        "severity": 1,
        "message": "Generic Object Injection Sink",
        "line": 2,
        "column": 5992,
        "nodeType": "MemberExpression",
        "endLine": 2,
        "endColumn": 5996,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "sonarjs/no-nested-conditional",
        "severity": 2,
        "message": "Extract this nested ternary operation into an independent statement.",
        "line": 2,
        "column": 6320,
        "nodeType": "ConditionalExpression",
        "messageId": "extractTernary",
        "endLine": 2,
        "endColumn": 6325,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "sonarjs/no-nested-conditional",
        "severity": 2,
        "message": "Extract this nested ternary operation into an independent statement.",
        "line": 2,
        "column": 6327,
        "nodeType": "ConditionalExpression",
        "messageId": "extractTernary",
        "endLine": 2,
        "endColumn": 6362,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "sonarjs/no-nested-conditional",
        "severity": 2,
        "message": "Extract this nested ternary operation into an independent statement.",
        "line": 2,
        "column": 6336,
        "nodeType": "ConditionalExpression",
        "messageId": "extractTernary",
        "endLine": 2,
        "endColumn": 6359,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "security/detect-object-injection",
        "severity": 1,
        "message": "Variable Assigned to Object Injection Sink",
        "line": 2,
        "column": 6512,
        "nodeType": "MemberExpression",
        "endLine": 2,
        "endColumn": 6518,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "security/detect-object-injection",
        "severity": 1,
        "message": "Generic Object Injection Sink",
        "line": 2,
        "column": 6653,
        "nodeType": "MemberExpression",
        "endLine": 2,
        "endColumn": 6659,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "regexp/match-any",
        "severity": 2,
        "message": "Unexpected using '[\\0-\\uffff]' to match any character.",
        "line": 2,
        "column": 6675,
        "nodeType": "Literal",
        "messageId": "unexpected",
        "endLine": 2,
        "endColumn": 6686,
        "fix": { "range": [6696, 6705], "text": "\\s\\S" },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "sonarjs/cognitive-complexity",
        "severity": 2,
        "message": "Refactor this function to reduce its Cognitive Complexity from 36 to the 15 allowed.",
        "line": 2,
        "column": 6722,
        "nodeType": null,
        "messageId": "refactorFunction",
        "endLine": 2,
        "endColumn": 6730,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "security/detect-object-injection",
        "severity": 1,
        "message": "Variable Assigned to Object Injection Sink",
        "line": 2,
        "column": 6867,
        "nodeType": "MemberExpression",
        "endLine": 2,
        "endColumn": 6873,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "security/detect-object-injection",
        "severity": 1,
        "message": "Variable Assigned to Object Injection Sink",
        "line": 2,
        "column": 6881,
        "nodeType": "MemberExpression",
        "endLine": 2,
        "endColumn": 6887,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "security/detect-object-injection",
        "severity": 1,
        "message": "Generic Object Injection Sink",
        "line": 2,
        "column": 7038,
        "nodeType": "MemberExpression",
        "endLine": 2,
        "endColumn": 7043,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "security/detect-object-injection",
        "severity": 1,
        "message": "Generic Object Injection Sink",
        "line": 2,
        "column": 7206,
        "nodeType": "MemberExpression",
        "endLine": 2,
        "endColumn": 7212,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "sonarjs/cognitive-complexity",
        "severity": 2,
        "message": "Refactor this function to reduce its Cognitive Complexity from 18 to the 15 allowed.",
        "line": 2,
        "column": 7530,
        "nodeType": null,
        "messageId": "refactorFunction",
        "endLine": 2,
        "endColumn": 7531,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "security/detect-unsafe-regex",
        "severity": 1,
        "message": "Unsafe Regular Expression",
        "line": 2,
        "column": 7585,
        "nodeType": "Literal",
        "endLine": 2,
        "endColumn": 7769,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "sonarjs/regex-complexity",
        "severity": 2,
        "message": "Simplify this regular expression to reduce its complexity from 59 to the 20 allowed.",
        "line": 2,
        "column": 7585,
        "nodeType": "Literal",
        "endLine": 2,
        "endColumn": 7769,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "regexp/no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\'.",
        "line": 2,
        "column": 7590,
        "nodeType": "Literal",
        "messageId": "unnecessary",
        "endLine": 2,
        "endColumn": 7591,
        "fix": { "range": [7610, 7612], "text": "'" },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "regexp/strict",
        "severity": 2,
        "message": "Useless identity escapes with non-syntax characters are forbidden.",
        "line": 2,
        "column": 7590,
        "nodeType": "Literal",
        "messageId": "uselessEscape",
        "endLine": 2,
        "endColumn": 7592,
        "fix": { "range": [7610, 7612], "text": "'" },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "regexp/no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\'.",
        "line": 2,
        "column": 7592,
        "nodeType": "Literal",
        "messageId": "unnecessary",
        "endLine": 2,
        "endColumn": 7593,
        "fix": { "range": [7612, 7614], "text": "'" },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "regexp/strict",
        "severity": 2,
        "message": "Useless identity escapes with non-syntax characters are forbidden.",
        "line": 2,
        "column": 7592,
        "nodeType": "Literal",
        "messageId": "uselessEscape",
        "endLine": 2,
        "endColumn": 7594,
        "fix": { "range": [7612, 7614], "text": "'" },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "regexp/no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\'.",
        "line": 2,
        "column": 7594,
        "nodeType": "Literal",
        "messageId": "unnecessary",
        "endLine": 2,
        "endColumn": 7595,
        "fix": { "range": [7614, 7616], "text": "'" },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "regexp/strict",
        "severity": 2,
        "message": "Useless identity escapes with non-syntax characters are forbidden.",
        "line": 2,
        "column": 7594,
        "nodeType": "Literal",
        "messageId": "uselessEscape",
        "endLine": 2,
        "endColumn": 7596,
        "fix": { "range": [7614, 7616], "text": "'" },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "regexp/no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\'.",
        "line": 2,
        "column": 7601,
        "nodeType": "Literal",
        "messageId": "unnecessary",
        "endLine": 2,
        "endColumn": 7602,
        "fix": { "range": [7621, 7623], "text": "'" },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "regexp/strict",
        "severity": 2,
        "message": "Useless identity escapes with non-syntax characters are forbidden.",
        "line": 2,
        "column": 7601,
        "nodeType": "Literal",
        "messageId": "uselessEscape",
        "endLine": 2,
        "endColumn": 7603,
        "fix": { "range": [7621, 7623], "text": "'" },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "regexp/no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\'.",
        "line": 2,
        "column": 7616,
        "nodeType": "Literal",
        "messageId": "unnecessary",
        "endLine": 2,
        "endColumn": 7617,
        "fix": { "range": [7636, 7638], "text": "'" },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "regexp/strict",
        "severity": 2,
        "message": "Useless identity escapes with non-syntax characters are forbidden.",
        "line": 2,
        "column": 7616,
        "nodeType": "Literal",
        "messageId": "uselessEscape",
        "endLine": 2,
        "endColumn": 7618,
        "fix": { "range": [7636, 7638], "text": "'" },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "regexp/no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\'.",
        "line": 2,
        "column": 7628,
        "nodeType": "Literal",
        "messageId": "unnecessary",
        "endLine": 2,
        "endColumn": 7629,
        "fix": { "range": [7648, 7650], "text": "'" },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "regexp/strict",
        "severity": 2,
        "message": "Useless identity escapes with non-syntax characters are forbidden.",
        "line": 2,
        "column": 7628,
        "nodeType": "Literal",
        "messageId": "uselessEscape",
        "endLine": 2,
        "endColumn": 7630,
        "fix": { "range": [7648, 7650], "text": "'" },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "regexp/no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\'.",
        "line": 2,
        "column": 7637,
        "nodeType": "Literal",
        "messageId": "unnecessary",
        "endLine": 2,
        "endColumn": 7638,
        "fix": { "range": [7657, 7659], "text": "'" },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "regexp/strict",
        "severity": 2,
        "message": "Useless identity escapes with non-syntax characters are forbidden.",
        "line": 2,
        "column": 7637,
        "nodeType": "Literal",
        "messageId": "uselessEscape",
        "endLine": 2,
        "endColumn": 7639,
        "fix": { "range": [7657, 7659], "text": "'" },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "regexp/no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\'.",
        "line": 2,
        "column": 7639,
        "nodeType": "Literal",
        "messageId": "unnecessary",
        "endLine": 2,
        "endColumn": 7640,
        "fix": { "range": [7659, 7661], "text": "'" },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "regexp/strict",
        "severity": 2,
        "message": "Useless identity escapes with non-syntax characters are forbidden.",
        "line": 2,
        "column": 7639,
        "nodeType": "Literal",
        "messageId": "uselessEscape",
        "endLine": 2,
        "endColumn": 7641,
        "fix": { "range": [7659, 7661], "text": "'" },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "regexp/no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\'.",
        "line": 2,
        "column": 7641,
        "nodeType": "Literal",
        "messageId": "unnecessary",
        "endLine": 2,
        "endColumn": 7642,
        "fix": { "range": [7661, 7663], "text": "'" },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "regexp/strict",
        "severity": 2,
        "message": "Useless identity escapes with non-syntax characters are forbidden.",
        "line": 2,
        "column": 7641,
        "nodeType": "Literal",
        "messageId": "uselessEscape",
        "endLine": 2,
        "endColumn": 7643,
        "fix": { "range": [7661, 7663], "text": "'" },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "regexp/no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\\".",
        "line": 2,
        "column": 7647,
        "nodeType": "Literal",
        "messageId": "unnecessary",
        "endLine": 2,
        "endColumn": 7648,
        "fix": { "range": [7667, 7669], "text": "\"" },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "regexp/strict",
        "severity": 2,
        "message": "Useless identity escapes with non-syntax characters are forbidden.",
        "line": 2,
        "column": 7647,
        "nodeType": "Literal",
        "messageId": "uselessEscape",
        "endLine": 2,
        "endColumn": 7649,
        "fix": { "range": [7667, 7669], "text": "\"" },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "regexp/no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\\".",
        "line": 2,
        "column": 7649,
        "nodeType": "Literal",
        "messageId": "unnecessary",
        "endLine": 2,
        "endColumn": 7650,
        "fix": { "range": [7669, 7671], "text": "\"" },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "regexp/strict",
        "severity": 2,
        "message": "Useless identity escapes with non-syntax characters are forbidden.",
        "line": 2,
        "column": 7649,
        "nodeType": "Literal",
        "messageId": "uselessEscape",
        "endLine": 2,
        "endColumn": 7651,
        "fix": { "range": [7669, 7671], "text": "\"" },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "regexp/no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\\".",
        "line": 2,
        "column": 7651,
        "nodeType": "Literal",
        "messageId": "unnecessary",
        "endLine": 2,
        "endColumn": 7652,
        "fix": { "range": [7671, 7673], "text": "\"" },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "regexp/strict",
        "severity": 2,
        "message": "Useless identity escapes with non-syntax characters are forbidden.",
        "line": 2,
        "column": 7651,
        "nodeType": "Literal",
        "messageId": "uselessEscape",
        "endLine": 2,
        "endColumn": 7653,
        "fix": { "range": [7671, 7673], "text": "\"" },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "regexp/no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\\".",
        "line": 2,
        "column": 7658,
        "nodeType": "Literal",
        "messageId": "unnecessary",
        "endLine": 2,
        "endColumn": 7659,
        "fix": { "range": [7678, 7680], "text": "\"" },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "regexp/strict",
        "severity": 2,
        "message": "Useless identity escapes with non-syntax characters are forbidden.",
        "line": 2,
        "column": 7658,
        "nodeType": "Literal",
        "messageId": "uselessEscape",
        "endLine": 2,
        "endColumn": 7660,
        "fix": { "range": [7678, 7680], "text": "\"" },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "regexp/no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\\".",
        "line": 2,
        "column": 7673,
        "nodeType": "Literal",
        "messageId": "unnecessary",
        "endLine": 2,
        "endColumn": 7674,
        "fix": { "range": [7693, 7695], "text": "\"" },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "regexp/strict",
        "severity": 2,
        "message": "Useless identity escapes with non-syntax characters are forbidden.",
        "line": 2,
        "column": 7673,
        "nodeType": "Literal",
        "messageId": "uselessEscape",
        "endLine": 2,
        "endColumn": 7675,
        "fix": { "range": [7693, 7695], "text": "\"" },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "regexp/no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\\".",
        "line": 2,
        "column": 7685,
        "nodeType": "Literal",
        "messageId": "unnecessary",
        "endLine": 2,
        "endColumn": 7686,
        "fix": { "range": [7705, 7707], "text": "\"" },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "regexp/strict",
        "severity": 2,
        "message": "Useless identity escapes with non-syntax characters are forbidden.",
        "line": 2,
        "column": 7685,
        "nodeType": "Literal",
        "messageId": "uselessEscape",
        "endLine": 2,
        "endColumn": 7687,
        "fix": { "range": [7705, 7707], "text": "\"" },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "regexp/no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\\".",
        "line": 2,
        "column": 7694,
        "nodeType": "Literal",
        "messageId": "unnecessary",
        "endLine": 2,
        "endColumn": 7695,
        "fix": { "range": [7714, 7716], "text": "\"" },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "regexp/strict",
        "severity": 2,
        "message": "Useless identity escapes with non-syntax characters are forbidden.",
        "line": 2,
        "column": 7694,
        "nodeType": "Literal",
        "messageId": "uselessEscape",
        "endLine": 2,
        "endColumn": 7696,
        "fix": { "range": [7714, 7716], "text": "\"" },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "regexp/no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\\".",
        "line": 2,
        "column": 7696,
        "nodeType": "Literal",
        "messageId": "unnecessary",
        "endLine": 2,
        "endColumn": 7697,
        "fix": { "range": [7716, 7718], "text": "\"" },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "regexp/strict",
        "severity": 2,
        "message": "Useless identity escapes with non-syntax characters are forbidden.",
        "line": 2,
        "column": 7696,
        "nodeType": "Literal",
        "messageId": "uselessEscape",
        "endLine": 2,
        "endColumn": 7698,
        "fix": { "range": [7716, 7718], "text": "\"" },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "regexp/no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\\".",
        "line": 2,
        "column": 7698,
        "nodeType": "Literal",
        "messageId": "unnecessary",
        "endLine": 2,
        "endColumn": 7699,
        "fix": { "range": [7718, 7720], "text": "\"" },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "regexp/strict",
        "severity": 2,
        "message": "Useless identity escapes with non-syntax characters are forbidden.",
        "line": 2,
        "column": 7698,
        "nodeType": "Literal",
        "messageId": "uselessEscape",
        "endLine": 2,
        "endColumn": 7700,
        "fix": { "range": [7718, 7720], "text": "\"" },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "regexp/no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\'.",
        "line": 2,
        "column": 7704,
        "nodeType": "Literal",
        "messageId": "unnecessary",
        "endLine": 2,
        "endColumn": 7705,
        "fix": { "range": [7724, 7726], "text": "'" },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "regexp/strict",
        "severity": 2,
        "message": "Useless identity escapes with non-syntax characters are forbidden.",
        "line": 2,
        "column": 7704,
        "nodeType": "Literal",
        "messageId": "uselessEscape",
        "endLine": 2,
        "endColumn": 7706,
        "fix": { "range": [7724, 7726], "text": "'" },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "regexp/no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\'.",
        "line": 2,
        "column": 7713,
        "nodeType": "Literal",
        "messageId": "unnecessary",
        "endLine": 2,
        "endColumn": 7714,
        "fix": { "range": [7733, 7735], "text": "'" },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "regexp/strict",
        "severity": 2,
        "message": "Useless identity escapes with non-syntax characters are forbidden.",
        "line": 2,
        "column": 7713,
        "nodeType": "Literal",
        "messageId": "uselessEscape",
        "endLine": 2,
        "endColumn": 7715,
        "fix": { "range": [7733, 7735], "text": "'" },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "regexp/no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\'.",
        "line": 2,
        "column": 7730,
        "nodeType": "Literal",
        "messageId": "unnecessary",
        "endLine": 2,
        "endColumn": 7731,
        "fix": { "range": [7750, 7752], "text": "'" },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "regexp/strict",
        "severity": 2,
        "message": "Useless identity escapes with non-syntax characters are forbidden.",
        "line": 2,
        "column": 7730,
        "nodeType": "Literal",
        "messageId": "uselessEscape",
        "endLine": 2,
        "endColumn": 7732,
        "fix": { "range": [7750, 7752], "text": "'" },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "regexp/no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\\".",
        "line": 2,
        "column": 7736,
        "nodeType": "Literal",
        "messageId": "unnecessary",
        "endLine": 2,
        "endColumn": 7737,
        "fix": { "range": [7756, 7758], "text": "\"" },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "regexp/strict",
        "severity": 2,
        "message": "Useless identity escapes with non-syntax characters are forbidden.",
        "line": 2,
        "column": 7736,
        "nodeType": "Literal",
        "messageId": "uselessEscape",
        "endLine": 2,
        "endColumn": 7738,
        "fix": { "range": [7756, 7758], "text": "\"" },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "regexp/no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\\".",
        "line": 2,
        "column": 7745,
        "nodeType": "Literal",
        "messageId": "unnecessary",
        "endLine": 2,
        "endColumn": 7746,
        "fix": { "range": [7765, 7767], "text": "\"" },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "regexp/strict",
        "severity": 2,
        "message": "Useless identity escapes with non-syntax characters are forbidden.",
        "line": 2,
        "column": 7745,
        "nodeType": "Literal",
        "messageId": "uselessEscape",
        "endLine": 2,
        "endColumn": 7747,
        "fix": { "range": [7765, 7767], "text": "\"" },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "regexp/no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\\".",
        "line": 2,
        "column": 7762,
        "nodeType": "Literal",
        "messageId": "unnecessary",
        "endLine": 2,
        "endColumn": 7763,
        "fix": { "range": [7782, 7784], "text": "\"" },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "regexp/strict",
        "severity": 2,
        "message": "Useless identity escapes with non-syntax characters are forbidden.",
        "line": 2,
        "column": 7762,
        "nodeType": "Literal",
        "messageId": "uselessEscape",
        "endLine": 2,
        "endColumn": 7764,
        "fix": { "range": [7782, 7784], "text": "\"" },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "sonarjs/regex-complexity",
        "severity": 2,
        "message": "Simplify this regular expression to reduce its complexity from 29 to the 20 allowed.",
        "line": 2,
        "column": 7821,
        "nodeType": "Literal",
        "endLine": 2,
        "endColumn": 7923,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "regexp/no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\'.",
        "line": 2,
        "column": 7826,
        "nodeType": "Literal",
        "messageId": "unnecessary",
        "endLine": 2,
        "endColumn": 7827,
        "fix": { "range": [7846, 7848], "text": "'" },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "regexp/strict",
        "severity": 2,
        "message": "Useless identity escapes with non-syntax characters are forbidden.",
        "line": 2,
        "column": 7826,
        "nodeType": "Literal",
        "messageId": "uselessEscape",
        "endLine": 2,
        "endColumn": 7828,
        "fix": { "range": [7846, 7848], "text": "'" },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "regexp/no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\'.",
        "line": 2,
        "column": 7835,
        "nodeType": "Literal",
        "messageId": "unnecessary",
        "endLine": 2,
        "endColumn": 7836,
        "fix": { "range": [7855, 7857], "text": "'" },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "regexp/strict",
        "severity": 2,
        "message": "Useless identity escapes with non-syntax characters are forbidden.",
        "line": 2,
        "column": 7835,
        "nodeType": "Literal",
        "messageId": "uselessEscape",
        "endLine": 2,
        "endColumn": 7837,
        "fix": { "range": [7855, 7857], "text": "'" },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "regexp/no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\'.",
        "line": 2,
        "column": 7852,
        "nodeType": "Literal",
        "messageId": "unnecessary",
        "endLine": 2,
        "endColumn": 7853,
        "fix": { "range": [7872, 7874], "text": "'" },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "regexp/strict",
        "severity": 2,
        "message": "Useless identity escapes with non-syntax characters are forbidden.",
        "line": 2,
        "column": 7852,
        "nodeType": "Literal",
        "messageId": "uselessEscape",
        "endLine": 2,
        "endColumn": 7854,
        "fix": { "range": [7872, 7874], "text": "'" },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "regexp/no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\\".",
        "line": 2,
        "column": 7858,
        "nodeType": "Literal",
        "messageId": "unnecessary",
        "endLine": 2,
        "endColumn": 7859,
        "fix": { "range": [7878, 7880], "text": "\"" },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "regexp/strict",
        "severity": 2,
        "message": "Useless identity escapes with non-syntax characters are forbidden.",
        "line": 2,
        "column": 7858,
        "nodeType": "Literal",
        "messageId": "uselessEscape",
        "endLine": 2,
        "endColumn": 7860,
        "fix": { "range": [7878, 7880], "text": "\"" },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "regexp/no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\\".",
        "line": 2,
        "column": 7867,
        "nodeType": "Literal",
        "messageId": "unnecessary",
        "endLine": 2,
        "endColumn": 7868,
        "fix": { "range": [7887, 7889], "text": "\"" },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "regexp/strict",
        "severity": 2,
        "message": "Useless identity escapes with non-syntax characters are forbidden.",
        "line": 2,
        "column": 7867,
        "nodeType": "Literal",
        "messageId": "uselessEscape",
        "endLine": 2,
        "endColumn": 7869,
        "fix": { "range": [7887, 7889], "text": "\"" },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "regexp/no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\\".",
        "line": 2,
        "column": 7884,
        "nodeType": "Literal",
        "messageId": "unnecessary",
        "endLine": 2,
        "endColumn": 7885,
        "fix": { "range": [7904, 7906], "text": "\"" },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "regexp/strict",
        "severity": 2,
        "message": "Useless identity escapes with non-syntax characters are forbidden.",
        "line": 2,
        "column": 7884,
        "nodeType": "Literal",
        "messageId": "uselessEscape",
        "endLine": 2,
        "endColumn": 7886,
        "fix": { "range": [7904, 7906], "text": "\"" },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "regexp/no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\`.",
        "line": 2,
        "column": 7890,
        "nodeType": "Literal",
        "messageId": "unnecessary",
        "endLine": 2,
        "endColumn": 7891,
        "fix": { "range": [7910, 7912], "text": "`" },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "regexp/strict",
        "severity": 2,
        "message": "Useless identity escapes with non-syntax characters are forbidden.",
        "line": 2,
        "column": 7890,
        "nodeType": "Literal",
        "messageId": "uselessEscape",
        "endLine": 2,
        "endColumn": 7892,
        "fix": { "range": [7910, 7912], "text": "`" },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "regexp/no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\`.",
        "line": 2,
        "column": 7899,
        "nodeType": "Literal",
        "messageId": "unnecessary",
        "endLine": 2,
        "endColumn": 7900,
        "fix": { "range": [7919, 7921], "text": "`" },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "regexp/strict",
        "severity": 2,
        "message": "Useless identity escapes with non-syntax characters are forbidden.",
        "line": 2,
        "column": 7899,
        "nodeType": "Literal",
        "messageId": "uselessEscape",
        "endLine": 2,
        "endColumn": 7901,
        "fix": { "range": [7919, 7921], "text": "`" },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "regexp/no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\`.",
        "line": 2,
        "column": 7916,
        "nodeType": "Literal",
        "messageId": "unnecessary",
        "endLine": 2,
        "endColumn": 7917,
        "fix": { "range": [7936, 7938], "text": "`" },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "regexp/strict",
        "severity": 2,
        "message": "Useless identity escapes with non-syntax characters are forbidden.",
        "line": 2,
        "column": 7916,
        "nodeType": "Literal",
        "messageId": "uselessEscape",
        "endLine": 2,
        "endColumn": 7918,
        "fix": { "range": [7936, 7938], "text": "`" },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "regexp/no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\'.",
        "line": 2,
        "column": 7958,
        "nodeType": "Literal",
        "messageId": "unnecessary",
        "endLine": 2,
        "endColumn": 7959,
        "fix": { "range": [7978, 7980], "text": "'" },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "regexp/strict",
        "severity": 2,
        "message": "Useless identity escapes with non-syntax characters are forbidden.",
        "line": 2,
        "column": 7958,
        "nodeType": "Literal",
        "messageId": "uselessEscape",
        "endLine": 2,
        "endColumn": 7960,
        "fix": { "range": [7978, 7980], "text": "'" },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "regexp/no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\'.",
        "line": 2,
        "column": 7967,
        "nodeType": "Literal",
        "messageId": "unnecessary",
        "endLine": 2,
        "endColumn": 7968,
        "fix": { "range": [7987, 7989], "text": "'" },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "regexp/strict",
        "severity": 2,
        "message": "Useless identity escapes with non-syntax characters are forbidden.",
        "line": 2,
        "column": 7967,
        "nodeType": "Literal",
        "messageId": "uselessEscape",
        "endLine": 2,
        "endColumn": 7969,
        "fix": { "range": [7987, 7989], "text": "'" },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "regexp/no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\'.",
        "line": 2,
        "column": 7983,
        "nodeType": "Literal",
        "messageId": "unnecessary",
        "endLine": 2,
        "endColumn": 7984,
        "fix": { "range": [8003, 8005], "text": "'" },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "regexp/strict",
        "severity": 2,
        "message": "Useless identity escapes with non-syntax characters are forbidden.",
        "line": 2,
        "column": 7983,
        "nodeType": "Literal",
        "messageId": "uselessEscape",
        "endLine": 2,
        "endColumn": 7985,
        "fix": { "range": [8003, 8005], "text": "'" },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "regexp/no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\\".",
        "line": 2,
        "column": 7989,
        "nodeType": "Literal",
        "messageId": "unnecessary",
        "endLine": 2,
        "endColumn": 7990,
        "fix": { "range": [8009, 8011], "text": "\"" },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "regexp/strict",
        "severity": 2,
        "message": "Useless identity escapes with non-syntax characters are forbidden.",
        "line": 2,
        "column": 7989,
        "nodeType": "Literal",
        "messageId": "uselessEscape",
        "endLine": 2,
        "endColumn": 7991,
        "fix": { "range": [8009, 8011], "text": "\"" },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "regexp/no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\\".",
        "line": 2,
        "column": 7998,
        "nodeType": "Literal",
        "messageId": "unnecessary",
        "endLine": 2,
        "endColumn": 7999,
        "fix": { "range": [8018, 8020], "text": "\"" },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "regexp/strict",
        "severity": 2,
        "message": "Useless identity escapes with non-syntax characters are forbidden.",
        "line": 2,
        "column": 7998,
        "nodeType": "Literal",
        "messageId": "uselessEscape",
        "endLine": 2,
        "endColumn": 8000,
        "fix": { "range": [8018, 8020], "text": "\"" },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "regexp/no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\\".",
        "line": 2,
        "column": 8014,
        "nodeType": "Literal",
        "messageId": "unnecessary",
        "endLine": 2,
        "endColumn": 8015,
        "fix": { "range": [8034, 8036], "text": "\"" },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "regexp/strict",
        "severity": 2,
        "message": "Useless identity escapes with non-syntax characters are forbidden.",
        "line": 2,
        "column": 8014,
        "nodeType": "Literal",
        "messageId": "uselessEscape",
        "endLine": 2,
        "endColumn": 8016,
        "fix": { "range": [8034, 8036], "text": "\"" },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "regexp/no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\\".",
        "line": 2,
        "column": 8071,
        "nodeType": "Literal",
        "messageId": "unnecessary",
        "endLine": 2,
        "endColumn": 8072,
        "fix": { "range": [8091, 8093], "text": "\"" },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "regexp/strict",
        "severity": 2,
        "message": "Useless identity escapes with non-syntax characters are forbidden.",
        "line": 2,
        "column": 8071,
        "nodeType": "Literal",
        "messageId": "uselessEscape",
        "endLine": 2,
        "endColumn": 8073,
        "fix": { "range": [8091, 8093], "text": "\"" },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "regexp/no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\\".",
        "line": 2,
        "column": 8078,
        "nodeType": "Literal",
        "messageId": "unnecessary",
        "endLine": 2,
        "endColumn": 8079,
        "fix": { "range": [8098, 8100], "text": "\"" },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "regexp/strict",
        "severity": 2,
        "message": "Useless identity escapes with non-syntax characters are forbidden.",
        "line": 2,
        "column": 8078,
        "nodeType": "Literal",
        "messageId": "uselessEscape",
        "endLine": 2,
        "endColumn": 8080,
        "fix": { "range": [8098, 8100], "text": "\"" },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "regexp/no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\\".",
        "line": 2,
        "column": 8082,
        "nodeType": "Literal",
        "messageId": "unnecessary",
        "endLine": 2,
        "endColumn": 8083,
        "fix": { "range": [8102, 8104], "text": "\"" },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "regexp/strict",
        "severity": 2,
        "message": "Useless identity escapes with non-syntax characters are forbidden.",
        "line": 2,
        "column": 8082,
        "nodeType": "Literal",
        "messageId": "uselessEscape",
        "endLine": 2,
        "endColumn": 8084,
        "fix": { "range": [8102, 8104], "text": "\"" },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "regexp/no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\\".",
        "line": 2,
        "column": 8084,
        "nodeType": "Literal",
        "messageId": "unnecessary",
        "endLine": 2,
        "endColumn": 8085,
        "fix": { "range": [8104, 8106], "text": "\"" },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "regexp/strict",
        "severity": 2,
        "message": "Useless identity escapes with non-syntax characters are forbidden.",
        "line": 2,
        "column": 8084,
        "nodeType": "Literal",
        "messageId": "uselessEscape",
        "endLine": 2,
        "endColumn": 8086,
        "fix": { "range": [8104, 8106], "text": "\"" },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "regexp/no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\\".",
        "line": 2,
        "column": 8091,
        "nodeType": "Literal",
        "messageId": "unnecessary",
        "endLine": 2,
        "endColumn": 8092,
        "fix": { "range": [8111, 8113], "text": "\"" },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "regexp/strict",
        "severity": 2,
        "message": "Useless identity escapes with non-syntax characters are forbidden.",
        "line": 2,
        "column": 8091,
        "nodeType": "Literal",
        "messageId": "uselessEscape",
        "endLine": 2,
        "endColumn": 8093,
        "fix": { "range": [8111, 8113], "text": "\"" },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "security/detect-unsafe-regex",
        "severity": 1,
        "message": "Unsafe Regular Expression",
        "line": 2,
        "column": 8357,
        "nodeType": "Literal",
        "endLine": 2,
        "endColumn": 8427,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "sonarjs/slow-regex",
        "severity": 2,
        "message": "Make sure the regex used here, which is vulnerable to super-linear runtime due to backtracking, cannot lead to denial of service.",
        "line": 2,
        "column": 8357,
        "nodeType": "Literal",
        "endLine": 2,
        "endColumn": 8427,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "sonarjs/regex-complexity",
        "severity": 2,
        "message": "Simplify this regular expression to reduce its complexity from 29 to the 20 allowed.",
        "line": 2,
        "column": 8357,
        "nodeType": "Literal",
        "endLine": 2,
        "endColumn": 8427,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "regexp/no-super-linear-backtracking",
        "severity": 2,
        "message": "The quantifier '[\\w-]+' can exchange characters with '[\\w-]+'. Using any string accepted by /[-\\w]+/, this can be exploited to cause at least polynomial backtracking. This might cause exponential backtracking.",
        "line": 2,
        "column": 8396,
        "nodeType": "Literal",
        "messageId": "trade",
        "endLine": 2,
        "endColumn": 8412,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "regexp/no-useless-assertions",
        "severity": 2,
        "message": "'$' will always reject because it is followed by a character.",
        "line": 2,
        "column": 8688,
        "nodeType": "BinaryExpression",
        "messageId": "alwaysRejectByChar",
        "endLine": 2,
        "endColumn": 8689,
        "suggestions": [
          {
            "messageId": "rejectSuggestion",
            "fix": { "range": [8699, 8710], "text": "(?:\\\\x5D)" },
            "desc": "Remove branch of the assertion. (Replace with empty set.)"
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "sonarjs/anchor-precedence",
        "severity": 2,
        "message": "Group parts of the regex together to make the intended operator precedence explicit.",
        "line": 2,
        "column": 8812,
        "nodeType": null,
        "endLine": 2,
        "endColumn": 8817,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "security/detect-non-literal-regexp",
        "severity": 1,
        "message": "Found non-literal argument to RegExp Constructor",
        "line": 2,
        "column": 8847,
        "nodeType": "NewExpression",
        "endLine": 2,
        "endColumn": 8897,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "regexp/prefer-w",
        "severity": 2,
        "message": "Unexpected character class ranges '[a-z_0-9]'. Use '\\w' instead.",
        "line": 2,
        "column": 8963,
        "nodeType": "Literal",
        "messageId": "unexpected",
        "endLine": 2,
        "endColumn": 8974,
        "fix": { "range": [8984, 8993], "text": "\\w$@" },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "regexp/prefer-w",
        "severity": 2,
        "message": "Unexpected character class ranges '[A-Za-z_0-9]'. Use '\\w' instead.",
        "line": 2,
        "column": 9008,
        "nodeType": "Literal",
        "messageId": "unexpected",
        "endLine": 2,
        "endColumn": 9022,
        "fix": { "range": [9029, 9041], "text": "\\w$@" },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "regexp/prefer-w",
        "severity": 2,
        "message": "Unexpected character class ranges '[a-z_0-9]'. Use '\\w' instead.",
        "line": 2,
        "column": 9052,
        "nodeType": "Literal",
        "messageId": "unexpected",
        "endLine": 2,
        "endColumn": 9063,
        "fix": { "range": [9073, 9082], "text": "\\w$@" },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "prefer-regex-literals",
        "severity": 2,
        "message": "Use a regular expression literal instead of the 'RegExp' constructor.",
        "line": 2,
        "column": 9076,
        "nodeType": "NewExpression",
        "messageId": "unexpectedRegExp",
        "endLine": 2,
        "endColumn": 9177,
        "suggestions": [
          {
            "messageId": "replaceWithLiteral",
            "fix": {
              "range": [9096, 9197],
              "text": "/^(?:0x[a-f0-9]+|(?:\\d(?:_\\d+)*\\d*(?:\\.\\d*)?|\\.\\d\\+)(?:e[+\\-]?\\d+)?)[a-z]*/i"
            },
            "desc": "Replace with an equivalent regular expression literal."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "security/detect-unsafe-regex",
        "severity": 1,
        "message": "Unsafe Regular Expression (new RegExp)",
        "line": 2,
        "column": 9076,
        "nodeType": "NewExpression",
        "endLine": 2,
        "endColumn": 9177,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "sonarjs/regex-complexity",
        "severity": 2,
        "message": "Simplify this regular expression to reduce its complexity from 34 to the 20 allowed.",
        "line": 2,
        "column": 9087,
        "nodeType": "Literal",
        "endLine": 2,
        "endColumn": 9172,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "regexp/no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\..",
        "line": 2,
        "column": 9231,
        "nodeType": "Literal",
        "messageId": "unnecessary",
        "endLine": 2,
        "endColumn": 9232,
        "fix": { "range": [9251, 9253], "text": "." },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "regexp/no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\'.",
        "line": 2,
        "column": 9235,
        "nodeType": "Literal",
        "messageId": "unnecessary",
        "endLine": 2,
        "endColumn": 9236,
        "fix": { "range": [9255, 9257], "text": "'" },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "regexp/strict",
        "severity": 2,
        "message": "Useless identity escapes with non-syntax characters are forbidden.",
        "line": 2,
        "column": 9235,
        "nodeType": "Literal",
        "messageId": "uselessEscape",
        "endLine": 2,
        "endColumn": 9237,
        "fix": { "range": [9255, 9257], "text": "'" },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "regexp/no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\\".",
        "line": 2,
        "column": 9237,
        "nodeType": "Literal",
        "messageId": "unnecessary",
        "endLine": 2,
        "endColumn": 9238,
        "fix": { "range": [9257, 9259], "text": "\"" },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "regexp/strict",
        "severity": 2,
        "message": "Useless identity escapes with non-syntax characters are forbidden.",
        "line": 2,
        "column": 9237,
        "nodeType": "Literal",
        "messageId": "uselessEscape",
        "endLine": 2,
        "endColumn": 9239,
        "fix": { "range": [9257, 9259], "text": "\"" },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "regexp/no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\`.",
        "line": 2,
        "column": 9239,
        "nodeType": "Literal",
        "messageId": "unnecessary",
        "endLine": 2,
        "endColumn": 9240,
        "fix": { "range": [9259, 9261], "text": "`" },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "regexp/strict",
        "severity": 2,
        "message": "Useless identity escapes with non-syntax characters are forbidden.",
        "line": 2,
        "column": 9239,
        "nodeType": "Literal",
        "messageId": "uselessEscape",
        "endLine": 2,
        "endColumn": 9241,
        "fix": { "range": [9259, 9261], "text": "`" },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "regexp/no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\/.",
        "line": 2,
        "column": 9241,
        "nodeType": "Literal",
        "messageId": "unnecessary",
        "endLine": 2,
        "endColumn": 9242,
        "fix": { "range": [9261, 9263], "text": "/" },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "regexp/no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\#.",
        "line": 2,
        "column": 9243,
        "nodeType": "Literal",
        "messageId": "unnecessary",
        "endLine": 2,
        "endColumn": 9244,
        "fix": { "range": [9263, 9265], "text": "#" },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "regexp/strict",
        "severity": 2,
        "message": "Useless identity escapes with non-syntax characters are forbidden.",
        "line": 2,
        "column": 9243,
        "nodeType": "Literal",
        "messageId": "uselessEscape",
        "endLine": 2,
        "endColumn": 9245,
        "fix": { "range": [9263, 9265], "text": "#" },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "sonarjs/cognitive-complexity",
        "severity": 2,
        "message": "Refactor this function to reduce its Cognitive Complexity from 25 to the 15 allowed.",
        "line": 2,
        "column": 9756,
        "nodeType": null,
        "messageId": "refactorFunction",
        "endLine": 2,
        "endColumn": 9758,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "sonarjs/no-nested-assignment",
        "severity": 2,
        "message": "Extract the assignment of \"aj\" from this expression.",
        "line": 2,
        "column": 10583,
        "nodeType": null,
        "messageId": "extractAssignment",
        "endLine": 2,
        "endColumn": 10584,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "sonarjs/block-scoped-var",
        "severity": 2,
        "message": "Consider moving declaration of 'Y' as it is referenced outside current binding context.",
        "line": 2,
        "column": 10643,
        "nodeType": "Identifier",
        "endLine": 2,
        "endColumn": 10644,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "security/detect-object-injection",
        "severity": 1,
        "message": "Function Call Object Injection Sink",
        "line": 2,
        "column": 10666,
        "nodeType": "MemberExpression",
        "endLine": 2,
        "endColumn": 10670,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "security/detect-object-injection",
        "severity": 1,
        "message": "Generic Object Injection Sink",
        "line": 2,
        "column": 10839,
        "nodeType": "MemberExpression",
        "endLine": 2,
        "endColumn": 10843,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "sonarjs/cognitive-complexity",
        "severity": 2,
        "message": "Refactor this function to reduce its Cognitive Complexity from 22 to the 15 allowed.",
        "line": 2,
        "column": 10979,
        "nodeType": null,
        "messageId": "refactorFunction",
        "endLine": 2,
        "endColumn": 10980,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "security/detect-object-injection",
        "severity": 1,
        "message": "Generic Object Injection Sink",
        "line": 2,
        "column": 11173,
        "nodeType": "MemberExpression",
        "endLine": 2,
        "endColumn": 11177,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "security/detect-object-injection",
        "severity": 1,
        "message": "Generic Object Injection Sink",
        "line": 2,
        "column": 11213,
        "nodeType": "MemberExpression",
        "endLine": 2,
        "endColumn": 11218,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "security/detect-object-injection",
        "severity": 1,
        "message": "Variable Assigned to Object Injection Sink",
        "line": 2,
        "column": 11305,
        "nodeType": "MemberExpression",
        "endLine": 2,
        "endColumn": 11310,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "sonarjs/block-scoped-var",
        "severity": 2,
        "message": "Consider moving declaration of 'W' as it is referenced outside current binding context.",
        "line": 2,
        "column": 11330,
        "nodeType": "Identifier",
        "endLine": 2,
        "endColumn": 11331,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "sonarjs/no-dead-store",
        "severity": 2,
        "message": "Remove this useless assignment to variable \"Y\".",
        "line": 2,
        "column": 11396,
        "nodeType": null,
        "messageId": "removeAssignment",
        "endLine": 2,
        "endColumn": 11397,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "sonarjs/no-unused-vars",
        "severity": 2,
        "message": "Remove the declaration of the unused 'ae' variable.",
        "line": 2,
        "column": 11414,
        "nodeType": "Identifier",
        "messageId": "unusedVariable",
        "endLine": 2,
        "endColumn": 11416,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "sonarjs/no-unused-vars",
        "severity": 2,
        "message": "Remove the declaration of the unused 'af' variable.",
        "line": 2,
        "column": 11438,
        "nodeType": "Identifier",
        "messageId": "unusedVariable",
        "endLine": 2,
        "endColumn": 11440,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "sonarjs/no-dead-store",
        "severity": 2,
        "message": "Remove this useless assignment to variable \"af\".",
        "line": 2,
        "column": 11438,
        "nodeType": null,
        "messageId": "removeAssignment",
        "endLine": 2,
        "endColumn": 11440,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "security/detect-object-injection",
        "severity": 1,
        "message": "Variable Assigned to Object Injection Sink",
        "line": 2,
        "column": 11441,
        "nodeType": "MemberExpression",
        "endLine": 2,
        "endColumn": 11447,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "sonarjs/no-unused-vars",
        "severity": 2,
        "message": "Remove the declaration of the unused 'ag' variable.",
        "line": 2,
        "column": 11471,
        "nodeType": "Identifier",
        "messageId": "unusedVariable",
        "endLine": 2,
        "endColumn": 11473,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "sonarjs/no-dead-store",
        "severity": 2,
        "message": "Remove this useless assignment to variable \"ag\".",
        "line": 2,
        "column": 11471,
        "nodeType": null,
        "messageId": "removeAssignment",
        "endLine": 2,
        "endColumn": 11473,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "security/detect-object-injection",
        "severity": 1,
        "message": "Variable Assigned to Object Injection Sink",
        "line": 2,
        "column": 11474,
        "nodeType": "MemberExpression",
        "endLine": 2,
        "endColumn": 11478,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "security/detect-object-injection",
        "severity": 1,
        "message": "Variable Assigned to Object Injection Sink",
        "line": 2,
        "column": 11953,
        "nodeType": "MemberExpression",
        "endLine": 2,
        "endColumn": 11957,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "security/detect-object-injection",
        "severity": 1,
        "message": "Generic Object Injection Sink",
        "line": 2,
        "column": 11983,
        "nodeType": "MemberExpression",
        "endLine": 2,
        "endColumn": 11987,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "security/detect-object-injection",
        "severity": 1,
        "message": "Generic Object Injection Sink",
        "line": 2,
        "column": 12174,
        "nodeType": "MemberExpression",
        "endLine": 2,
        "endColumn": 12178,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "regexp/no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\!.",
        "line": 2,
        "column": 12253,
        "nodeType": "Literal",
        "messageId": "unnecessary",
        "endLine": 2,
        "endColumn": 12254,
        "fix": { "range": [12273, 12275], "text": "!" },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "regexp/strict",
        "severity": 2,
        "message": "Useless identity escapes with non-syntax characters are forbidden.",
        "line": 2,
        "column": 12253,
        "nodeType": "Literal",
        "messageId": "uselessEscape",
        "endLine": 2,
        "endColumn": 12255,
        "fix": { "range": [12273, 12275], "text": "!" },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "regexp/no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\-.",
        "line": 2,
        "column": 12269,
        "nodeType": "Literal",
        "messageId": "unnecessary",
        "endLine": 2,
        "endColumn": 12270,
        "fix": { "range": [12289, 12291], "text": "-" },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "regexp/strict",
        "severity": 2,
        "message": "Useless identity escapes with non-syntax characters are forbidden.",
        "line": 2,
        "column": 12269,
        "nodeType": "Literal",
        "messageId": "uselessEscape",
        "endLine": 2,
        "endColumn": 12271,
        "fix": { "range": [12289, 12291], "text": "-" },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "regexp/no-useless-character-class",
        "severity": 2,
        "message": "Unexpected character class with one character class escape. Can remove brackets.",
        "line": 2,
        "column": 12654,
        "nodeType": "Literal",
        "messageId": "unexpectedCharacterClassWith",
        "endLine": 2,
        "endColumn": 12658,
        "fix": { "range": [12674, 12678], "text": "\\s" },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "sonarjs/single-char-in-character-classes",
        "severity": 2,
        "message": "Replace this character class by the character itself.",
        "line": 2,
        "column": 12654,
        "nodeType": null,
        "messageId": "issue",
        "endLine": 2,
        "endColumn": 12658,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "regexp/no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\\".",
        "line": 2,
        "column": 12685,
        "nodeType": "Literal",
        "messageId": "unnecessary",
        "endLine": 2,
        "endColumn": 12686,
        "fix": { "range": [12705, 12707], "text": "\"" },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "regexp/strict",
        "severity": 2,
        "message": "Useless identity escapes with non-syntax characters are forbidden.",
        "line": 2,
        "column": 12685,
        "nodeType": "Literal",
        "messageId": "uselessEscape",
        "endLine": 2,
        "endColumn": 12687,
        "fix": { "range": [12705, 12707], "text": "\"" },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "regexp/no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\\".",
        "line": 2,
        "column": 12689,
        "nodeType": "Literal",
        "messageId": "unnecessary",
        "endLine": 2,
        "endColumn": 12690,
        "fix": { "range": [12709, 12711], "text": "\"" },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "regexp/strict",
        "severity": 2,
        "message": "Useless identity escapes with non-syntax characters are forbidden.",
        "line": 2,
        "column": 12689,
        "nodeType": "Literal",
        "messageId": "uselessEscape",
        "endLine": 2,
        "endColumn": 12691,
        "fix": { "range": [12709, 12711], "text": "\"" },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "regexp/no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\\".",
        "line": 2,
        "column": 12693,
        "nodeType": "Literal",
        "messageId": "unnecessary",
        "endLine": 2,
        "endColumn": 12694,
        "fix": { "range": [12713, 12715], "text": "\"" },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "regexp/strict",
        "severity": 2,
        "message": "Useless identity escapes with non-syntax characters are forbidden.",
        "line": 2,
        "column": 12693,
        "nodeType": "Literal",
        "messageId": "uselessEscape",
        "endLine": 2,
        "endColumn": 12695,
        "fix": { "range": [12713, 12715], "text": "\"" },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "regexp/no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\'.",
        "line": 2,
        "column": 12697,
        "nodeType": "Literal",
        "messageId": "unnecessary",
        "endLine": 2,
        "endColumn": 12698,
        "fix": { "range": [12717, 12719], "text": "'" },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "regexp/strict",
        "severity": 2,
        "message": "Useless identity escapes with non-syntax characters are forbidden.",
        "line": 2,
        "column": 12697,
        "nodeType": "Literal",
        "messageId": "uselessEscape",
        "endLine": 2,
        "endColumn": 12699,
        "fix": { "range": [12717, 12719], "text": "'" },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "regexp/no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\'.",
        "line": 2,
        "column": 12701,
        "nodeType": "Literal",
        "messageId": "unnecessary",
        "endLine": 2,
        "endColumn": 12702,
        "fix": { "range": [12721, 12723], "text": "'" },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "regexp/strict",
        "severity": 2,
        "message": "Useless identity escapes with non-syntax characters are forbidden.",
        "line": 2,
        "column": 12701,
        "nodeType": "Literal",
        "messageId": "uselessEscape",
        "endLine": 2,
        "endColumn": 12703,
        "fix": { "range": [12721, 12723], "text": "'" },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "regexp/no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\'.",
        "line": 2,
        "column": 12705,
        "nodeType": "Literal",
        "messageId": "unnecessary",
        "endLine": 2,
        "endColumn": 12706,
        "fix": { "range": [12725, 12727], "text": "'" },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "regexp/strict",
        "severity": 2,
        "message": "Useless identity escapes with non-syntax characters are forbidden.",
        "line": 2,
        "column": 12705,
        "nodeType": "Literal",
        "messageId": "uselessEscape",
        "endLine": 2,
        "endColumn": 12707,
        "fix": { "range": [12725, 12727], "text": "'" },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "security/detect-unsafe-regex",
        "severity": 1,
        "message": "Unsafe Regular Expression",
        "line": 2,
        "column": 12728,
        "nodeType": "Literal",
        "endLine": 2,
        "endColumn": 12763,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "sonarjs/anchor-precedence",
        "severity": 2,
        "message": "Group parts of the regex together to make the intended operator precedence explicit.",
        "line": 2,
        "column": 12729,
        "nodeType": null,
        "endLine": 2,
        "endColumn": 12761,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "regexp/no-useless-assertions",
        "severity": 2,
        "message": "'^' will always accept because it is never preceded by a character.",
        "line": 2,
        "column": 12730,
        "nodeType": "Literal",
        "messageId": "alwaysAcceptByChar",
        "endLine": 2,
        "endColumn": 12731,
        "suggestions": [
          {
            "messageId": "acceptSuggestion",
            "fix": { "range": [12750, 12751], "text": "" },
            "desc": "Remove the assertion. (Replace with empty string.)"
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "security/detect-unsafe-regex",
        "severity": 1,
        "message": "Unsafe Regular Expression",
        "line": 2,
        "column": 12768,
        "nodeType": "Literal",
        "endLine": 2,
        "endColumn": 12808,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "regexp/no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\'.",
        "line": 2,
        "column": 12835,
        "nodeType": "Literal",
        "messageId": "unnecessary",
        "endLine": 2,
        "endColumn": 12836,
        "fix": { "range": [12855, 12857], "text": "'" },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "regexp/strict",
        "severity": 2,
        "message": "Useless identity escapes with non-syntax characters are forbidden.",
        "line": 2,
        "column": 12835,
        "nodeType": "Literal",
        "messageId": "uselessEscape",
        "endLine": 2,
        "endColumn": 12837,
        "fix": { "range": [12855, 12857], "text": "'" },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "regexp/no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\\".",
        "line": 2,
        "column": 12837,
        "nodeType": "Literal",
        "messageId": "unnecessary",
        "endLine": 2,
        "endColumn": 12838,
        "fix": { "range": [12857, 12859], "text": "\"" },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "regexp/strict",
        "severity": 2,
        "message": "Useless identity escapes with non-syntax characters are forbidden.",
        "line": 2,
        "column": 12837,
        "nodeType": "Literal",
        "messageId": "uselessEscape",
        "endLine": 2,
        "endColumn": 12839,
        "fix": { "range": [12857, 12859], "text": "\"" },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "regexp/no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\'.",
        "line": 2,
        "column": 12849,
        "nodeType": "Literal",
        "messageId": "unnecessary",
        "endLine": 2,
        "endColumn": 12850,
        "fix": { "range": [12869, 12871], "text": "'" },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "regexp/strict",
        "severity": 2,
        "message": "Useless identity escapes with non-syntax characters are forbidden.",
        "line": 2,
        "column": 12849,
        "nodeType": "Literal",
        "messageId": "uselessEscape",
        "endLine": 2,
        "endColumn": 12851,
        "fix": { "range": [12869, 12871], "text": "'" },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "regexp/no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\\".",
        "line": 2,
        "column": 12851,
        "nodeType": "Literal",
        "messageId": "unnecessary",
        "endLine": 2,
        "endColumn": 12852,
        "fix": { "range": [12871, 12873], "text": "\"" },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "regexp/strict",
        "severity": 2,
        "message": "Useless identity escapes with non-syntax characters are forbidden.",
        "line": 2,
        "column": 12851,
        "nodeType": "Literal",
        "messageId": "uselessEscape",
        "endLine": 2,
        "endColumn": 12853,
        "fix": { "range": [12871, 12873], "text": "\"" },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "regexp/no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\/.",
        "line": 2,
        "column": 12855,
        "nodeType": "Literal",
        "messageId": "unnecessary",
        "endLine": 2,
        "endColumn": 12856,
        "fix": { "range": [12875, 12877], "text": "/" },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "regexp/no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\/.",
        "line": 2,
        "column": 12881,
        "nodeType": "Literal",
        "messageId": "unnecessary",
        "endLine": 2,
        "endColumn": 12882,
        "fix": { "range": [12901, 12903], "text": "/" },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "regexp/no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\\".",
        "line": 2,
        "column": 12913,
        "nodeType": "Literal",
        "messageId": "unnecessary",
        "endLine": 2,
        "endColumn": 12914,
        "fix": { "range": [12933, 12935], "text": "\"" },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "regexp/strict",
        "severity": 2,
        "message": "Useless identity escapes with non-syntax characters are forbidden.",
        "line": 2,
        "column": 12913,
        "nodeType": "Literal",
        "messageId": "uselessEscape",
        "endLine": 2,
        "endColumn": 12915,
        "fix": { "range": [12933, 12935], "text": "\"" },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "regexp/no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\\".",
        "line": 2,
        "column": 12918,
        "nodeType": "Literal",
        "messageId": "unnecessary",
        "endLine": 2,
        "endColumn": 12919,
        "fix": { "range": [12938, 12940], "text": "\"" },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "regexp/strict",
        "severity": 2,
        "message": "Useless identity escapes with non-syntax characters are forbidden.",
        "line": 2,
        "column": 12918,
        "nodeType": "Literal",
        "messageId": "uselessEscape",
        "endLine": 2,
        "endColumn": 12920,
        "fix": { "range": [12938, 12940], "text": "\"" },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "regexp/no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\\".",
        "line": 2,
        "column": 12923,
        "nodeType": "Literal",
        "messageId": "unnecessary",
        "endLine": 2,
        "endColumn": 12924,
        "fix": { "range": [12943, 12945], "text": "\"" },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "regexp/strict",
        "severity": 2,
        "message": "Useless identity escapes with non-syntax characters are forbidden.",
        "line": 2,
        "column": 12923,
        "nodeType": "Literal",
        "messageId": "uselessEscape",
        "endLine": 2,
        "endColumn": 12925,
        "fix": { "range": [12943, 12945], "text": "\"" },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "regexp/no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\'.",
        "line": 2,
        "column": 12954,
        "nodeType": "Literal",
        "messageId": "unnecessary",
        "endLine": 2,
        "endColumn": 12955,
        "fix": { "range": [12974, 12976], "text": "'" },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "regexp/strict",
        "severity": 2,
        "message": "Useless identity escapes with non-syntax characters are forbidden.",
        "line": 2,
        "column": 12954,
        "nodeType": "Literal",
        "messageId": "uselessEscape",
        "endLine": 2,
        "endColumn": 12956,
        "fix": { "range": [12974, 12976], "text": "'" },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "regexp/no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\'.",
        "line": 2,
        "column": 12959,
        "nodeType": "Literal",
        "messageId": "unnecessary",
        "endLine": 2,
        "endColumn": 12960,
        "fix": { "range": [12979, 12981], "text": "'" },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "regexp/strict",
        "severity": 2,
        "message": "Useless identity escapes with non-syntax characters are forbidden.",
        "line": 2,
        "column": 12959,
        "nodeType": "Literal",
        "messageId": "uselessEscape",
        "endLine": 2,
        "endColumn": 12961,
        "fix": { "range": [12979, 12981], "text": "'" },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "regexp/no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\'.",
        "line": 2,
        "column": 12964,
        "nodeType": "Literal",
        "messageId": "unnecessary",
        "endLine": 2,
        "endColumn": 12965,
        "fix": { "range": [12984, 12986], "text": "'" },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "regexp/strict",
        "severity": 2,
        "message": "Useless identity escapes with non-syntax characters are forbidden.",
        "line": 2,
        "column": 12964,
        "nodeType": "Literal",
        "messageId": "uselessEscape",
        "endLine": 2,
        "endColumn": 12966,
        "fix": { "range": [12984, 12986], "text": "'" },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "regexp/no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\\".",
        "line": 2,
        "column": 12998,
        "nodeType": "Literal",
        "messageId": "unnecessary",
        "endLine": 2,
        "endColumn": 12999,
        "fix": { "range": [13018, 13020], "text": "\"" },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "regexp/strict",
        "severity": 2,
        "message": "Useless identity escapes with non-syntax characters are forbidden.",
        "line": 2,
        "column": 12998,
        "nodeType": "Literal",
        "messageId": "uselessEscape",
        "endLine": 2,
        "endColumn": 13000,
        "fix": { "range": [13018, 13020], "text": "\"" },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "regexp/no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\'.",
        "line": 2,
        "column": 13000,
        "nodeType": "Literal",
        "messageId": "unnecessary",
        "endLine": 2,
        "endColumn": 13001,
        "fix": { "range": [13020, 13022], "text": "'" },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "regexp/strict",
        "severity": 2,
        "message": "Useless identity escapes with non-syntax characters are forbidden.",
        "line": 2,
        "column": 13000,
        "nodeType": "Literal",
        "messageId": "uselessEscape",
        "endLine": 2,
        "endColumn": 13002,
        "fix": { "range": [13020, 13022], "text": "'" },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "regexp/no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\\".",
        "line": 2,
        "column": 13038,
        "nodeType": "Literal",
        "messageId": "unnecessary",
        "endLine": 2,
        "endColumn": 13039,
        "fix": { "range": [13058, 13060], "text": "\"" },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "regexp/strict",
        "severity": 2,
        "message": "Useless identity escapes with non-syntax characters are forbidden.",
        "line": 2,
        "column": 13038,
        "nodeType": "Literal",
        "messageId": "uselessEscape",
        "endLine": 2,
        "endColumn": 13040,
        "fix": { "range": [13058, 13060], "text": "\"" },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "regexp/no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\\".",
        "line": 2,
        "column": 13043,
        "nodeType": "Literal",
        "messageId": "unnecessary",
        "endLine": 2,
        "endColumn": 13044,
        "fix": { "range": [13063, 13065], "text": "\"" },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "regexp/strict",
        "severity": 2,
        "message": "Useless identity escapes with non-syntax characters are forbidden.",
        "line": 2,
        "column": 13043,
        "nodeType": "Literal",
        "messageId": "uselessEscape",
        "endLine": 2,
        "endColumn": 13045,
        "fix": { "range": [13063, 13065], "text": "\"" },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "regexp/no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\\".",
        "line": 2,
        "column": 13048,
        "nodeType": "Literal",
        "messageId": "unnecessary",
        "endLine": 2,
        "endColumn": 13049,
        "fix": { "range": [13068, 13070], "text": "\"" },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "regexp/strict",
        "severity": 2,
        "message": "Useless identity escapes with non-syntax characters are forbidden.",
        "line": 2,
        "column": 13048,
        "nodeType": "Literal",
        "messageId": "uselessEscape",
        "endLine": 2,
        "endColumn": 13050,
        "fix": { "range": [13068, 13070], "text": "\"" },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "regexp/no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\'.",
        "line": 2,
        "column": 13080,
        "nodeType": "Literal",
        "messageId": "unnecessary",
        "endLine": 2,
        "endColumn": 13081,
        "fix": { "range": [13100, 13102], "text": "'" },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "regexp/strict",
        "severity": 2,
        "message": "Useless identity escapes with non-syntax characters are forbidden.",
        "line": 2,
        "column": 13080,
        "nodeType": "Literal",
        "messageId": "uselessEscape",
        "endLine": 2,
        "endColumn": 13082,
        "fix": { "range": [13100, 13102], "text": "'" },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "regexp/no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\'.",
        "line": 2,
        "column": 13085,
        "nodeType": "Literal",
        "messageId": "unnecessary",
        "endLine": 2,
        "endColumn": 13086,
        "fix": { "range": [13105, 13107], "text": "'" },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "regexp/strict",
        "severity": 2,
        "message": "Useless identity escapes with non-syntax characters are forbidden.",
        "line": 2,
        "column": 13085,
        "nodeType": "Literal",
        "messageId": "uselessEscape",
        "endLine": 2,
        "endColumn": 13087,
        "fix": { "range": [13105, 13107], "text": "'" },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "regexp/no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\'.",
        "line": 2,
        "column": 13090,
        "nodeType": "Literal",
        "messageId": "unnecessary",
        "endLine": 2,
        "endColumn": 13091,
        "fix": { "range": [13110, 13112], "text": "'" },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "regexp/strict",
        "severity": 2,
        "message": "Useless identity escapes with non-syntax characters are forbidden.",
        "line": 2,
        "column": 13090,
        "nodeType": "Literal",
        "messageId": "uselessEscape",
        "endLine": 2,
        "endColumn": 13092,
        "fix": { "range": [13110, 13112], "text": "'" },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "regexp/no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\\".",
        "line": 2,
        "column": 13125,
        "nodeType": "Literal",
        "messageId": "unnecessary",
        "endLine": 2,
        "endColumn": 13126,
        "fix": { "range": [13145, 13147], "text": "\"" },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "regexp/strict",
        "severity": 2,
        "message": "Useless identity escapes with non-syntax characters are forbidden.",
        "line": 2,
        "column": 13125,
        "nodeType": "Literal",
        "messageId": "uselessEscape",
        "endLine": 2,
        "endColumn": 13127,
        "fix": { "range": [13145, 13147], "text": "\"" },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "regexp/no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\'.",
        "line": 2,
        "column": 13127,
        "nodeType": "Literal",
        "messageId": "unnecessary",
        "endLine": 2,
        "endColumn": 13128,
        "fix": { "range": [13147, 13149], "text": "'" },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "regexp/strict",
        "severity": 2,
        "message": "Useless identity escapes with non-syntax characters are forbidden.",
        "line": 2,
        "column": 13127,
        "nodeType": "Literal",
        "messageId": "uselessEscape",
        "endLine": 2,
        "endColumn": 13129,
        "fix": { "range": [13147, 13149], "text": "'" },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-unsanitized/property",
        "severity": 2,
        "message": "Unsafe assignment to innerHTML (Variable 'W' declared as function parameter, which is considered unsafe. 'FunctionDeclaration' at 2:14268)",
        "line": 2,
        "column": 14323,
        "nodeType": "AssignmentExpression",
        "endLine": 2,
        "endColumn": 14336,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "security/detect-object-injection",
        "severity": 1,
        "message": "Generic Object Injection Sink",
        "line": 2,
        "column": 14588,
        "nodeType": "MemberExpression",
        "endLine": 2,
        "endColumn": 14594,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "security/detect-object-injection",
        "severity": 1,
        "message": "Function Call Object Injection Sink",
        "line": 2,
        "column": 14618,
        "nodeType": "MemberExpression",
        "endLine": 2,
        "endColumn": 14627,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "security/detect-object-injection",
        "severity": 1,
        "message": "Generic Object Injection Sink",
        "line": 2,
        "column": 14618,
        "nodeType": "MemberExpression",
        "endLine": 2,
        "endColumn": 14624,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "sonarjs/no-unused-vars",
        "severity": 2,
        "message": "Remove the declaration of the unused 'ae' variable.",
        "line": 2,
        "column": 14757,
        "nodeType": "Identifier",
        "messageId": "unusedVariable",
        "endLine": 2,
        "endColumn": 14759,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "sonarjs/no-dead-store",
        "severity": 2,
        "message": "Remove this useless assignment to variable \"ae\".",
        "line": 2,
        "column": 14757,
        "nodeType": null,
        "messageId": "removeAssignment",
        "endLine": 2,
        "endColumn": 14759,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "sonarjs/cognitive-complexity",
        "severity": 2,
        "message": "Refactor this function to reduce its Cognitive Complexity from 41 to the 15 allowed.",
        "line": 2,
        "column": 14787,
        "nodeType": null,
        "messageId": "refactorFunction",
        "endLine": 2,
        "endColumn": 14788,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "security/detect-object-injection",
        "severity": 1,
        "message": "Variable Assigned to Object Injection Sink",
        "line": 2,
        "column": 14895,
        "nodeType": "MemberExpression",
        "endLine": 2,
        "endColumn": 14899,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "security/detect-unsafe-regex",
        "severity": 1,
        "message": "Unsafe Regular Expression",
        "line": 2,
        "column": 15291,
        "nodeType": "Literal",
        "endLine": 2,
        "endColumn": 15316,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "sonarjs/no-nested-conditional",
        "severity": 2,
        "message": "Extract this nested ternary operation into an independent statement.",
        "line": 2,
        "column": 15324,
        "nodeType": "ConditionalExpression",
        "messageId": "extractTernary",
        "endLine": 2,
        "endColumn": 15355,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "regexp/no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\!.",
        "line": 2,
        "column": 15892,
        "nodeType": "Literal",
        "messageId": "unnecessary",
        "endLine": 2,
        "endColumn": 15893,
        "fix": { "range": [15912, 15914], "text": "!" },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "regexp/strict",
        "severity": 2,
        "message": "Useless identity escapes with non-syntax characters are forbidden.",
        "line": 2,
        "column": 15892,
        "nodeType": "Literal",
        "messageId": "uselessEscape",
        "endLine": 2,
        "endColumn": 15894,
        "fix": { "range": [15912, 15914], "text": "!" },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "regexp/no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\-.",
        "line": 2,
        "column": 15908,
        "nodeType": "Literal",
        "messageId": "unnecessary",
        "endLine": 2,
        "endColumn": 15909,
        "fix": { "range": [15928, 15930], "text": "-" },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "regexp/strict",
        "severity": 2,
        "message": "Useless identity escapes with non-syntax characters are forbidden.",
        "line": 2,
        "column": 15908,
        "nodeType": "Literal",
        "messageId": "uselessEscape",
        "endLine": 2,
        "endColumn": 15910,
        "fix": { "range": [15928, 15930], "text": "-" },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "regexp/no-contradiction-with-assertion",
        "severity": 2,
        "message": "The quantifier '[^>]*' is always entered despite having a minimum of 0. This is because the assertion '\\b' contradicts with the element(s) after the quantifier. Either set the minimum to 1 (+) or change the assertion.",
        "line": 2,
        "column": 16107,
        "nodeType": "Literal",
        "messageId": "alwaysEnterQuantifier",
        "endLine": 2,
        "endColumn": 16112,
        "suggestions": [
          {
            "messageId": "changeQuantifier",
            "data": { "newQuant": "+" },
            "fix": { "range": [16131, 16132], "text": "+" },
            "desc": "Change the quantifier to +."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "regexp/strict",
        "severity": 2,
        "message": "Unescaped source character '{'.",
        "line": 2,
        "column": 16382,
        "nodeType": "Literal",
        "messageId": "unescapedSourceCharacter",
        "endLine": 2,
        "endColumn": 16383,
        "fix": { "range": [16402, 16403], "text": "\\{" },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "regexp/strict",
        "severity": 2,
        "message": "Unescaped source character '{'.",
        "line": 2,
        "column": 16383,
        "nodeType": "Literal",
        "messageId": "unescapedSourceCharacter",
        "endLine": 2,
        "endColumn": 16384,
        "fix": { "range": [16403, 16404], "text": "\\{" },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "regexp/strict",
        "severity": 2,
        "message": "Unescaped source character '}'.",
        "line": 2,
        "column": 16404,
        "nodeType": "Literal",
        "messageId": "unescapedSourceCharacter",
        "endLine": 2,
        "endColumn": 16405,
        "fix": { "range": [16424, 16425], "text": "\\}" },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "regexp/strict",
        "severity": 2,
        "message": "Unescaped source character '}'.",
        "line": 2,
        "column": 16405,
        "nodeType": "Literal",
        "messageId": "unescapedSourceCharacter",
        "endLine": 2,
        "endColumn": 16406,
        "fix": { "range": [16425, 16426], "text": "\\}" },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "regexp/strict",
        "severity": 2,
        "message": "Unescaped source character '{'.",
        "line": 2,
        "column": 16430,
        "nodeType": "Literal",
        "messageId": "unescapedSourceCharacter",
        "endLine": 2,
        "endColumn": 16431,
        "fix": { "range": [16450, 16451], "text": "\\{" },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "regexp/strict",
        "severity": 2,
        "message": "Unescaped source character '{'.",
        "line": 2,
        "column": 16431,
        "nodeType": "Literal",
        "messageId": "unescapedSourceCharacter",
        "endLine": 2,
        "endColumn": 16432,
        "fix": { "range": [16451, 16452], "text": "\\{" },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "regexp/strict",
        "severity": 2,
        "message": "Unescaped source character '}'.",
        "line": 2,
        "column": 16447,
        "nodeType": "Literal",
        "messageId": "unescapedSourceCharacter",
        "endLine": 2,
        "endColumn": 16448,
        "fix": { "range": [16467, 16468], "text": "\\}" },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "regexp/strict",
        "severity": 2,
        "message": "Unescaped source character '}'.",
        "line": 2,
        "column": 16448,
        "nodeType": "Literal",
        "messageId": "unescapedSourceCharacter",
        "endLine": 2,
        "endColumn": 16449,
        "fix": { "range": [16468, 16469], "text": "\\}" },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "regexp/strict",
        "severity": 2,
        "message": "Unescaped source character '{'.",
        "line": 2,
        "column": 16473,
        "nodeType": "Literal",
        "messageId": "unescapedSourceCharacter",
        "endLine": 2,
        "endColumn": 16474,
        "fix": { "range": [16493, 16494], "text": "\\{" },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "regexp/strict",
        "severity": 2,
        "message": "Unescaped source character '{'.",
        "line": 2,
        "column": 16474,
        "nodeType": "Literal",
        "messageId": "unescapedSourceCharacter",
        "endLine": 2,
        "endColumn": 16475,
        "fix": { "range": [16494, 16495], "text": "\\{" },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "regexp/strict",
        "severity": 2,
        "message": "Unescaped source character '{'.",
        "line": 2,
        "column": 16475,
        "nodeType": "Literal",
        "messageId": "unescapedSourceCharacter",
        "endLine": 2,
        "endColumn": 16476,
        "fix": { "range": [16495, 16496], "text": "\\{" },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "regexp/strict",
        "severity": 2,
        "message": "Unescaped source character '}'.",
        "line": 2,
        "column": 16491,
        "nodeType": "Literal",
        "messageId": "unescapedSourceCharacter",
        "endLine": 2,
        "endColumn": 16492,
        "fix": { "range": [16511, 16512], "text": "\\}" },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "regexp/strict",
        "severity": 2,
        "message": "Unescaped source character '}'.",
        "line": 2,
        "column": 16492,
        "nodeType": "Literal",
        "messageId": "unescapedSourceCharacter",
        "endLine": 2,
        "endColumn": 16493,
        "fix": { "range": [16512, 16513], "text": "\\}" },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "regexp/strict",
        "severity": 2,
        "message": "Unescaped source character '}'.",
        "line": 2,
        "column": 16493,
        "nodeType": "Literal",
        "messageId": "unescapedSourceCharacter",
        "endLine": 2,
        "endColumn": 16494,
        "fix": { "range": [16513, 16514], "text": "\\}" },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "regexp/strict",
        "severity": 2,
        "message": "Unescaped source character '{'.",
        "line": 2,
        "column": 16514,
        "nodeType": "Literal",
        "messageId": "unescapedSourceCharacter",
        "endLine": 2,
        "endColumn": 16515,
        "fix": { "range": [16534, 16535], "text": "\\{" },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "regexp/strict",
        "severity": 2,
        "message": "Unescaped source character '{'.",
        "line": 2,
        "column": 16515,
        "nodeType": "Literal",
        "messageId": "unescapedSourceCharacter",
        "endLine": 2,
        "endColumn": 16516,
        "fix": { "range": [16535, 16536], "text": "\\{" },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "regexp/strict",
        "severity": 2,
        "message": "Unescaped source character '}'.",
        "line": 2,
        "column": 16522,
        "nodeType": "Literal",
        "messageId": "unescapedSourceCharacter",
        "endLine": 2,
        "endColumn": 16523,
        "fix": { "range": [16542, 16543], "text": "\\}" },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "regexp/strict",
        "severity": 2,
        "message": "Unescaped source character '}'.",
        "line": 2,
        "column": 16523,
        "nodeType": "Literal",
        "messageId": "unescapedSourceCharacter",
        "endLine": 2,
        "endColumn": 16524,
        "fix": { "range": [16543, 16544], "text": "\\}" },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "security/detect-unsafe-regex",
        "severity": 1,
        "message": "Unsafe Regular Expression",
        "line": 2,
        "column": 16659,
        "nodeType": "Literal",
        "endLine": 2,
        "endColumn": 16711,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "regexp/no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\\".",
        "line": 2,
        "column": 16661,
        "nodeType": "Literal",
        "messageId": "unnecessary",
        "endLine": 2,
        "endColumn": 16662,
        "fix": { "range": [16681, 16683], "text": "\"" },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "regexp/strict",
        "severity": 2,
        "message": "Useless identity escapes with non-syntax characters are forbidden.",
        "line": 2,
        "column": 16661,
        "nodeType": "Literal",
        "messageId": "uselessEscape",
        "endLine": 2,
        "endColumn": 16663,
        "fix": { "range": [16681, 16683], "text": "\"" },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "regexp/no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\\".",
        "line": 2,
        "column": 16676,
        "nodeType": "Literal",
        "messageId": "unnecessary",
        "endLine": 2,
        "endColumn": 16677,
        "fix": { "range": [16696, 16698], "text": "\"" },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "regexp/strict",
        "severity": 2,
        "message": "Useless identity escapes with non-syntax characters are forbidden.",
        "line": 2,
        "column": 16676,
        "nodeType": "Literal",
        "messageId": "uselessEscape",
        "endLine": 2,
        "endColumn": 16678,
        "fix": { "range": [16696, 16698], "text": "\"" },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "regexp/no-dupe-disjunctions",
        "severity": 2,
        "message": "Unexpected overlap. This alternative overlaps with '\\\\(?:\\r\\n?|\\n|\\f)'. The overlap is '\\\\[\\n\\f\\r]'. This ambiguity is likely to cause exponential backtracking.",
        "line": 2,
        "column": 16698,
        "nodeType": "Literal",
        "messageId": "overlap",
        "endLine": 2,
        "endColumn": 16706,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "regexp/no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\\".",
        "line": 2,
        "column": 16708,
        "nodeType": "Literal",
        "messageId": "unnecessary",
        "endLine": 2,
        "endColumn": 16709,
        "fix": { "range": [16728, 16730], "text": "\"" },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "regexp/strict",
        "severity": 2,
        "message": "Useless identity escapes with non-syntax characters are forbidden.",
        "line": 2,
        "column": 16708,
        "nodeType": "Literal",
        "messageId": "uselessEscape",
        "endLine": 2,
        "endColumn": 16710,
        "fix": { "range": [16728, 16730], "text": "\"" },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "security/detect-unsafe-regex",
        "severity": 1,
        "message": "Unsafe Regular Expression",
        "line": 2,
        "column": 16732,
        "nodeType": "Literal",
        "endLine": 2,
        "endColumn": 16784,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "regexp/no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\'.",
        "line": 2,
        "column": 16734,
        "nodeType": "Literal",
        "messageId": "unnecessary",
        "endLine": 2,
        "endColumn": 16735,
        "fix": { "range": [16754, 16756], "text": "'" },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "regexp/strict",
        "severity": 2,
        "message": "Useless identity escapes with non-syntax characters are forbidden.",
        "line": 2,
        "column": 16734,
        "nodeType": "Literal",
        "messageId": "uselessEscape",
        "endLine": 2,
        "endColumn": 16736,
        "fix": { "range": [16754, 16756], "text": "'" },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "regexp/no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\'.",
        "line": 2,
        "column": 16749,
        "nodeType": "Literal",
        "messageId": "unnecessary",
        "endLine": 2,
        "endColumn": 16750,
        "fix": { "range": [16769, 16771], "text": "'" },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "regexp/strict",
        "severity": 2,
        "message": "Useless identity escapes with non-syntax characters are forbidden.",
        "line": 2,
        "column": 16749,
        "nodeType": "Literal",
        "messageId": "uselessEscape",
        "endLine": 2,
        "endColumn": 16751,
        "fix": { "range": [16769, 16771], "text": "'" },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "regexp/no-dupe-disjunctions",
        "severity": 2,
        "message": "Unexpected overlap. This alternative overlaps with '\\\\(?:\\r\\n?|\\n|\\f)'. The overlap is '\\\\[\\n\\f\\r]'. This ambiguity is likely to cause exponential backtracking.",
        "line": 2,
        "column": 16771,
        "nodeType": "Literal",
        "messageId": "overlap",
        "endLine": 2,
        "endColumn": 16779,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "regexp/no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\'.",
        "line": 2,
        "column": 16781,
        "nodeType": "Literal",
        "messageId": "unnecessary",
        "endLine": 2,
        "endColumn": 16782,
        "fix": { "range": [16801, 16803], "text": "'" },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "regexp/strict",
        "severity": 2,
        "message": "Useless identity escapes with non-syntax characters are forbidden.",
        "line": 2,
        "column": 16781,
        "nodeType": "Literal",
        "messageId": "uselessEscape",
        "endLine": 2,
        "endColumn": 16783,
        "fix": { "range": [16801, 16803], "text": "'" },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "regexp/no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\).",
        "line": 2,
        "column": 16817,
        "nodeType": "Literal",
        "messageId": "unnecessary",
        "endLine": 2,
        "endColumn": 16818,
        "fix": { "range": [16837, 16839], "text": ")" },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "regexp/no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\\".",
        "line": 2,
        "column": 16819,
        "nodeType": "Literal",
        "messageId": "unnecessary",
        "endLine": 2,
        "endColumn": 16820,
        "fix": { "range": [16839, 16841], "text": "\"" },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "regexp/strict",
        "severity": 2,
        "message": "Useless identity escapes with non-syntax characters are forbidden.",
        "line": 2,
        "column": 16819,
        "nodeType": "Literal",
        "messageId": "uselessEscape",
        "endLine": 2,
        "endColumn": 16821,
        "fix": { "range": [16839, 16841], "text": "\"" },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "regexp/no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\'.",
        "line": 2,
        "column": 16821,
        "nodeType": "Literal",
        "messageId": "unnecessary",
        "endLine": 2,
        "endColumn": 16822,
        "fix": { "range": [16841, 16843], "text": "'" },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "regexp/strict",
        "severity": 2,
        "message": "Useless identity escapes with non-syntax characters are forbidden.",
        "line": 2,
        "column": 16821,
        "nodeType": "Literal",
        "messageId": "uselessEscape",
        "endLine": 2,
        "endColumn": 16823,
        "fix": { "range": [16841, 16843], "text": "'" },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "regexp/no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\!.",
        "line": 2,
        "column": 16860,
        "nodeType": "Literal",
        "messageId": "unnecessary",
        "endLine": 2,
        "endColumn": 16861,
        "fix": { "range": [16880, 16882], "text": "!" },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "regexp/strict",
        "severity": 2,
        "message": "Useless identity escapes with non-syntax characters are forbidden.",
        "line": 2,
        "column": 16860,
        "nodeType": "Literal",
        "messageId": "uselessEscape",
        "endLine": 2,
        "endColumn": 16862,
        "fix": { "range": [16880, 16882], "text": "!" },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "security/detect-unsafe-regex",
        "severity": 1,
        "message": "Unsafe Regular Expression",
        "line": 2,
        "column": 16947,
        "nodeType": "Literal",
        "endLine": 2,
        "endColumn": 17023,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "sonarjs/slow-regex",
        "severity": 2,
        "message": "Make sure the regex used here, which is vulnerable to super-linear runtime due to backtracking, cannot lead to denial of service.",
        "line": 2,
        "column": 16947,
        "nodeType": "Literal",
        "endLine": 2,
        "endColumn": 17023,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "regexp/no-useless-non-capturing-group",
        "severity": 2,
        "message": "Unexpected unnecessary non-capturing group. This group can be removed without changing the behaviour of the regex.",
        "line": 2,
        "column": 16962,
        "nodeType": "Literal",
        "messageId": "unexpected",
        "endLine": 2,
        "endColumn": 16965,
        "fix": { "range": [16982, 16999], "text": "\\\\[0-9a-f]+ ?" },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "regexp/no-super-linear-backtracking",
        "severity": 2,
        "message": "The quantifier '[0-9a-f]+' can exchange characters with '(?:[_a-z0-9\\-]|\\\\(?:\\\\[0-9a-f]+ ?))*'. Using any string accepted by /[\\dA-F]+/i, this can be exploited to cause at least polynomial backtracking. This might cause exponential backtracking.",
        "line": 2,
        "column": 16967,
        "nodeType": "Literal",
        "messageId": "trade",
        "endLine": 2,
        "endColumn": 17016,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "regexp/no-super-linear-backtracking",
        "severity": 2,
        "message": "The quantifier '[0-9a-f]+' can exchange characters with '(?:[_a-z0-9\\-]|\\\\(?:\\\\[0-9a-f]+ ?))*'. Using any string accepted by /[\\dA-F]+/i, this can be exploited to cause at least polynomial backtracking. This is going to cause exponential backtracking resulting in exponential worst-case runtime behavior.",
        "line": 2,
        "column": 16980,
        "nodeType": "Literal",
        "messageId": "trade",
        "endLine": 2,
        "endColumn": 17016,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "regexp/prefer-w",
        "severity": 2,
        "message": "Unexpected character class ranges '[_a-z0-9]'. Use '\\w' instead.",
        "line": 2,
        "column": 16983,
        "nodeType": "Literal",
        "messageId": "unexpected",
        "endLine": 2,
        "endColumn": 16994,
        "fix": { "range": [17004, 17011], "text": "\\w" },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "regexp/no-useless-non-capturing-group",
        "severity": 2,
        "message": "Unexpected unnecessary non-capturing group. This group can be removed without changing the behaviour of the regex.",
        "line": 2,
        "column": 16997,
        "nodeType": "Literal",
        "messageId": "unexpected",
        "endLine": 2,
        "endColumn": 17000,
        "fix": { "range": [17017, 17034], "text": "\\\\[0-9a-f]+ ?" },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "security/detect-unsafe-regex",
        "severity": 1,
        "message": "Unsafe Regular Expression",
        "line": 2,
        "column": 17040,
        "nodeType": "Literal",
        "endLine": 2,
        "endColumn": 17076,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "regexp/no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\/.",
        "line": 2,
        "column": 17059,
        "nodeType": "Literal",
        "messageId": "unnecessary",
        "endLine": 2,
        "endColumn": 17060,
        "fix": { "range": [17079, 17081], "text": "/" },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "security/detect-unsafe-regex",
        "severity": 1,
        "message": "Unsafe Regular Expression",
        "line": 2,
        "column": 17125,
        "nodeType": "Literal",
        "endLine": 2,
        "endColumn": 17158,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "security/detect-unsafe-regex",
        "severity": 1,
        "message": "Unsafe Regular Expression",
        "line": 2,
        "column": 17175,
        "nodeType": "Literal",
        "endLine": 2,
        "endColumn": 17200,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "security/detect-unsafe-regex",
        "severity": 1,
        "message": "Unsafe Regular Expression",
        "line": 2,
        "column": 17215,
        "nodeType": "Literal",
        "endLine": 2,
        "endColumn": 17282,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "regexp/no-useless-non-capturing-group",
        "severity": 2,
        "message": "Unexpected unnecessary non-capturing group. This group can be removed without changing the behaviour of the regex.",
        "line": 2,
        "column": 17229,
        "nodeType": "Literal",
        "messageId": "unexpected",
        "endLine": 2,
        "endColumn": 17232,
        "fix": { "range": [17249, 17265], "text": "\\\\[\\da-f]+ ?" },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "regexp/prefer-w",
        "severity": 2,
        "message": "Unexpected character class ranges '[_a-z\\d]'. Use '\\w' instead.",
        "line": 2,
        "column": 17249,
        "nodeType": "Literal",
        "messageId": "unexpected",
        "endLine": 2,
        "endColumn": 17259,
        "fix": { "range": [17270, 17276], "text": "\\w" },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "regexp/no-useless-non-capturing-group",
        "severity": 2,
        "message": "Unexpected unnecessary non-capturing group. This group can be removed without changing the behaviour of the regex.",
        "line": 2,
        "column": 17262,
        "nodeType": "Literal",
        "messageId": "unexpected",
        "endLine": 2,
        "endColumn": 17265,
        "fix": { "range": [17282, 17298], "text": "\\\\[\\da-f]+ ?" },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "regexp/no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\'.",
        "line": 2,
        "column": 17311,
        "nodeType": "Literal",
        "messageId": "unnecessary",
        "endLine": 2,
        "endColumn": 17312,
        "fix": { "range": [17331, 17333], "text": "'" },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "regexp/strict",
        "severity": 2,
        "message": "Useless identity escapes with non-syntax characters are forbidden.",
        "line": 2,
        "column": 17311,
        "nodeType": "Literal",
        "messageId": "uselessEscape",
        "endLine": 2,
        "endColumn": 17313,
        "fix": { "range": [17331, 17333], "text": "'" },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "regexp/no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\\".",
        "line": 2,
        "column": 17313,
        "nodeType": "Literal",
        "messageId": "unnecessary",
        "endLine": 2,
        "endColumn": 17314,
        "fix": { "range": [17333, 17335], "text": "\"" },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "regexp/strict",
        "severity": 2,
        "message": "Useless identity escapes with non-syntax characters are forbidden.",
        "line": 2,
        "column": 17313,
        "nodeType": "Literal",
        "messageId": "uselessEscape",
        "endLine": 2,
        "endColumn": 17315,
        "fix": { "range": [17333, 17335], "text": "\"" },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "security/detect-unsafe-regex",
        "severity": 1,
        "message": "Unsafe Regular Expression",
        "line": 2,
        "column": 17394,
        "nodeType": "Literal",
        "endLine": 2,
        "endColumn": 17461,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "regexp/no-useless-non-capturing-group",
        "severity": 2,
        "message": "Unexpected unnecessary non-capturing group. This group can be removed without changing the behaviour of the regex.",
        "line": 2,
        "column": 17408,
        "nodeType": "Literal",
        "messageId": "unexpected",
        "endLine": 2,
        "endColumn": 17411,
        "fix": { "range": [17428, 17444], "text": "\\\\[\\da-f]+ ?" },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "regexp/prefer-w",
        "severity": 2,
        "message": "Unexpected character class ranges '[_a-z\\d]'. Use '\\w' instead.",
        "line": 2,
        "column": 17428,
        "nodeType": "Literal",
        "messageId": "unexpected",
        "endLine": 2,
        "endColumn": 17438,
        "fix": { "range": [17449, 17455], "text": "\\w" },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "regexp/no-useless-non-capturing-group",
        "severity": 2,
        "message": "Unexpected unnecessary non-capturing group. This group can be removed without changing the behaviour of the regex.",
        "line": 2,
        "column": 17441,
        "nodeType": "Literal",
        "messageId": "unexpected",
        "endLine": 2,
        "endColumn": 17444,
        "fix": { "range": [17461, 17477], "text": "\\\\[\\da-f]+ ?" },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "regexp/no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\).",
        "line": 2,
        "column": 17543,
        "nodeType": "Literal",
        "messageId": "unnecessary",
        "endLine": 2,
        "endColumn": 17544,
        "fix": { "range": [17563, 17565], "text": ")" },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "regexp/no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\\".",
        "line": 2,
        "column": 17545,
        "nodeType": "Literal",
        "messageId": "unnecessary",
        "endLine": 2,
        "endColumn": 17546,
        "fix": { "range": [17565, 17567], "text": "\"" },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "regexp/strict",
        "severity": 2,
        "message": "Useless identity escapes with non-syntax characters are forbidden.",
        "line": 2,
        "column": 17545,
        "nodeType": "Literal",
        "messageId": "uselessEscape",
        "endLine": 2,
        "endColumn": 17547,
        "fix": { "range": [17565, 17567], "text": "\"" },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "regexp/no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\'.",
        "line": 2,
        "column": 17547,
        "nodeType": "Literal",
        "messageId": "unnecessary",
        "endLine": 2,
        "endColumn": 17548,
        "fix": { "range": [17567, 17569], "text": "'" },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "regexp/strict",
        "severity": 2,
        "message": "Useless identity escapes with non-syntax characters are forbidden.",
        "line": 2,
        "column": 17547,
        "nodeType": "Literal",
        "messageId": "uselessEscape",
        "endLine": 2,
        "endColumn": 17549,
        "fix": { "range": [17567, 17569], "text": "'" },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      }
    ],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/david/Security-kit/node/coverage/sorter.js",
    "messages": [],
    "suppressedMessages": [
      {
        "ruleId": "security/detect-object-injection",
        "severity": 1,
        "message": "Generic Object Injection Sink",
        "line": 24,
        "column": 16,
        "nodeType": "MemberExpression",
        "endLine": 24,
        "endColumn": 58,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "security/detect-non-literal-regexp",
        "severity": 1,
        "message": "Found non-literal argument to RegExp Constructor",
        "line": 35,
        "column": 27,
        "nodeType": "NewExpression",
        "endLine": 35,
        "endColumn": 55,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "sonarjs/no-ignored-exceptions",
        "severity": 2,
        "message": "Handle this exception or don't catch it at all.",
        "line": 36,
        "column": 11,
        "nodeType": "CatchClause",
        "messageId": "handleException",
        "endLine": 38,
        "endColumn": 10,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "security/detect-object-injection",
        "severity": 1,
        "message": "Variable Assigned to Object Injection Sink",
        "line": 41,
        "column": 25,
        "nodeType": "MemberExpression",
        "endLine": 41,
        "endColumn": 32,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "security/detect-object-injection",
        "severity": 1,
        "message": "Generic Object Injection Sink",
        "line": 75,
        "column": 23,
        "nodeType": "MemberExpression",
        "endLine": 75,
        "endColumn": 34,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-unsanitized/property",
        "severity": 2,
        "message": "Unsafe assignment to innerHTML",
        "line": 84,
        "column": 17,
        "nodeType": "AssignmentExpression",
        "endLine": 85,
        "endColumn": 71,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "security/detect-object-injection",
        "severity": 1,
        "message": "Generic Object Injection Sink",
        "line": 100,
        "column": 23,
        "nodeType": "MemberExpression",
        "endLine": 100,
        "endColumn": 35,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "security/detect-object-injection",
        "severity": 1,
        "message": "Generic Object Injection Sink",
        "line": 101,
        "column": 19,
        "nodeType": "MemberExpression",
        "endLine": 101,
        "endColumn": 26,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "security/detect-object-injection",
        "severity": 1,
        "message": "Generic Object Injection Sink",
        "line": 116,
        "column": 13,
        "nodeType": "MemberExpression",
        "endLine": 116,
        "endColumn": 20,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "security/detect-object-injection",
        "severity": 1,
        "message": "Function Call Object Injection Sink",
        "line": 116,
        "column": 40,
        "nodeType": "MemberExpression",
        "endLine": 116,
        "endColumn": 47,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "security/detect-object-injection",
        "severity": 1,
        "message": "Generic Object Injection Sink",
        "line": 121,
        "column": 19,
        "nodeType": "MemberExpression",
        "endLine": 121,
        "endColumn": 30,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "security/detect-object-injection",
        "severity": 1,
        "message": "Generic Object Injection Sink",
        "line": 123,
        "column": 21,
        "nodeType": "MemberExpression",
        "endLine": 123,
        "endColumn": 32,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "security/detect-object-injection",
        "severity": 1,
        "message": "Generic Object Injection Sink",
        "line": 124,
        "column": 21,
        "nodeType": "MemberExpression",
        "endLine": 124,
        "endColumn": 32,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "sonarjs/no-nested-conditional",
        "severity": 2,
        "message": "Extract this nested ternary operation into an independent statement.",
        "line": 125,
        "column": 37,
        "nodeType": "ConditionalExpression",
        "messageId": "extractTernary",
        "endLine": 125,
        "endColumn": 50,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "security/detect-object-injection",
        "severity": 1,
        "message": "Function Call Object Injection Sink",
        "line": 140,
        "column": 23,
        "nodeType": "MemberExpression",
        "endLine": 140,
        "endColumn": 34,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "security/detect-object-injection",
        "severity": 1,
        "message": "Function Call Object Injection Sink",
        "line": 141,
        "column": 35,
        "nodeType": "MemberExpression",
        "endLine": 141,
        "endColumn": 46,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "security/detect-object-injection",
        "severity": 1,
        "message": "Function Call Object Injection Sink",
        "line": 147,
        "column": 35,
        "nodeType": "MemberExpression",
        "endLine": 147,
        "endColumn": 42,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "security/detect-object-injection",
        "severity": 1,
        "message": "Variable Assigned to Object Injection Sink",
        "line": 169,
        "column": 27,
        "nodeType": "MemberExpression",
        "endLine": 169,
        "endColumn": 34,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "security/detect-object-injection",
        "severity": 1,
        "message": "Generic Object Injection Sink",
        "line": 185,
        "column": 17,
        "nodeType": "MemberExpression",
        "endLine": 185,
        "endColumn": 24,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      }
    ],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/david/Security-kit/server/nonce-store.ts",
    "messages": [],
    "suppressedMessages": [
      {
        "ruleId": "functional/immutable-data",
        "severity": 2,
        "message": "Modifying a map is not allowed.",
        "line": 39,
        "column": 48,
        "nodeType": "CallExpression",
        "messageId": "map",
        "endLine": 39,
        "endColumn": 69,
        "suppressions": [
          {
            "kind": "directive",
            "justification": "Justification: This in-memory nonce store mutates a private Map to track reservation and expiry state. This implementation is for testing (not production), and Map#set/delete mutations are the intended, encapsulated behavior."
          }
        ]
      },
      {
        "ruleId": "functional/immutable-data",
        "severity": 2,
        "message": "Modifying a map is not allowed.",
        "line": 56,
        "column": 5,
        "nodeType": "CallExpression",
        "messageId": "map",
        "endLine": 56,
        "endColumn": 28,
        "suppressions": [
          {
            "kind": "directive",
            "justification": "Justification: This in-memory nonce store mutates a private Map to track reservation and expiry state. This implementation is for testing (not production), and Map#set/delete mutations are the intended, encapsulated behavior."
          }
        ]
      },
      {
        "ruleId": "functional/immutable-data",
        "severity": 2,
        "message": "Modifying a map is not allowed.",
        "line": 67,
        "column": 5,
        "nodeType": "CallExpression",
        "messageId": "map",
        "endLine": 67,
        "endColumn": 26,
        "suppressions": [
          {
            "kind": "directive",
            "justification": "Justification: This in-memory nonce store mutates a private Map to track reservation and expiry state. This implementation is for testing (not production), and Map#set/delete mutations are the intended, encapsulated behavior."
          }
        ]
      },
      {
        "ruleId": "functional/immutable-data",
        "severity": 2,
        "message": "Modifying a map is not allowed.",
        "line": 76,
        "column": 23,
        "nodeType": "CallExpression",
        "messageId": "map",
        "endLine": 76,
        "endColumn": 42,
        "suppressions": [
          {
            "kind": "directive",
            "justification": "Justification: This in-memory nonce store mutates a private Map to track reservation and expiry state. This implementation is for testing (not production), and Map#set/delete mutations are the intended, encapsulated behavior."
          }
        ]
      }
    ],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/david/Security-kit/server/redis-nonce-store.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/david/Security-kit/server/verify-api-request-signature.ts",
    "messages": [
      {
        "ruleId": "sonarjs/cognitive-complexity",
        "severity": 2,
        "message": "Refactor this function to reduce its Cognitive Complexity from 59 to the 18 allowed.",
        "line": 241,
        "column": 10,
        "nodeType": null,
        "messageId": "refactorFunction",
        "endLine": 241,
        "endColumn": 29
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Insert `··`",
        "line": 454,
        "column": 5,
        "nodeType": null,
        "messageId": "insert",
        "endLine": 454,
        "endColumn": 5,
        "fix": { "range": [15702, 15702], "text": "  " }
      },
      {
        "ruleId": "security-node/detect-unhandled-async-errors",
        "severity": 1,
        "message": "Unhandled errors detected in asynchronous function",
        "line": 604,
        "column": 3,
        "nodeType": "FunctionDeclaration",
        "messageId": "msg",
        "endLine": 608,
        "endColumn": 4
      }
    ],
    "suppressedMessages": [
      {
        "ruleId": "functional/immutable-data",
        "severity": 2,
        "message": "Modifying a map is not allowed.",
        "line": 151,
        "column": 48,
        "nodeType": "CallExpression",
        "messageId": "map",
        "endLine": 151,
        "endColumn": 69,
        "suppressions": [
          {
            "kind": "directive",
            "justification": "Justification: In-memory store intentionally mutates a private Map to track nonces and expirations. This non-production helper encapsulates Map#set/delete as part of its contract."
          }
        ]
      },
      {
        "ruleId": "functional/immutable-data",
        "severity": 2,
        "message": "Modifying a map is not allowed.",
        "line": 162,
        "column": 5,
        "nodeType": "CallExpression",
        "messageId": "map",
        "endLine": 162,
        "endColumn": 28,
        "suppressions": [
          {
            "kind": "directive",
            "justification": "Justification: In-memory store intentionally mutates a private Map to track nonces and expirations. This non-production helper encapsulates Map#set/delete as part of its contract."
          }
        ]
      },
      {
        "ruleId": "functional/immutable-data",
        "severity": 2,
        "message": "Modifying a map is not allowed.",
        "line": 179,
        "column": 5,
        "nodeType": "CallExpression",
        "messageId": "map",
        "endLine": 179,
        "endColumn": 28,
        "suppressions": [
          {
            "kind": "directive",
            "justification": "Justification: In-memory store intentionally mutates a private Map to track nonces and expirations. This non-production helper encapsulates Map#set/delete as part of its contract."
          }
        ]
      },
      {
        "ruleId": "functional/immutable-data",
        "severity": 2,
        "message": "Modifying a map is not allowed.",
        "line": 186,
        "column": 5,
        "nodeType": "CallExpression",
        "messageId": "map",
        "endLine": 186,
        "endColumn": 26,
        "suppressions": [
          {
            "kind": "directive",
            "justification": "Justification: In-memory store intentionally mutates a private Map to track nonces and expirations. This non-production helper encapsulates Map#set/delete as part of its contract."
          }
        ]
      },
      {
        "ruleId": "functional/immutable-data",
        "severity": 2,
        "message": "Modifying a map is not allowed.",
        "line": 192,
        "column": 23,
        "nodeType": "CallExpression",
        "messageId": "map",
        "endLine": 192,
        "endColumn": 42,
        "suppressions": [
          {
            "kind": "directive",
            "justification": "Justification: In-memory store intentionally mutates a private Map to track nonces and expirations. This non-production helper encapsulates Map#set/delete as part of its contract."
          }
        ]
      },
      {
        "ruleId": "sonarjs/no-useless-catch",
        "severity": 2,
        "message": "Add logic to this catch clause or eliminate it and rethrow the exception automatically.",
        "line": 455,
        "column": 7,
        "nodeType": null,
        "messageId": "uselessCatch",
        "endLine": 455,
        "endColumn": 12,
        "suppressions": [
          {
            "kind": "directive",
            "justification": "Intentional catch: avoids an upstream plugin crash on empty catch/finally AST shapes while preserving behavior"
          }
        ]
      },
      {
        "ruleId": "functional/no-let",
        "severity": 2,
        "message": "Unexpected let, use const instead.",
        "line": 463,
        "column": 12,
        "nodeType": "VariableDeclaration",
        "messageId": "generic",
        "endLine": 463,
        "endColumn": 21,
        "suppressions": [
          {
            "kind": "directive",
            "justification": "Justification: Local secure wipe of a temporary Uint8Array. This is an isolated, in-place\n         zeroization of transient key material; mutation is intentional and does not escape."
          }
        ]
      },
      {
        "ruleId": "functional/immutable-data",
        "severity": 2,
        "message": "Modifying an existing object/array is not allowed.",
        "line": 463,
        "column": 49,
        "nodeType": "AssignmentExpression",
        "messageId": "generic",
        "endLine": 463,
        "endColumn": 63,
        "suppressions": [
          {
            "kind": "directive",
            "justification": "Justification: Local secure wipe of a temporary Uint8Array. This is an isolated, in-place\n         zeroization of transient key material; mutation is intentional and does not escape."
          }
        ]
      },
      {
        "ruleId": "security/detect-object-injection",
        "severity": 2,
        "message": "Generic Object Injection Sink",
        "line": 463,
        "column": 49,
        "nodeType": "MemberExpression",
        "endLine": 463,
        "endColumn": 59,
        "suppressions": [
          {
            "kind": "directive",
            "justification": "Justification: Local secure wipe of a temporary Uint8Array. This is an isolated, in-place\n         zeroization of transient key material; mutation is intentional and does not escape."
          }
        ]
      }
    ],
    "errorCount": 2,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 1,
    "fixableWarningCount": 0,
    "source": "// SPDX-License-Identifier: MIT\n// SPDX-FileCopyrightText: © 2025 David Osipov\n/**\n * server/verify-api-request-signature.ts\n *\n * Server-side verification for signatures produced by SecureApiSigner.\n *\n * SECURITY CONSTITUTION COMPLIANCE:\n * - Implements positive validation (allowlist) for all inputs per Part II-B rules\n * - Uses timing-safe comparison to prevent timing attacks\n * - Requires explicit nonce store implementation to prevent replay attacks\n * - Validates message structure to prevent HTTP smuggling\n * - Enforces data minimization principles\n *\n * IMPORTANT: The server MUST provide a nonceStore implementing INonceStore\n * for replay protection. The example InMemoryNonceStore is NOT for production.\n */\n\nimport {\n  InvalidParameterError,\n  TimestampError,\n  ReplayAttackError,\n  SignatureVerificationError,\n  InvalidConfigurationError,\n} from \"../src/errors.js\";\nimport { SHARED_ENCODER } from \"../src/encoding.js\";\nimport { safeStableStringify } from \"../src/canonical.js\";\nimport { base64ToBytes, isLikelyBase64 } from \"../src/encoding-utils.js\";\nimport { getHandshakeConfig } from \"../src/config.js\";\nimport { secureCompareBytes } from \"../src/utils.js\";\n\n/** Input shape expected by verification with positive validation */\nexport type VerifyExtendedInput = {\n  readonly secret: ArrayBuffer | Uint8Array | string; // server-side secret (raw or base64)\n  readonly payload: unknown; // same canonicalization as client\n  readonly nonce: string; // base64-encoded nonce from client\n  readonly timestamp: number; // unix timestamp in milliseconds\n  readonly signatureBase64: string; // base64-encoded HMAC signature\n  readonly method?: string; // HTTP method (if binding to request)\n  readonly path?: string; // HTTP path (if binding to request)\n  readonly bodyHash?: string; // SHA-256 base64 hash of request body\n  readonly kid?: string; // key identifier for multi-key scenarios\n};\n\n// Configuration constants\nconst DEFAULT_SKEW_MS = 120_000; // 2 minutes — conservative default\nconst NONCE_TTL_MS = 300_000; // 5 minutes — shorter replay window by default\n\n// Precompiled regex patterns for performance\nconst METHOD_RE = /^[A-Z]+$/;\nconst KID_RE = /^[\\w.-]+$/;\n\n// Security limits\nconst MAX_SIGNATURE_LENGTH = 512;\nconst MAX_PATH_LENGTH = 2048;\nconst MAX_METHOD_LENGTH = 20;\nconst MIN_SECRET_BYTES = 32; // L3 security posture requires >= 32 bytes\nconst MAX_SECRET_BYTES = 4096;\n\n/**\n * Interface for nonce storage backends.\n * SECURITY REQUIREMENT: Implementations MUST be atomic and distributed-safe\n * for production deployments with multiple server instances.\n */\nexport interface INonceStore {\n  /**\n   * Check if a nonce has been used before.\n   *\n   * WARNING: This method alone is NOT safe for distributed systems due to race conditions.\n   * Use in combination with store() OR implement atomic storeIfNotExists().\n   *\n   * @param kid - Key identifier for namespacing\n   * @param nonce - The nonce value to check\n   * @returns Promise resolving to true if nonce exists (already used)\n   */\n  has(kid: string, nonce: string): Promise<boolean>;\n\n  /**\n   * Store a nonce with expiration.\n   *\n   * WARNING: If used after has(), creates a race condition window in distributed systems.\n   * For production, implement atomic storeIfNotExists() instead.\n   *\n   * @param kid - Key identifier for namespacing\n   * @param nonce - The nonce value to store\n   * @param ttlMs - Time-to-live in milliseconds\n   */\n  store(kid: string, nonce: string, ttlMs: number): Promise<void>;\n\n  /**\n   * Atomically store nonce if it does not exist (e.g., Redis SET NX PX).\n   * Returns true if stored (reserved), false if the nonce already exists.\n   *\n   * PRODUCTION RECOMMENDATION: Implement this method for replay-safe verification.\n   *\n   * @param kid - Key identifier for namespacing\n   * @param nonce - The nonce value to store\n   * @param ttlMs - Time-to-live in milliseconds\n   * @returns Promise resolving to true if nonce was stored, false if already exists\n   */\n  storeIfNotExists?(\n    kid: string,\n    nonce: string,\n    ttlMs: number,\n  ): Promise<boolean>;\n\n  /**\n   * Optional: reserve a nonce with a short TTL to mitigate DoS from bogus signatures.\n   * Returns true if reserved, false if already exists.\n   */\n  reserve?(kid: string, nonce: string, reserveTtlMs: number): Promise<boolean>;\n  /**\n   * Optional: finalize a reserved nonce by extending TTL to the full window.\n   */\n  finalize?(kid: string, nonce: string, ttlMs: number): Promise<void>;\n  /**\n   * Optional: delete a reserved nonce (for cleanup on failed verifications).\n   *\n   * @param kid - Key identifier for namespacing\n   * @param nonce - The nonce value to delete\n   */\n  delete?(kid: string, nonce: string): Promise<void>;\n\n  /**\n   * Optional cleanup method for expired entries.\n   * Implementations should call this periodically to prevent unbounded growth.\n   */\n  cleanup?(): Promise<void>;\n}\n\n/**\n * Example (NOT FOR PRODUCTION) in-memory nonce store.\n *\n * ⚠️ PRODUCTION WARNING: This implementation is NOT suitable for production:\n * - Not distributed: works only with single server instance\n * - Not persistent: lost on restart\n * - Not atomic: race conditions possible with high concurrency\n *\n * For production, use Redis, DynamoDB, or another distributed store.\n */\n/* eslint-disable functional/immutable-data -- Justification: In-memory store intentionally mutates a private Map to track nonces and expirations. This non-production helper encapsulates Map#set/delete as part of its contract. */\nexport class InMemoryNonceStore implements INonceStore {\n  #map = new Map<string, number>(); // key = `${kid}:${nonce}`, value = expiry unix ms\n\n  async has(kid: string, nonce: string): Promise<boolean> {\n    this.#validateStoreParams(kid, nonce);\n    const key = `${kid}:${nonce}`;\n    const now = Date.now();\n    const exp = this.#map.get(key);\n    if (typeof exp === \"number\" && exp > now) return true;\n    if (typeof exp === \"number\" && exp <= now) this.#map.delete(key);\n    return false;\n  }\n\n  async store(kid: string, nonce: string, ttlMs: number): Promise<void> {\n    this.#validateStoreParams(kid, nonce);\n    if (typeof ttlMs !== \"number\" || ttlMs < 1 || ttlMs > 86400000) {\n      throw new InvalidParameterError(\"ttlMs must be between 1 and 86400000\");\n    }\n    const key = `${kid}:${nonce}`;\n    const exp = Date.now() + Math.max(0, Math.floor(ttlMs));\n    this.#map.set(key, exp);\n  }\n\n  async storeIfNotExists(\n    kid: string,\n    nonce: string,\n    ttlMs: number,\n  ): Promise<boolean> {\n    this.#validateStoreParams(kid, nonce);\n    if (typeof ttlMs !== \"number\" || ttlMs < 1 || ttlMs > 86400000) {\n      throw new InvalidParameterError(\"ttlMs must be between 1 and 86400000\");\n    }\n    const key = `${kid}:${nonce}`;\n    const now = Date.now();\n    const existing = this.#map.get(key);\n    if (typeof existing === \"number\" && existing > now) return false;\n    const exp = now + Math.max(0, Math.floor(ttlMs));\n    this.#map.set(key, exp);\n    return true;\n  }\n\n  async delete(kid: string, nonce: string): Promise<void> {\n    this.#validateStoreParams(kid, nonce);\n    const key = `${kid}:${nonce}`;\n    this.#map.delete(key);\n  }\n\n  async cleanup(): Promise<void> {\n    const now = Date.now();\n    for (const [k, exp] of this.#map.entries()) {\n      if (exp <= now) this.#map.delete(k);\n    }\n  }\n\n  #validateStoreParams(kid: string, nonce: string): void {\n    if (typeof kid !== \"string\" || kid.length === 0 || kid.length > 128) {\n      throw new InvalidParameterError(\"kid must be a non-empty string\");\n    }\n    if (typeof nonce !== \"string\" || nonce.length === 0) {\n      throw new InvalidParameterError(\"nonce must be a non-empty string\");\n    }\n\n    const cfg = getHandshakeConfig();\n    const maxLen =\n      typeof cfg.handshakeMaxNonceLength === \"number\"\n        ? cfg.handshakeMaxNonceLength\n        : 256;\n    const allowedFormats =\n      Array.isArray(cfg.allowedNonceFormats) &&\n      cfg.allowedNonceFormats.length > 0\n        ? cfg.allowedNonceFormats\n        : [\"base64\", \"base64url\"];\n\n    if (nonce.length > maxLen) {\n      throw new InvalidParameterError(\"nonce must be a non-empty string\");\n    }\n\n    const allowed = (() => {\n      if (\n        (allowedFormats.includes(\"base64\") ||\n          allowedFormats.includes(\"base64url\")) &&\n        isLikelyBase64(nonce)\n      )\n        return true;\n      if (allowedFormats.includes(\"hex\") && /^[0-9a-f]+$/i.test(nonce))\n        return true;\n      return false;\n    })();\n\n    if (!allowed) {\n      throw new InvalidParameterError(\n        \"nonce must be in an allowed encoded format\",\n      );\n    }\n  }\n}\n/* eslint-enable functional/immutable-data */\n\n// Input validation with positive validation (allowlist approach)\nfunction validateVerifyInput(input: VerifyExtendedInput): void {\n  if (!input || typeof input !== \"object\") {\n    throw new InvalidParameterError(\"Invalid input object\");\n  }\n\n  // Secret quick type check (full length validation occurs after normalization)\n  const { secret } = input;\n  if (!secret) {\n    throw new InvalidParameterError(\"Missing secret\");\n  }\n  if (typeof secret === \"string\") {\n    if (secret.length === 0 || secret.length > 1024) {\n      throw new InvalidParameterError(\"Invalid secret length\");\n    }\n  } else if (secret instanceof ArrayBuffer) {\n    if (secret.byteLength === 0 || secret.byteLength > MAX_SECRET_BYTES) {\n      throw new InvalidParameterError(\"Invalid secret buffer length\");\n    }\n  } else if (ArrayBuffer.isView(secret)) {\n    if (secret.length === 0 || secret.length > MAX_SECRET_BYTES) {\n      throw new InvalidParameterError(\"Invalid secret array length\");\n    }\n  } else {\n    throw new InvalidParameterError(\n      \"Secret must be string, ArrayBuffer, or Uint8Array\",\n    );\n  }\n\n  // Nonce validation (config-driven): consult centralized handshake policy\n  if (typeof input.nonce !== \"string\" || input.nonce.length === 0) {\n    throw new InvalidParameterError(\"nonce must be a non-empty string\");\n  }\n  try {\n    const cfg = getHandshakeConfig();\n    const maxLen =\n      typeof cfg.handshakeMaxNonceLength === \"number\"\n        ? cfg.handshakeMaxNonceLength\n        : 256;\n    const allowedFormats =\n      Array.isArray(cfg.allowedNonceFormats) &&\n      cfg.allowedNonceFormats.length > 0\n        ? cfg.allowedNonceFormats\n        : [\"base64\", \"base64url\"];\n\n    if (input.nonce.length > maxLen) {\n      throw new InvalidParameterError(\"nonce too long\");\n    }\n\n    const isAllowed = (() => {\n      if (\n        (allowedFormats.includes(\"base64\") ||\n          allowedFormats.includes(\"base64url\")) &&\n        isLikelyBase64(input.nonce)\n      )\n        return true;\n      if (allowedFormats.includes(\"hex\") && /^[0-9a-f]+$/i.test(input.nonce))\n        return true;\n      return false;\n    })();\n\n    if (!isAllowed) {\n      throw new InvalidParameterError(\"nonce is not in an allowed format\");\n    }\n  } catch (err) {\n    if (err instanceof InvalidParameterError) throw err;\n    throw new InvalidParameterError(\"Invalid nonce\");\n  }\n\n  // Timestamp validation\n  if (typeof input.timestamp !== \"number\") {\n    throw new InvalidParameterError(\"Invalid timestamp\");\n  }\n  if (!Number.isFinite(input.timestamp) || input.timestamp <= 0) {\n    throw new InvalidParameterError(\"timestamp out of reasonable range\");\n  }\n\n  // Payload size limits (prevent DoS with huge payloads)\n  try {\n    if (typeof input.payload === \"string\") {\n      const max = 10 * 1024 * 1024; // 10 MB\n      if (input.payload.length > max) {\n        throw new InvalidParameterError(\"payload too large\");\n      }\n    } else if (input.payload !== undefined && input.payload !== null) {\n      const s = safeStableStringify(input.payload);\n      const max = 10 * 1024 * 1024; // 10 MB\n      if (s.length > max) {\n        throw new InvalidParameterError(\"payload too large\");\n      }\n    }\n  } catch (err) {\n    // Re-throw validation errors\n    if (err instanceof InvalidParameterError) throw err;\n    throw new InvalidParameterError(\"Invalid payload\");\n  }\n\n  // Signature validation (accept base64 or base64url)\n  if (\n    typeof input.signatureBase64 !== \"string\" ||\n    input.signatureBase64.length === 0\n  ) {\n    throw new InvalidParameterError(\n      \"signatureBase64 must be a non-empty string\",\n    );\n  }\n  if (input.signatureBase64.length > MAX_SIGNATURE_LENGTH) {\n    throw new InvalidParameterError(\"Signature too long\");\n  }\n  if (!isLikelyBase64(input.signatureBase64)) {\n    throw new InvalidParameterError(\n      \"signatureBase64 must be base64 or base64url\",\n    );\n  }\n\n  // Optional fields validation (allowlist approach)\n  if (input.method !== undefined) {\n    if (\n      typeof input.method !== \"string\" ||\n      input.method.length > MAX_METHOD_LENGTH\n    ) {\n      throw new InvalidParameterError(\"Invalid method\");\n    }\n    if (!METHOD_RE.test(input.method.toUpperCase())) {\n      throw new InvalidParameterError(\"method must be a valid HTTP method\");\n    }\n  }\n\n  if (input.path !== undefined) {\n    if (typeof input.path !== \"string\" || input.path.length > MAX_PATH_LENGTH) {\n      throw new InvalidParameterError(\"Invalid path\");\n    }\n    if (!input.path.startsWith(\"/\")) {\n      throw new InvalidParameterError(\"path must start with '/'\");\n    }\n    if (input.path.includes(\"..\") || input.path.includes(\"//\")) {\n      throw new InvalidParameterError(\n        \"path traversal patterns are not allowed\",\n      );\n    }\n  }\n\n  if (input.bodyHash !== undefined) {\n    if (typeof input.bodyHash !== \"string\" || input.bodyHash.length > 256) {\n      throw new InvalidParameterError(\"Invalid bodyHash\");\n    }\n    if (input.bodyHash.length > 0 && !isLikelyBase64(input.bodyHash)) {\n      throw new InvalidParameterError(\"bodyHash must be base64 or base64url\");\n    }\n  }\n\n  if (input.kid !== undefined) {\n    if (\n      typeof input.kid !== \"string\" ||\n      input.kid.length === 0 ||\n      input.kid.length > 128\n    ) {\n      throw new InvalidParameterError(\"Invalid kid\");\n    }\n    if (!KID_RE.test(input.kid)) {\n      throw new InvalidParameterError(\"kid contains invalid characters\");\n    }\n  }\n}\n\n// Normalize secret to Uint8Array for HMAC operations\nfunction normalizeSecret(\n  secret: ArrayBuffer | Uint8Array | string,\n): Uint8Array {\n  if (typeof secret === \"string\") {\n    // If it looks like base64, decode; otherwise treat as UTF-8\n    if (isLikelyBase64(secret)) {\n      return base64ToBytes(secret);\n    }\n    return SHARED_ENCODER.encode(secret);\n  }\n  if (secret instanceof ArrayBuffer) {\n    return new Uint8Array(secret);\n  }\n  if (ArrayBuffer.isView(secret)) {\n    return new Uint8Array(secret.buffer, secret.byteOffset, secret.byteLength);\n  }\n  throw new InvalidParameterError(\"Unsupported secret type\");\n}\n\n// Use shared constant-time compare for bytes from core utils.\n// This provides a unified implementation with a minimum timing floor.\n\n// Note: bytesToBase64 helper is provided by src/encoding-utils and imported above.\n\n// Compute HMAC-SHA256 (cross-platform, ESM-safe)\nasync function computeHmacSha256(\n  keyBytes: Uint8Array,\n  messageBytes: Uint8Array,\n): Promise<Uint8Array> {\n  const subtle = (\n    globalThis as unknown as { crypto?: { subtle?: SubtleCrypto } }\n  ).crypto?.subtle;\n  if (subtle) {\n    // Copy into fresh buffers to satisfy typed array semantics\n    const keyCopy = new Uint8Array(keyBytes.length);\n    keyCopy.set(keyBytes);\n    const msgCopy = new Uint8Array(messageBytes.length);\n    msgCopy.set(messageBytes);\n    try {\n      const key = await subtle.importKey(\n        \"raw\",\n        keyCopy,\n        { name: \"HMAC\", hash: { name: \"SHA-256\" } },\n        false,\n        [\"sign\"],\n      );\n      const signature = await subtle.sign(\"HMAC\", key, msgCopy);\n      return new Uint8Array(signature);\n    // eslint-disable-next-line sonarjs/no-useless-catch -- Intentional catch: avoids an upstream plugin crash on empty catch/finally AST shapes while preserving behavior\n    } catch (err) {\n      throw err;\n    } finally {\n      // Best-effort wipe of keyCopy\n      /* eslint-disable functional/no-let, functional/immutable-data, security/detect-object-injection --\n         Justification: Local secure wipe of a temporary Uint8Array. This is an isolated, in-place\n         zeroization of transient key material; mutation is intentional and does not escape.\n      */\n      for (let i = 0; i < keyBytes.length; i++) keyCopy[i] = 0;\n      /* eslint-enable functional/no-let, functional/immutable-data, security/detect-object-injection */\n    }\n  }\n\n  // Node.js fallback (ESM-safe)\n  try {\n    const nodeCrypto = await import(\"node:crypto\");\n    const hmac = nodeCrypto.createHmac(\"sha256\", Buffer.from(keyBytes));\n    hmac.update(Buffer.from(messageBytes));\n    return Uint8Array.from(hmac.digest());\n  } catch {\n    // Older Node alias (in case node:crypto is unavailable)\n    const nodeCrypto = await import(\"crypto\");\n    const nodeCryptoMod = nodeCrypto as unknown as {\n      createHmac(\n        algo: \"sha256\",\n        key: Buffer,\n      ): { update(data: Buffer): void; digest(): Buffer };\n    };\n    const hmac = nodeCryptoMod.createHmac(\"sha256\", Buffer.from(keyBytes));\n    hmac.update(Buffer.from(messageBytes));\n    return Uint8Array.from(hmac.digest());\n  }\n}\n\n/**\n * Verify API request signature using shared canonicalization and atomic nonce operations.\n *\n * SECURITY FEATURES:\n * - Uses shared canonicalization (same as client) to ensure signature consistency\n * - Atomic nonce operations prevent replay attacks in distributed systems\n * - Constant-time byte comparison prevents timing attacks\n * - Comprehensive input validation with positive validation\n *\n * Throws typed errors on any failure:\n * - InvalidParameterError | TimestampError | ReplayAttackError | SignatureVerificationError | InvalidConfigurationError\n *\n * @returns Promise resolving to true if signature is valid (otherwise throws)\n */\nexport async function verifyApiRequestSignature(\n  input: VerifyExtendedInput,\n  nonceStore: INonceStore,\n  options?: { maxSkewMs?: number; nonceTtlMs?: number },\n): Promise<boolean> {\n  // Validate inputs (throws InvalidParameterError on bad inputs)\n  validateVerifyInput(input);\n  if (!nonceStore) {\n    throw new InvalidParameterError(\"nonceStore is required\");\n  }\n\n  const {\n    secret,\n    payload,\n    nonce,\n    timestamp,\n    signatureBase64,\n    kid,\n    method,\n    path,\n    bodyHash,\n  } = input;\n  const maxSkew = options?.maxSkewMs ?? DEFAULT_SKEW_MS;\n  const nonceTtl = options?.nonceTtlMs ?? NONCE_TTL_MS;\n\n  // Time window validation\n  const now = Date.now();\n  const skew = Math.abs(now - timestamp);\n  if (skew > maxSkew) {\n    throw new TimestampError(\"timestamp out of reasonable range\");\n  }\n\n  // Normalize secret and enforce length constraints\n  const keyBytes = normalizeSecret(secret);\n  if (\n    keyBytes.length < MIN_SECRET_BYTES ||\n    keyBytes.length > MAX_SECRET_BYTES\n  ) {\n    throw new InvalidParameterError(\"Secret length is out of bounds\");\n  }\n\n  // Pre-validate nonce store capability without performing any stateful operation.\n  // This surfaces configuration errors deterministically and does not leak signature validity.\n  if (typeof nonceStore.storeIfNotExists !== \"function\") {\n    throw new InvalidConfigurationError(\n      \"NonceStore must implement storeIfNotExists() for atomic replay protection\",\n    );\n  }\n\n  // Shared canonicalization for payload (match client behaviour)\n  const payloadString = safeStableStringify(payload);\n\n  // Build the same canonical string as client\n  const canonicalParts = [\n    String(timestamp),\n    nonce,\n    (method ?? \"\").toUpperCase(),\n    path ?? \"\",\n    bodyHash ?? \"\",\n    payloadString,\n    kid ?? \"\",\n  ];\n  const canonical = canonicalParts.join(\".\");\n  const messageBytes = SHARED_ENCODER.encode(canonical);\n\n  // Compute HMAC and compare in constant time (bytes) BEFORE touching the nonce store\n  const mac = await computeHmacSha256(keyBytes, messageBytes);\n  const sigBytes = base64ToBytes(signatureBase64);\n  const equal = secureCompareBytes(mac, sigBytes);\n  if (!equal) {\n    // Fail closed without interacting with the nonce store\n    throw new SignatureVerificationError(\"Signature mismatch\");\n  }\n\n  // After signature verification succeeds, atomically store the nonce with full TTL\n  const kidForStore = kid ?? \"default\";\n  const stored = await nonceStore.storeIfNotExists(\n    kidForStore,\n    nonce,\n    nonceTtl,\n  );\n  if (!stored) {\n    // Nonce already present indicates replay\n    throw new ReplayAttackError(\"Nonce already used or reserved\");\n  }\n\n  return true;\n}\n\n// Backward compatibility alias\nexport { verifyApiRequestSignature as verifyApiRequestSignatureExtended };\n\n/**\n * Safe wrapper that returns boolean without throwing typed errors.\n * Use this when you do not want verification failure reasons to leak to callers.\n */\nexport async function verifyApiRequestSignatureSafe(\n  input: VerifyExtendedInput,\n  nonceStore: INonceStore,\n  options?: { maxSkewMs?: number; nonceTtlMs?: number },\n): Promise<boolean> {\n  try {\n    return await verifyApiRequestSignature(input, nonceStore, options);\n  } catch {\n    return false;\n  }\n}\n\n/**\n * Production-friendly wrapper that retrieves the secret material via a key provider based on kid.\n * This avoids passing raw secrets per call and supports rotation.\n */\nexport async function verifyApiRequestSignatureWithKeyProvider(\n  input: Omit<VerifyExtendedInput, \"secret\"> & { readonly kid: string },\n  nonceStore: INonceStore,\n  options: { maxSkewMs?: number; nonceTtlMs?: number } & {\n    readonly keyProvider: (kid: string) => Promise<Uint8Array> | Uint8Array;\n  },\n): Promise<boolean> {\n  const keyBytes = await options.keyProvider(input.kid);\n  const extended: VerifyExtendedInput = { ...input, secret: keyBytes };\n  return verifyApiRequestSignature(extended, nonceStore, options);\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/david/Security-kit/src/canonical.ts",
    "messages": [
      {
        "ruleId": "sonarjs/cognitive-complexity",
        "severity": 2,
        "message": "Refactor this function to reduce its Cognitive Complexity from 37 to the 18 allowed.",
        "line": 65,
        "column": 10,
        "nodeType": null,
        "messageId": "refactorFunction",
        "endLine": 65,
        "endColumn": 28
      },
      {
        "ruleId": "functional/immutable-data",
        "severity": 2,
        "message": "Modifying a set is not allowed.",
        "line": 114,
        "column": 32,
        "nodeType": "CallExpression",
        "messageId": "set",
        "endLine": 114,
        "endColumn": 45
      },
      {
        "ruleId": "functional/immutable-data",
        "severity": 2,
        "message": "Modifying a set is not allowed.",
        "line": 116,
        "column": 39,
        "nodeType": "CallExpression",
        "messageId": "set",
        "endLine": 116,
        "endColumn": 52
      },
      {
        "ruleId": "functional/no-let",
        "severity": 2,
        "message": "Unexpected let, use const instead.",
        "line": 120,
        "column": 8,
        "nodeType": "VariableDeclaration",
        "messageId": "generic",
        "endLine": 120,
        "endColumn": 21
      },
      {
        "ruleId": "functional/immutable-data",
        "severity": 2,
        "message": "Modifying a set is not allowed.",
        "line": 121,
        "column": 5,
        "nodeType": "CallExpression",
        "messageId": "set",
        "endLine": 121,
        "endColumn": 36
      },
      {
        "ruleId": "functional/immutable-data",
        "severity": 2,
        "message": "Modifying a set is not allowed.",
        "line": 122,
        "column": 5,
        "nodeType": "CallExpression",
        "messageId": "set",
        "endLine": 122,
        "endColumn": 50
      },
      {
        "ruleId": "functional/no-let",
        "severity": 2,
        "message": "Unexpected let, use const instead.",
        "line": 132,
        "column": 5,
        "nodeType": "VariableDeclaration",
        "messageId": "generic",
        "endLine": 132,
        "endColumn": 52
      },
      {
        "ruleId": "functional/no-let",
        "severity": 2,
        "message": "Unexpected let, use const instead.",
        "line": 139,
        "column": 5,
        "nodeType": "VariableDeclaration",
        "messageId": "generic",
        "endLine": 139,
        "endColumn": 22
      },
      {
        "ruleId": "functional/no-let",
        "severity": 2,
        "message": "Unexpected let, use const instead.",
        "line": 160,
        "column": 5,
        "nodeType": "VariableDeclaration",
        "messageId": "generic",
        "endLine": 160,
        "endColumn": 24
      },
      {
        "ruleId": "functional/immutable-data",
        "severity": 2,
        "message": "Modifying an existing object/array is not allowed.",
        "line": 171,
        "column": 5,
        "nodeType": "AssignmentExpression",
        "messageId": "generic",
        "endLine": 171,
        "endColumn": 22
      },
      {
        "ruleId": "sonarjs/cognitive-complexity",
        "severity": 2,
        "message": "Refactor this function to reduce its Cognitive Complexity from 20 to the 18 allowed.",
        "line": 263,
        "column": 57,
        "nodeType": null,
        "messageId": "refactorFunction",
        "endLine": 263,
        "endColumn": 59
      },
      {
        "ruleId": "unicorn/prevent-abbreviations",
        "severity": 1,
        "message": "Please rename the variable `e`. Suggested names are: `error`, `event`. A more descriptive name will do too.",
        "line": 281,
        "column": 27,
        "nodeType": "Identifier",
        "messageId": "suggestion",
        "endLine": 281,
        "endColumn": 28
      },
      {
        "ruleId": "unicorn/prevent-abbreviations",
        "severity": 1,
        "message": "Please rename the variable `e`. Suggested names are: `error`, `event`. A more descriptive name will do too.",
        "line": 283,
        "column": 14,
        "nodeType": "Identifier",
        "messageId": "suggestion",
        "endLine": 283,
        "endColumn": 15
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-call",
        "severity": 2,
        "message": "Unsafe call of a(n) `error` type typed value.",
        "line": 294,
        "column": 9,
        "nodeType": "MemberExpression",
        "messageId": "unsafeCall",
        "endLine": 294,
        "endColumn": 19
      }
    ],
    "suppressedMessages": [
      {
        "ruleId": "unicorn/no-null",
        "severity": 2,
        "message": "Use `undefined` instead of `null`.",
        "line": 15,
        "column": 30,
        "nodeType": "Literal",
        "messageId": "error",
        "endLine": 15,
        "endColumn": 34,
        "suggestions": [
          {
            "messageId": "remove",
            "fix": { "range": [479, 483], "text": "" },
            "data": {},
            "desc": "Remove `null`."
          },
          {
            "messageId": "replace",
            "fix": { "range": [479, 483], "text": "undefined" },
            "data": {},
            "desc": "Replace `null` with `undefined`."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      }
    ],
    "errorCount": 12,
    "fatalErrorCount": 0,
    "warningCount": 2,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { InvalidParameterError } from \"./errors.js\";\nimport { isForbiddenKey } from \"./constants.js\";\n\n// Sentinel to mark nodes currently under processing in the cache\nconst PROCESSING = Symbol(\"__processing\");\n\n// (internal helpers removed)\n\n/**\n * Handles canonicalization of primitive values.\n */\nfunction canonicalizePrimitive(value: unknown): unknown {\n  if (value === undefined) return undefined;\n  // eslint-disable-next-line unicorn/no-null\n  if (value === null) return null; // preserve null distinctly from undefined\n\n  const t = typeof value;\n  if (t === \"string\" || t === \"boolean\") return value;\n\n  if (t === \"number\") {\n    return Number.isFinite(value as number) ? value : undefined;\n  }\n\n  if (t === \"bigint\") {\n    throw new InvalidParameterError(\n      \"BigInt values are not supported in payload/context.body.\",\n    );\n  }\n\n  if (t === \"symbol\" || t === \"function\") return undefined;\n\n  return value; // fallback for other types\n}\n\n/**\n * Handles canonicalization of arrays with cycle/duplicate tracking.\n */\nfunction canonicalizeArray(\n  value: readonly unknown[],\n  cache: WeakMap<object, unknown>,\n): unknown {\n  const asObject = value as unknown as object;\n  const existing = cache.get(asObject);\n  if (existing === PROCESSING) return { __circular: true };\n  if (existing !== undefined) return existing;\n\n  cache.set(asObject, PROCESSING);\n\n  const result = value.map((element) => {\n    if (element !== null && typeof element === \"object\") {\n      const ex = cache.get(element as object);\n      if (ex === PROCESSING) return { __circular: true };\n      if (ex !== undefined) return ex; // duplicate reference — reuse processed\n    }\n    return toCanonicalValueInternal(element, cache);\n  });\n\n  cache.set(asObject, result);\n  return result;\n}\n\n/**\n * Handles canonicalization of objects with proxy-friendly property discovery.\n */\nfunction canonicalizeObject(\n  value: Record<string, unknown>,\n  cache: WeakMap<object, unknown>,\n): unknown {\n  const existing = cache.get(value as object);\n  if (existing === PROCESSING) return { __circular: true };\n  if (existing !== undefined) return existing;\n\n  cache.set(value as object, PROCESSING);\n\n  // ArrayBuffer at object position → {}\n  try {\n    if (value instanceof ArrayBuffer) {\n      const empty = {} as Record<string, unknown>;\n      cache.set(value as object, empty);\n      return empty;\n    }\n  } catch {\n    /* ignore */\n  }\n\n  // RegExp → {}\n  if (value instanceof RegExp) {\n    const empty = {} as Record<string, unknown>;\n    cache.set(value as object, empty);\n    return empty;\n  }\n\n  // Other exotic objects → {}\n  const tag = Object.prototype.toString.call(value);\n  const exoticTags = new Set([\n    \"[object Promise]\",\n    \"[object WeakMap]\",\n    \"[object WeakSet]\",\n    \"[object Map]\",\n    \"[object Set]\",\n    \"[object URL]\",\n    \"[object URLSearchParams]\",\n    \"[object Error]\",\n  ]);\n  if (exoticTags.has(tag)) {\n    const empty = {} as Record<string, unknown>;\n    cache.set(value as object, empty);\n    return empty;\n  }\n\n  // Discover keys via ownKeys and for..in\n  const keySet = new Set<string>();\n  for (const k of Reflect.ownKeys(value)) {\n    if (typeof k === \"string\") keySet.add(k);\n  }\n  for (const k of Object.keys(value)) keySet.add(k);\n\n  // Conservative probe for proxies: include alphabetic keys 'a'..'z' and 'A'..'Z'\n  const alpha = \"abcdefghijklmnopqrstuvwxyz\";\n  for (let index = 0; index < alpha.length; index++) {\n    keySet.add(alpha.charAt(index));\n    keySet.add(alpha.charAt(index).toUpperCase());\n  }\n\n  const keys = Array.from(keySet).sort((a, b) => a.localeCompare(b));\n\n  const result: Record<string, unknown> = {};\n  for (const k of keys) {\n    if (isForbiddenKey(k)) continue;\n\n    // Prefer data descriptors that are enumerable; fall back to direct access\n    let descriptor: PropertyDescriptor | undefined;\n    try {\n      descriptor = Object.getOwnPropertyDescriptor(value, k) ?? undefined;\n    } catch {\n      descriptor = undefined;\n    }\n\n    let raw: unknown;\n    if (descriptor && descriptor.enumerable && \"value\" in descriptor) {\n      raw = descriptor.value;\n    } else if (!descriptor) {\n      try {\n        raw = (value as Record<string, unknown>)[k];\n      } catch {\n        continue;\n      }\n    } else {\n      // non-enumerable or accessor — ignore\n      continue;\n    }\n\n    if (\n      raw === undefined ||\n      typeof raw === \"function\" ||\n      typeof raw === \"symbol\"\n    )\n      continue;\n\n    let canon: unknown;\n    if (raw !== null && typeof raw === \"object\") {\n      const ex = cache.get(raw as object);\n      if (ex === PROCESSING) canon = { __circular: true };\n      else if (ex !== undefined) canon = { __circular: true };\n      else canon = toCanonicalValueInternal(raw, cache);\n    } else {\n      canon = toCanonicalValueInternal(raw, cache);\n    }\n\n    if (canon === undefined) continue;\n    result[k] = canon;\n  }\n\n  cache.set(value as object, result);\n  return result;\n}\n\n/**\n * Internal canonicalizer with cache-based cycle detection.\n */\nfunction toCanonicalValueInternal(\n  value: unknown,\n  cache: WeakMap<object, unknown>,\n): unknown {\n  // Handle special cases first\n  if (value instanceof Date) return value.toISOString();\n\n  // Convert TypedArray/DataView (that expose a numeric length and indices)\n  // into plain arrays of numbers for nested positions. Top-level handling\n  // is performed in toCanonicalValue.\n  try {\n    if (\n      value !== null &&\n      typeof value === \"object\" &&\n      typeof ArrayBuffer !== \"undefined\" &&\n      ArrayBuffer.isView(value as ArrayBufferView)\n    ) {\n      const length = (value as { readonly length?: number }).length;\n      if (typeof length === \"number\") {\n        return Array.from({ length }, (_unused, index) => {\n          const v = (value as unknown as Record<number, unknown>)[index];\n          return typeof v === \"number\" ? v : 0;\n        });\n      }\n    }\n  } catch {\n    /* ignore and fall through */\n  }\n\n  if (Array.isArray(value)) {\n    return canonicalizeArray(value, cache);\n  }\n\n  if (value !== null && typeof value === \"object\") {\n    return canonicalizeObject(value as Record<string, unknown>, cache);\n  }\n\n  // Handle primitives and other types\n  const primitiveResult = canonicalizePrimitive(value);\n  if (primitiveResult !== undefined) return primitiveResult;\n\n  return undefined;\n}\n\n/**\n * Converts any value to a canonical representation suitable for deterministic JSON serialization.\n */\nexport function toCanonicalValue(value: unknown): unknown {\n  // Special-case top-level TypedArray/ArrayBuffer: treat as exotic host objects\n  // and canonicalize to empty object. Nested TypedArrays are handled in the\n  // internal canonicalizer by converting to arrays of numbers.\n  try {\n    if (value && typeof value === \"object\") {\n      if (typeof ArrayBuffer !== \"undefined\") {\n        if (\n          (\n            ArrayBuffer as unknown as {\n              readonly isView?: (x: unknown) => boolean;\n            }\n          ).isView?.(value)\n        ) {\n          return {};\n        }\n        if (value instanceof ArrayBuffer) return {};\n      }\n    }\n  } catch {\n    /* ignore and fall through */\n  }\n  return toCanonicalValueInternal(value, new WeakMap<object, unknown>());\n}\n\n/**\n * Deterministic JSON serialization with lexicographic key ordering and pruning\n * of null/undefined inside arrays that are values of object properties.\n */\nexport function safeStableStringify(value: unknown): string {\n  const canonical = toCanonicalValue(value);\n  if (canonical === undefined) return \"null\";\n\n  type Pos = \"top\" | \"array\" | \"objectProp\";\n\n  const stringify = (value_: unknown, pos: Pos): string => {\n    if (value_ === null) return \"null\";\n    const t = typeof value_;\n    if (t === \"string\") return JSON.stringify(value_);\n    if (t === \"number\")\n      return Object.is(value_, -0) ? \"-0\" : JSON.stringify(value_);\n    if (t === \"boolean\") return value_ ? \"true\" : \"false\";\n    if (t === \"bigint\") {\n      throw new InvalidParameterError(\n        \"BigInt values are not supported in payload/context.body.\",\n      );\n    }\n    if (value_ === undefined) return \"null\";\n\n    if (Array.isArray(value_)) {\n      const array = value_ as readonly unknown[];\n      const items = (\n        pos === \"objectProp\"\n          ? array.filter((e) => e !== null && e !== undefined)\n          : array\n      ).map((e) => stringify(e, \"array\"));\n      return `[${items.join(\",\")}]`;\n    }\n\n    if (value_ && typeof value_ === \"object\") {\n      const object = value_ as Record<string, unknown>;\n      const keys = Object.keys(object).sort((a, b) => a.localeCompare(b));\n      const parts: readonly string[] = [];\n      for (const k of keys) {\n        const v = object[k];\n        if (v === undefined) continue; // drop undefined properties\n        parts.push(`${JSON.stringify(k)}:${stringify(v, \"objectProp\")}`);\n      }\n      return `{${parts.join(\",\")}}`;\n    }\n\n    return JSON.stringify(value_);\n  };\n\n  return stringify(canonical, \"top\");\n}\n",
    "usedDeprecatedRules": [
      {
        "ruleId": "functional/prefer-readonly-type",
        "replacedBy": [
          "functional/prefer-immutable-types",
          "functional/type-declaration-immutability"
        ]
      }
    ]
  },
  {
    "filePath": "/home/david/Security-kit/src/capabilities.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "functional/prefer-readonly-type",
        "replacedBy": [
          "functional/prefer-immutable-types",
          "functional/type-declaration-immutability"
        ]
      }
    ]
  },
  {
    "filePath": "/home/david/Security-kit/src/config.ts",
    "messages": [],
    "suppressedMessages": [
      {
        "ruleId": "functional/no-let",
        "severity": 2,
        "message": "Unexpected let, use const instead.",
        "line": 61,
        "column": 1,
        "nodeType": "VariableDeclaration",
        "messageId": "generic",
        "endLine": 66,
        "endColumn": 3,
        "suppressions": [
          {
            "kind": "directive",
            "justification": "controlled mutable configuration allowed here"
          }
        ]
      },
      {
        "ruleId": "functional/no-let",
        "severity": 2,
        "message": "Unexpected let, use const instead.",
        "line": 343,
        "column": 1,
        "nodeType": "VariableDeclaration",
        "messageId": "generic",
        "endLine": 536,
        "endColumn": 3,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "functional/no-let",
        "severity": 2,
        "message": "Unexpected let, use const instead.",
        "line": 587,
        "column": 1,
        "nodeType": "VariableDeclaration",
        "messageId": "generic",
        "endLine": 590,
        "endColumn": 3,
        "suppressions": [
          {
            "kind": "directive",
            "justification": "Controlled mutable configuration allowed here for runtime overrides"
          }
        ]
      },
      {
        "ruleId": "functional/no-let",
        "severity": 2,
        "message": "Unexpected let, use const instead.",
        "line": 667,
        "column": 1,
        "nodeType": "VariableDeclaration",
        "messageId": "generic",
        "endLine": 672,
        "endColumn": 3,
        "suppressions": [
          {
            "kind": "directive",
            "justification": "Controlled mutable configuration allowed here"
          }
        ]
      }
    ],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "functional/prefer-readonly-type",
        "replacedBy": [
          "functional/prefer-immutable-types",
          "functional/type-declaration-immutability"
        ]
      }
    ]
  },
  {
    "filePath": "/home/david/Security-kit/src/constants.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "functional/prefer-readonly-type",
        "replacedBy": [
          "functional/prefer-immutable-types",
          "functional/type-declaration-immutability"
        ]
      }
    ]
  },
  {
    "filePath": "/home/david/Security-kit/src/crypto.ts",
    "messages": [],
    "suppressedMessages": [
      {
        "ruleId": "functional/no-let",
        "severity": 2,
        "message": "Unexpected let, use const instead.",
        "line": 385,
        "column": 12,
        "nodeType": "VariableDeclaration",
        "messageId": "generic",
        "endLine": 385,
        "endColumn": 25,
        "suppressions": [
          {
            "kind": "directive",
            "justification": "Controlled local\n    loop counters are necessary here for performance in the rejection-sampling\n    loop."
          }
        ]
      },
      {
        "ruleId": "functional/no-let",
        "severity": 2,
        "message": "Unexpected let, use const instead.",
        "line": 409,
        "column": 12,
        "nodeType": "VariableDeclaration",
        "messageId": "generic",
        "endLine": 409,
        "endColumn": 25,
        "suppressions": [
          {
            "kind": "directive",
            "justification": "Controlled local\n    loop counters are necessary here for performance in the rejection-sampling\n    loop."
          }
        ]
      },
      {
        "ruleId": "functional/prefer-readonly-type",
        "severity": 2,
        "message": "Only readonly arrays allowed.",
        "line": 486,
        "column": 21,
        "nodeType": "TSArrayType",
        "messageId": "array",
        "endLine": 486,
        "endColumn": 29,
        "fix": { "range": [17348, 17348], "text": "readonly " },
        "suppressions": [
          {
            "kind": "directive",
            "justification": "Justified: tight loop uses a small number of controlled local mutations for\n       performance and immediate wiping of random bytes. Scope limited to this\n       function."
          }
        ]
      },
      {
        "ruleId": "functional/no-let",
        "severity": 2,
        "message": "Unexpected let, use const instead.",
        "line": 487,
        "column": 5,
        "nodeType": "VariableDeclaration",
        "messageId": "generic",
        "endLine": 487,
        "endColumn": 17,
        "suppressions": [
          {
            "kind": "directive",
            "justification": "Justified: tight loop uses a small number of controlled local mutations for\n       performance and immediate wiping of random bytes. Scope limited to this\n       function."
          }
        ]
      },
      {
        "ruleId": "functional/no-let",
        "severity": 2,
        "message": "Unexpected let, use const instead.",
        "line": 489,
        "column": 10,
        "nodeType": "VariableDeclaration",
        "messageId": "generic",
        "endLine": 489,
        "endColumn": 22,
        "suppressions": [
          {
            "kind": "directive",
            "justification": "Justified: tight loop uses a small number of controlled local mutations for\n       performance and immediate wiping of random bytes. Scope limited to this\n       function."
          }
        ]
      },
      {
        "ruleId": "functional/no-let",
        "severity": 2,
        "message": "Unexpected let, use const instead.",
        "line": 492,
        "column": 12,
        "nodeType": "VariableDeclaration",
        "messageId": "generic",
        "endLine": 492,
        "endColumn": 25,
        "suppressions": [
          {
            "kind": "directive",
            "justification": "Justified: tight loop uses a small number of controlled local mutations for\n       performance and immediate wiping of random bytes. Scope limited to this\n       function."
          }
        ]
      },
      {
        "ruleId": "functional/immutable-data",
        "severity": 2,
        "message": "Modifying an existing object/array is not allowed.",
        "line": 495,
        "column": 11,
        "nodeType": "AssignmentExpression",
        "messageId": "generic",
        "endLine": 495,
        "endColumn": 58,
        "suppressions": [
          {
            "kind": "directive",
            "justification": "Justified: tight loop uses a small number of controlled local mutations for\n       performance and immediate wiping of random bytes. Scope limited to this\n       function."
          }
        ]
      },
      {
        "ruleId": "functional/prefer-readonly-type",
        "severity": 2,
        "message": "Only readonly arrays allowed.",
        "line": 541,
        "column": 21,
        "nodeType": "TSArrayType",
        "messageId": "array",
        "endLine": 541,
        "endColumn": 29,
        "fix": { "range": [19316, 19316], "text": "readonly " },
        "suppressions": [
          {
            "kind": "directive",
            "justification": "Justified: tight loop uses a small number of controlled local mutations for\n       performance and immediate wiping of random bytes. Scope limited to this\n       function."
          }
        ]
      },
      {
        "ruleId": "functional/no-let",
        "severity": 2,
        "message": "Unexpected let, use const instead.",
        "line": 542,
        "column": 5,
        "nodeType": "VariableDeclaration",
        "messageId": "generic",
        "endLine": 542,
        "endColumn": 17,
        "suppressions": [
          {
            "kind": "directive",
            "justification": "Justified: tight loop uses a small number of controlled local mutations for\n       performance and immediate wiping of random bytes. Scope limited to this\n       function."
          }
        ]
      },
      {
        "ruleId": "functional/no-let",
        "severity": 2,
        "message": "Unexpected let, use const instead.",
        "line": 546,
        "column": 10,
        "nodeType": "VariableDeclaration",
        "messageId": "generic",
        "endLine": 546,
        "endColumn": 22,
        "suppressions": [
          {
            "kind": "directive",
            "justification": "Justified: tight loop uses a small number of controlled local mutations for\n       performance and immediate wiping of random bytes. Scope limited to this\n       function."
          }
        ]
      },
      {
        "ruleId": "functional/no-let",
        "severity": 2,
        "message": "Unexpected let, use const instead.",
        "line": 549,
        "column": 12,
        "nodeType": "VariableDeclaration",
        "messageId": "generic",
        "endLine": 549,
        "endColumn": 25,
        "suppressions": [
          {
            "kind": "directive",
            "justification": "Justified: tight loop uses a small number of controlled local mutations for\n       performance and immediate wiping of random bytes. Scope limited to this\n       function."
          }
        ]
      },
      {
        "ruleId": "functional/immutable-data",
        "severity": 2,
        "message": "Modifying an existing object/array is not allowed.",
        "line": 552,
        "column": 11,
        "nodeType": "AssignmentExpression",
        "messageId": "generic",
        "endLine": 552,
        "endColumn": 58,
        "suppressions": [
          {
            "kind": "directive",
            "justification": "Justified: tight loop uses a small number of controlled local mutations for\n       performance and immediate wiping of random bytes. Scope limited to this\n       function."
          }
        ]
      },
      {
        "ruleId": "functional/immutable-data",
        "severity": 2,
        "message": "Modifying an existing object/array is not allowed.",
        "line": 652,
        "column": 5,
        "nodeType": "AssignmentExpression",
        "messageId": "generic",
        "endLine": 652,
        "endColumn": 52,
        "suppressions": [
          {
            "kind": "directive",
            "justification": "We must mutate the 16-byte\n     UUID buffer to set version/variant bits and then securely wipe it."
          }
        ]
      },
      {
        "ruleId": "functional/immutable-data",
        "severity": 2,
        "message": "Modifying an existing object/array is not allowed.",
        "line": 653,
        "column": 5,
        "nodeType": "AssignmentExpression",
        "messageId": "generic",
        "endLine": 653,
        "endColumn": 52,
        "suppressions": [
          {
            "kind": "directive",
            "justification": "We must mutate the 16-byte\n     UUID buffer to set version/variant bits and then securely wipe it."
          }
        ]
      },
      {
        "ruleId": "functional/prefer-readonly-type",
        "severity": 2,
        "message": "Only readonly arrays allowed.",
        "line": 726,
        "column": 47,
        "nodeType": "TSArrayType",
        "messageId": "array",
        "endLine": 726,
        "endColumn": 57,
        "fix": { "range": [25959, 25959], "text": "readonly " },
        "suppressions": [
          {
            "kind": "directive",
            "justification": "WebCrypto expects a mutable KeyUsage[]; usages is a readonly input so we create a fresh array."
          }
        ]
      },
      {
        "ruleId": "functional/prefer-readonly-type",
        "severity": 2,
        "message": "Only readonly arrays allowed.",
        "line": 739,
        "column": 47,
        "nodeType": "TSArrayType",
        "messageId": "array",
        "endLine": 739,
        "endColumn": 57,
        "fix": { "range": [26449, 26449], "text": "readonly " },
        "suppressions": [
          {
            "kind": "directive",
            "justification": "WebCrypto expects a mutable KeyUsage[]; usages is a readonly input so we create a fresh array."
          }
        ]
      },
      {
        "ruleId": "functional/no-let",
        "severity": 2,
        "message": "Unexpected let, use const instead.",
        "line": 807,
        "column": 3,
        "nodeType": "VariableDeclaration",
        "messageId": "generic",
        "endLine": 807,
        "endColumn": 56,
        "suppressions": [
          {
            "kind": "directive",
            "justification": "controlled mutable locals for wiping"
          }
        ]
      },
      {
        "ruleId": "functional/no-let",
        "severity": 2,
        "message": "Unexpected let, use const instead.",
        "line": 809,
        "column": 3,
        "nodeType": "VariableDeclaration",
        "messageId": "generic",
        "endLine": 809,
        "endColumn": 39,
        "suppressions": [
          {
            "kind": "directive",
            "justification": "controlled mutable locals for wiping"
          }
        ]
      }
    ],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "functional/prefer-readonly-type",
        "replacedBy": [
          "functional/prefer-immutable-types",
          "functional/type-declaration-immutability"
        ]
      }
    ]
  },
  {
    "filePath": "/home/david/Security-kit/src/dev-logger.ts",
    "messages": [
      {
        "ruleId": "unicorn/prevent-abbreviations",
        "severity": 1,
        "message": "The filename `dev-logger.ts` should be named `development-logger.ts`. A more descriptive name will do too.",
        "line": 9,
        "column": 1,
        "nodeType": "Program",
        "messageId": "replace",
        "endLine": 27,
        "endColumn": 1
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "// SPDX-License-Identifier: MIT\n// SPDX-FileCopyrightText: © 2025 David Osipov <personal@david-osipov.vision>\n\n/**\n * Neutral logger facade to break circular dependencies between utils and state.\n * This provides a no-op logger by default, which can be replaced with secureDevLog.\n */\n\nexport type DevelopmentLogger = (\n  level: \"debug\" | \"info\" | \"warn\" | \"error\",\n  component: string,\n  message: string,\n  context?: unknown,\n) => void;\n\n// Default no-op logger to avoid side effects on import\nexport const developmentLog: DevelopmentLogger = () => {};\n\nexport function setDevelopmentLogger(_function_: DevelopmentLogger): void {\n  // This function is kept for API compatibility\n  // Logger initialization is now handled lazily where it's used\n}\n\n// Provide backward compatibility aliases\nexport const developmentLog_ = developmentLog;\nexport const setDevelopmentLogger_ = setDevelopmentLogger;\n",
    "usedDeprecatedRules": [
      {
        "ruleId": "functional/prefer-readonly-type",
        "replacedBy": [
          "functional/prefer-immutable-types",
          "functional/type-declaration-immutability"
        ]
      }
    ]
  },
  {
    "filePath": "/home/david/Security-kit/src/development-guards.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "functional/prefer-readonly-type",
        "replacedBy": [
          "functional/prefer-immutable-types",
          "functional/type-declaration-immutability"
        ]
      }
    ]
  },
  {
    "filePath": "/home/david/Security-kit/src/dom.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unsafe-assignment",
        "severity": 2,
        "message": "Unsafe assignment of an `any` value.",
        "line": 191,
        "column": 9,
        "nodeType": "VariableDeclarator",
        "messageId": "anyAssignment",
        "endLine": 192,
        "endColumn": 75
      },
      {
        "ruleId": "no-unsanitized/method",
        "severity": 2,
        "message": "Unsafe call to import for argument 0 (Variable 's' declared as function parameter, which is considered unsafe. 'ArrowFunctionExpression' at 192:49)",
        "line": 192,
        "column": 65,
        "nodeType": "ImportExpression",
        "endLine": 192,
        "endColumn": 74
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-assignment",
        "severity": 2,
        "message": "Unsafe assignment of an `any` value.",
        "line": 585,
        "column": 13,
        "nodeType": "VariableDeclarator",
        "messageId": "anyAssignment",
        "endLine": 587,
        "endColumn": 35
      },
      {
        "ruleId": "no-unsanitized/method",
        "severity": 2,
        "message": "Unsafe call to import for argument 0 (Variable 's' declared as function parameter, which is considered unsafe. 'ArrowFunctionExpression' at 587:9)",
        "line": 587,
        "column": 25,
        "nodeType": "ImportExpression",
        "endLine": 587,
        "endColumn": 34
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-assignment",
        "severity": 2,
        "message": "Unsafe assignment of an `any` value.",
        "line": 588,
        "column": 13,
        "nodeType": "VariableDeclarator",
        "messageId": "anyAssignment",
        "endLine": 592,
        "endColumn": 8
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-assignment",
        "severity": 2,
        "message": "Unsafe assignment of an `any` value.",
        "line": 752,
        "column": 15,
        "nodeType": "VariableDeclarator",
        "messageId": "anyAssignment",
        "endLine": 754,
        "endColumn": 37
      },
      {
        "ruleId": "no-unsanitized/method",
        "severity": 2,
        "message": "Unsafe call to import for argument 0 (Variable 's' declared as function parameter, which is considered unsafe. 'ArrowFunctionExpression' at 754:11)",
        "line": 754,
        "column": 27,
        "nodeType": "ImportExpression",
        "endLine": 754,
        "endColumn": 36
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-assignment",
        "severity": 2,
        "message": "Unsafe assignment of an `any` value.",
        "line": 755,
        "column": 15,
        "nodeType": "VariableDeclarator",
        "messageId": "anyAssignment",
        "endLine": 759,
        "endColumn": 10
      }
    ],
    "suppressedMessages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 39,
        "column": 25,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 39,
        "endColumn": 28,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1895, 1898], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1895, 1898], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-member-access",
        "severity": 2,
        "message": "Unsafe member access .document on an `any` value.",
        "line": 39,
        "column": 30,
        "nodeType": "Identifier",
        "messageId": "unsafeMemberExpression",
        "endLine": 39,
        "endColumn": 38,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 40,
        "column": 25,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 40,
        "endColumn": 28,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1952, 1955], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1952, 1955], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-member-access",
        "severity": 2,
        "message": "Unsafe member access .Element on an `any` value.",
        "line": 40,
        "column": 30,
        "nodeType": "Identifier",
        "messageId": "unsafeMemberExpression",
        "endLine": 40,
        "endColumn": 37,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 41,
        "column": 25,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 41,
        "endColumn": 28,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [2008, 2011], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [2008, 2011], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-member-access",
        "severity": 2,
        "message": "Unsafe member access .Node on an `any` value.",
        "line": 41,
        "column": 30,
        "nodeType": "Identifier",
        "messageId": "unsafeMemberExpression",
        "endLine": 41,
        "endColumn": 34,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "functional/prefer-readonly-type",
        "severity": 2,
        "message": "Only readonly types allowed.",
        "line": 87,
        "column": 33,
        "nodeType": "TSTypeReference",
        "messageId": "type",
        "endLine": 87,
        "endColumn": 65,
        "fix": { "range": [3617, 3620], "text": "ReadonlyMap" },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 191,
        "column": 45,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 191,
        "endColumn": 48,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [7278, 7281], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [7278, 7281], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 192,
        "column": 19,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 192,
        "endColumn": 22,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [7303, 7306], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [7303, 7306], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-member-access",
        "severity": 2,
        "message": "Unsafe member access .__test_importOverride on an `any` value.",
        "line": 192,
        "column": 24,
        "nodeType": "Identifier",
        "messageId": "unsafeMemberExpression",
        "endLine": 192,
        "endColumn": 45,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "functional/no-let",
        "severity": 2,
        "message": "Unexpected let, use const instead.",
        "line": 196,
        "column": 5,
        "nodeType": "VariableDeclaration",
        "messageId": "generic",
        "endLine": 196,
        "endColumn": 38,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "functional/no-let",
        "severity": 2,
        "message": "Unexpected let, use const instead.",
        "line": 197,
        "column": 5,
        "nodeType": "VariableDeclaration",
        "messageId": "generic",
        "endLine": 197,
        "endColumn": 36,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "functional/prefer-readonly-type",
        "severity": 2,
        "message": "A readonly modifier is required.",
        "line": 199,
        "column": 44,
        "nodeType": "TSPropertySignature",
        "messageId": "property",
        "endLine": 199,
        "endColumn": 60,
        "fix": { "range": [7654, 7654], "text": "readonly " },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 200,
        "column": 43,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 200,
        "endColumn": 46,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [7716, 7719], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [7716, 7719], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-member-access",
        "severity": 2,
        "message": "Unsafe member access .subtle on an `any` value.",
        "line": 200,
        "column": 48,
        "nodeType": "Identifier",
        "messageId": "unsafeMemberExpression",
        "endLine": 200,
        "endColumn": 54,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 207,
        "column": 37,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 207,
        "endColumn": 40,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [7946, 7949], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [7946, 7949], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-member-access",
        "severity": 2,
        "message": "Unsafe member access .subtle on an `any` value.",
        "line": 207,
        "column": 42,
        "nodeType": "Identifier",
        "messageId": "unsafeMemberExpression",
        "endLine": 207,
        "endColumn": 48,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "functional/prefer-readonly-type",
        "severity": 2,
        "message": "Only readonly arrays allowed.",
        "line": 288,
        "column": 49,
        "nodeType": "TSArrayType",
        "messageId": "array",
        "endLine": 288,
        "endColumn": 58,
        "fix": { "range": [10260, 10260], "text": "readonly " },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "functional/prefer-readonly-type",
        "severity": 2,
        "message": "Only readonly arrays allowed.",
        "line": 290,
        "column": 45,
        "nodeType": "TSArrayType",
        "messageId": "array",
        "endLine": 290,
        "endColumn": 54,
        "fix": { "range": [10380, 10380], "text": "readonly " },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "functional/prefer-readonly-type",
        "severity": 2,
        "message": "Only readonly arrays allowed.",
        "line": 320,
        "column": 54,
        "nodeType": "TSArrayType",
        "messageId": "array",
        "endLine": 320,
        "endColumn": 63,
        "fix": { "range": [11304, 11304], "text": "readonly " },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "sonarjs/cognitive-complexity",
        "severity": 2,
        "message": "Refactor this function to reduce its Cognitive Complexity from 38 to the 18 allowed.",
        "line": 382,
        "column": 10,
        "nodeType": null,
        "messageId": "refactorFunction",
        "endLine": 382,
        "endColumn": 32,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "functional/prefer-readonly-type",
        "severity": 2,
        "message": "Only readonly arrays allowed.",
        "line": 383,
        "column": 14,
        "nodeType": "TSArrayType",
        "messageId": "array",
        "endLine": 383,
        "endColumn": 22,
        "fix": { "range": [13238, 13238], "text": "readonly " },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "functional/no-let",
        "severity": 2,
        "message": "Unexpected let, use const instead.",
        "line": 384,
        "column": 3,
        "nodeType": "VariableDeclaration",
        "messageId": "generic",
        "endLine": 384,
        "endColumn": 17,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "functional/no-let",
        "severity": 2,
        "message": "Unexpected let, use const instead.",
        "line": 389,
        "column": 7,
        "nodeType": "VariableDeclaration",
        "messageId": "generic",
        "endLine": 389,
        "endColumn": 30,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "functional/no-let",
        "severity": 2,
        "message": "Unexpected let, use const instead.",
        "line": 395,
        "column": 9,
        "nodeType": "VariableDeclaration",
        "messageId": "generic",
        "endLine": 395,
        "endColumn": 28,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "functional/immutable-data",
        "severity": 2,
        "message": "Modifying an array is not allowed.",
        "line": 404,
        "column": 11,
        "nodeType": "CallExpression",
        "messageId": "array",
        "endLine": 404,
        "endColumn": 46,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "functional/immutable-data",
        "severity": 2,
        "message": "Modifying an array is not allowed.",
        "line": 405,
        "column": 11,
        "nodeType": "CallExpression",
        "messageId": "array",
        "endLine": 405,
        "endColumn": 67,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "functional/immutable-data",
        "severity": 2,
        "message": "Modifying an array is not allowed.",
        "line": 406,
        "column": 11,
        "nodeType": "CallExpression",
        "messageId": "array",
        "endLine": 406,
        "endColumn": 35,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "functional/immutable-data",
        "severity": 2,
        "message": "Modifying an array is not allowed.",
        "line": 412,
        "column": 9,
        "nodeType": "CallExpression",
        "messageId": "array",
        "endLine": 412,
        "endColumn": 44,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "functional/immutable-data",
        "severity": 2,
        "message": "Modifying an array is not allowed.",
        "line": 413,
        "column": 9,
        "nodeType": "CallExpression",
        "messageId": "array",
        "endLine": 413,
        "endColumn": 65,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "functional/immutable-data",
        "severity": 2,
        "message": "Modifying an array is not allowed.",
        "line": 414,
        "column": 9,
        "nodeType": "CallExpression",
        "messageId": "array",
        "endLine": 414,
        "endColumn": 33,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "functional/immutable-data",
        "severity": 2,
        "message": "Modifying an array is not allowed.",
        "line": 419,
        "column": 5,
        "nodeType": "CallExpression",
        "messageId": "array",
        "endLine": 419,
        "endColumn": 25,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "functional/no-let",
        "severity": 2,
        "message": "Unexpected let, use const instead.",
        "line": 427,
        "column": 3,
        "nodeType": "VariableDeclaration",
        "messageId": "generic",
        "endLine": 427,
        "endColumn": 16,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "functional/no-let",
        "severity": 2,
        "message": "Unexpected let, use const instead.",
        "line": 428,
        "column": 3,
        "nodeType": "VariableDeclaration",
        "messageId": "generic",
        "endLine": 428,
        "endColumn": 17,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "sonarjs/cognitive-complexity",
        "severity": 2,
        "message": "Refactor this function to reduce its Cognitive Complexity from 28 to the 18 allowed.",
        "line": 459,
        "column": 10,
        "nodeType": null,
        "messageId": "refactorFunction",
        "endLine": 459,
        "endColumn": 34,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "functional/prefer-readonly-type",
        "severity": 2,
        "message": "Only readonly arrays allowed.",
        "line": 459,
        "column": 47,
        "nodeType": "TSArrayType",
        "messageId": "array",
        "endLine": 459,
        "endColumn": 55,
        "fix": { "range": [15516, 15516], "text": "readonly " },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "functional/prefer-readonly-type",
        "severity": 2,
        "message": "Only readonly arrays allowed.",
        "line": 460,
        "column": 16,
        "nodeType": "TSArrayType",
        "messageId": "array",
        "endLine": 460,
        "endColumn": 24,
        "fix": { "range": [15542, 15542], "text": "readonly " },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "functional/no-let",
        "severity": 2,
        "message": "Unexpected let, use const instead.",
        "line": 461,
        "column": 3,
        "nodeType": "VariableDeclaration",
        "messageId": "generic",
        "endLine": 461,
        "endColumn": 17,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "functional/no-let",
        "severity": 2,
        "message": "Unexpected let, use const instead.",
        "line": 467,
        "column": 7,
        "nodeType": "VariableDeclaration",
        "messageId": "generic",
        "endLine": 467,
        "endColumn": 51,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "functional/immutable-data",
        "severity": 2,
        "message": "Modifying an array is not allowed.",
        "line": 494,
        "column": 7,
        "nodeType": "CallExpression",
        "messageId": "array",
        "endLine": 494,
        "endColumn": 40,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "functional/prefer-readonly-type",
        "severity": 2,
        "message": "Only readonly types allowed.",
        "line": 504,
        "column": 18,
        "nodeType": "TSTypeReference",
        "messageId": "type",
        "endLine": 504,
        "endColumn": 50,
        "fix": { "range": [16571, 16574], "text": "ReadonlyMap" },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "functional/prefer-readonly-type",
        "severity": 2,
        "message": "A readonly modifier is required.",
        "line": 517,
        "column": 3,
        "nodeType": "PropertyDefinition",
        "messageId": "property",
        "endLine": 517,
        "endColumn": 35,
        "fix": { "range": [17066, 17066], "text": "readonly " },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "functional/prefer-readonly-type",
        "severity": 2,
        "message": "A readonly modifier is required.",
        "line": 520,
        "column": 3,
        "nodeType": "PropertyDefinition",
        "messageId": "property",
        "endLine": 520,
        "endColumn": 26,
        "fix": { "range": [17136, 17136], "text": "readonly " },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "functional/prefer-readonly-type",
        "severity": 2,
        "message": "A readonly modifier is required.",
        "line": 521,
        "column": 3,
        "nodeType": "PropertyDefinition",
        "messageId": "property",
        "endLine": 521,
        "endColumn": 28,
        "fix": { "range": [17162, 17162], "text": "readonly " },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "sonarjs/no-async-constructor",
        "severity": 2,
        "message": "Refactor this asynchronous operation outside of the constructor.",
        "line": 551,
        "column": 7,
        "nodeType": "ExpressionStatement",
        "messageId": "noAsyncConstructor",
        "endLine": 551,
        "endColumn": 36,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 585,
        "column": 49,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 585,
        "endColumn": 52,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [19763, 19766], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [19763, 19766], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 586,
        "column": 26,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 586,
        "endColumn": 29,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [19795, 19798], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [19795, 19798], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-member-access",
        "severity": 2,
        "message": "Unsafe member access .__test_importOverride on an `any` value.",
        "line": 586,
        "column": 31,
        "nodeType": "Identifier",
        "messageId": "unsafeMemberExpression",
        "endLine": 586,
        "endColumn": 52,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 594,
        "column": 40,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 594,
        "endColumn": 43,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [20114, 20117], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [20114, 20117], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-member-access",
        "severity": 2,
        "message": "Unsafe member access .default on an `any` value.",
        "line": 594,
        "column": 45,
        "nodeType": "Identifier",
        "messageId": "unsafeMemberExpression",
        "endLine": 594,
        "endColumn": 52,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-call",
        "severity": 2,
        "message": "Unsafe construction of a(n) `any` typed value.",
        "line": 598,
        "column": 31,
        "nodeType": "NewExpression",
        "messageId": "unsafeNew",
        "endLine": 598,
        "endColumn": 62,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 598,
        "column": 43,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 598,
        "endColumn": 46,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [20374, 20377], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [20374, 20377], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 601,
        "column": 27,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 601,
        "endColumn": 30,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [20452, 20455], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [20452, 20455], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-member-access",
        "severity": 2,
        "message": "Unsafe member access .get on an `any` value.",
        "line": 601,
        "column": 32,
        "nodeType": "Identifier",
        "messageId": "unsafeMemberExpression",
        "endLine": 601,
        "endColumn": 35,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 602,
        "column": 27,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 602,
        "endColumn": 30,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [20505, 20508], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [20505, 20508], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-member-access",
        "severity": 2,
        "message": "Unsafe member access .set on an `any` value.",
        "line": 602,
        "column": 32,
        "nodeType": "Identifier",
        "messageId": "unsafeMemberExpression",
        "endLine": 602,
        "endColumn": 35,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "functional/immutable-data",
        "severity": 2,
        "message": "Modifying an existing object/array is not allowed.",
        "line": 604,
        "column": 11,
        "nodeType": "AssignmentExpression",
        "messageId": "generic",
        "endLine": 604,
        "endColumn": 66,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "functional/immutable-data",
        "severity": 2,
        "message": "Modifying a set is not allowed.",
        "line": 634,
        "column": 7,
        "nodeType": "CallExpression",
        "messageId": "set",
        "endLine": 634,
        "endColumn": 36,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "functional/immutable-data",
        "severity": 2,
        "message": "Modifying a set is not allowed.",
        "line": 638,
        "column": 7,
        "nodeType": "CallExpression",
        "messageId": "set",
        "endLine": 638,
        "endColumn": 52,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "functional/immutable-data",
        "severity": 2,
        "message": "Modifying an existing object/array is not allowed.",
        "line": 670,
        "column": 5,
        "nodeType": "AssignmentExpression",
        "messageId": "generic",
        "endLine": 672,
        "endColumn": 47,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "functional/immutable-data",
        "severity": 2,
        "message": "Modifying a map is not allowed.",
        "line": 709,
        "column": 9,
        "nodeType": "CallExpression",
        "messageId": "map",
        "endLine": 709,
        "endColumn": 39,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "functional/immutable-data",
        "severity": 2,
        "message": "Modifying a map is not allowed.",
        "line": 715,
        "column": 9,
        "nodeType": "CallExpression",
        "messageId": "map",
        "endLine": 715,
        "endColumn": 41,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "functional/immutable-data",
        "severity": 2,
        "message": "Modifying an existing object/array is not allowed.",
        "line": 718,
        "column": 5,
        "nodeType": "AssignmentExpression",
        "messageId": "generic",
        "endLine": 718,
        "endColumn": 39,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "functional/no-let",
        "severity": 2,
        "message": "Unexpected let, use const instead.",
        "line": 724,
        "column": 5,
        "nodeType": "VariableDeclaration",
        "messageId": "generic",
        "endLine": 724,
        "endColumn": 19,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "functional/no-let",
        "severity": 2,
        "message": "Unexpected let, use const instead.",
        "line": 725,
        "column": 10,
        "nodeType": "VariableDeclaration",
        "messageId": "generic",
        "endLine": 725,
        "endColumn": 23,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 752,
        "column": 51,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 752,
        "endColumn": 54,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [25649, 25652], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [25649, 25652], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 753,
        "column": 28,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 753,
        "endColumn": 31,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [25683, 25686], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [25683, 25686], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-member-access",
        "severity": 2,
        "message": "Unsafe member access .__test_importOverride on an `any` value.",
        "line": 753,
        "column": 33,
        "nodeType": "Identifier",
        "messageId": "unsafeMemberExpression",
        "endLine": 753,
        "endColumn": 54,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 763,
        "column": 23,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 763,
        "endColumn": 26,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [26109, 26112], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [26109, 26112], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-member-access",
        "severity": 2,
        "message": "Unsafe member access .parse on an `any` value.",
        "line": 763,
        "column": 28,
        "nodeType": "Identifier",
        "messageId": "unsafeMemberExpression",
        "endLine": 763,
        "endColumn": 33,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 763,
        "column": 49,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 763,
        "endColumn": 52,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [26135, 26138], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [26135, 26138], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-member-access",
        "severity": 2,
        "message": "Unsafe member access .default on an `any` value.",
        "line": 763,
        "column": 54,
        "nodeType": "Identifier",
        "messageId": "unsafeMemberExpression",
        "endLine": 763,
        "endColumn": 61,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "functional/immutable-data",
        "severity": 2,
        "message": "Modifying an existing object/array is not allowed.",
        "line": 798,
        "column": 7,
        "nodeType": "AssignmentExpression",
        "messageId": "generic",
        "endLine": 798,
        "endColumn": 29,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "functional/immutable-data",
        "severity": 2,
        "message": "Modifying an existing object/array is not allowed.",
        "line": 799,
        "column": 7,
        "nodeType": "AssignmentExpression",
        "messageId": "generic",
        "endLine": 799,
        "endColumn": 34,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "functional/immutable-data",
        "severity": 2,
        "message": "Modifying an existing object/array is not allowed.",
        "line": 801,
        "column": 5,
        "nodeType": "UpdateExpression",
        "messageId": "generic",
        "endLine": 801,
        "endColumn": 30,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "functional/no-let",
        "severity": 2,
        "message": "Unexpected let, use const instead.",
        "line": 853,
        "column": 7,
        "nodeType": "VariableDeclaration",
        "messageId": "generic",
        "endLine": 853,
        "endColumn": 22,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "functional/no-let",
        "severity": 2,
        "message": "Unexpected let, use const instead.",
        "line": 854,
        "column": 7,
        "nodeType": "VariableDeclaration",
        "messageId": "generic",
        "endLine": 854,
        "endColumn": 21,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "functional/no-let",
        "severity": 2,
        "message": "Unexpected let, use const instead.",
        "line": 858,
        "column": 9,
        "nodeType": "VariableDeclaration",
        "messageId": "generic",
        "endLine": 858,
        "endColumn": 28,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "functional/immutable-data",
        "severity": 2,
        "message": "Modifying a map is not allowed.",
        "line": 1030,
        "column": 13,
        "nodeType": "CallExpression",
        "messageId": "map",
        "endLine": 1030,
        "endColumn": 72,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "functional/immutable-data",
        "severity": 2,
        "message": "Modifying a map is not allowed.",
        "line": 1041,
        "column": 13,
        "nodeType": "CallExpression",
        "messageId": "map",
        "endLine": 1041,
        "endColumn": 41,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "functional/immutable-data",
        "severity": 2,
        "message": "Modifying an existing object/array is not allowed.",
        "line": 1046,
        "column": 7,
        "nodeType": "AssignmentExpression",
        "messageId": "generic",
        "endLine": 1046,
        "endColumn": 51,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "functional/prefer-readonly-type",
        "severity": 2,
        "message": "Only readonly arrays allowed.",
        "line": 1053,
        "column": 21,
        "nodeType": "TSArrayType",
        "messageId": "array",
        "endLine": 1053,
        "endColumn": 30,
        "fix": { "range": [35793, 35793], "text": "readonly " },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "functional/immutable-data",
        "severity": 2,
        "message": "Modifying an array is not allowed.",
        "line": 1061,
        "column": 11,
        "nodeType": "CallExpression",
        "messageId": "array",
        "endLine": 1061,
        "endColumn": 53,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "functional/prefer-readonly-type",
        "severity": 2,
        "message": "Only readonly arrays allowed.",
        "line": 1248,
        "column": 7,
        "nodeType": "TSArrayType",
        "messageId": "array",
        "endLine": 1248,
        "endColumn": 15,
        "fix": { "range": [42747, 42747], "text": "readonly " },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "functional/prefer-readonly-type",
        "severity": 2,
        "message": "Only readonly arrays allowed.",
        "line": 1253,
        "column": 7,
        "nodeType": "TSArrayType",
        "messageId": "array",
        "endLine": 1253,
        "endColumn": 15,
        "fix": { "range": [42902, 42902], "text": "readonly " },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "functional/immutable-data",
        "severity": 2,
        "message": "Modifying a set is not allowed.",
        "line": 1258,
        "column": 5,
        "nodeType": "CallExpression",
        "messageId": "set",
        "endLine": 1258,
        "endColumn": 37,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "functional/immutable-data",
        "severity": 2,
        "message": "Modifying a set is not allowed.",
        "line": 1261,
        "column": 5,
        "nodeType": "CallExpression",
        "messageId": "set",
        "endLine": 1261,
        "endColumn": 53,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "functional/no-let",
        "severity": 2,
        "message": "Unexpected let, use const instead.",
        "line": 1277,
        "column": 1,
        "nodeType": "VariableDeclaration",
        "messageId": "generic",
        "endLine": 1277,
        "endColumn": 59,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 1288,
        "column": 23,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 1288,
        "endColumn": 26,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [44100, 44103], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [44100, 44103], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      }
    ],
    "errorCount": 8,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "// --- File: src/dom.ts ---\n//\n// SPDX-License-Identifier: MIT\n// SPDX-FileCopyrightText: © 2025 David Osipov <personal@david-osipov.vision>\n//\n// Hardened DOM validation utilities — tightened types, sanitized logging,\n// privacy-by-default audit behavior, and strict linter / security rule alignment.\n//\n// NOTE: This module prioritizes safety, privacy, and linter compliance over micro-optimizations.\n// For extremely hot paths you may selectively add deliberate exemptions with clear comments.\n\nimport {\n  InvalidParameterError,\n  InvalidConfigurationError,\n  CryptoUnavailableError,\n  sanitizeErrorForLogs,\n} from \"./errors\";\nimport { secureDevLog as secureDevelopmentLog, secureWipe } from \"./utils\";\nimport { SHARED_ENCODER } from \"./encoding\";\n\n/*\n/* NOTE: This file intentionally performs a few runtime-type checks and\n * maintains small mutable caches/counters for performance and correctness in\n * realistic DOM environments. To keep the code readable and avoid fighting the\n * linter we explicitly permit a small set of rules here with clear justification:\n * - @typescript-eslint/no-explicit-any & no-unsafe-member-access: we perform\n *   guarded runtime checks against `globalThis` and dynamic imports, and we validate\n *   shapes before use. These are required for cross-runtime crypto fallbacks.\n * - functional/immutable-data, functional/no-let, functional/prefer-readonly-type:\n *   internal caches and rate limiter counters are intentionally mutable and\n *   documented as such. Mutability here is a deliberate engineering trade-off.\n */\n/* eslint-disable @typescript-eslint/no-explicit-any, @typescript-eslint/no-unsafe-member-access, functional/immutable-data, functional/no-let, functional/prefer-readonly-type */\n\n/* ----------------------------- Runtime guards ---------------------------- */\n\nconst hasDOM =\n  typeof globalThis !== \"undefined\" &&\n  typeof (globalThis as any).document !== \"undefined\" &&\n  typeof (globalThis as any).Element !== \"undefined\" &&\n  typeof (globalThis as any).Node !== \"undefined\";\n\n/* ---------------------------- Audit / hashing types ---------------------- */\n\nexport type AuditEventKind =\n  | \"validation_failure\"\n  | \"forbidden_access\"\n  | \"cache_refresh\"\n  | \"validation_failure_hash\"\n  | \"rate_limit_triggered\";\n\nexport type AuditEvent = {\n  readonly kind: AuditEventKind;\n  readonly timestamp: string;\n  readonly selectorFingerprint?: string;\n  readonly selectorLength?: number;\n  readonly reason?: string;\n  readonly selectorHash?: string;\n  readonly instanceId?: string;\n};\n\n/**\n * An audit hook receives sanitized audit events. The library will never pass raw\n * selectors or raw DOM nodes to the hook. If you enable `emitSelectorHash`, a\n * SHA-256 hex of the selector MAY be included — this is opt-in and disabled by default.\n */\nexport type AuditHook = (event: AuditEvent) => void | Promise<void>;\n\n/* ---------------------------- Public types / config ---------------------- */\n\nexport interface DOMValidatorConfig {\n  readonly allowedRootSelectors: ReadonlySet<string>;\n  readonly forbiddenRoots: ReadonlySet<string>;\n  readonly failFast?: boolean;\n  readonly maxSelectorLength?: number;\n  readonly maxValidationsPerSecond?: number;\n  readonly auditHook?: AuditHook;\n  readonly validatedElementTTLms?: number;\n  readonly instanceId?: string;\n  /**\n   * Synchronous factory to create a Map-like cache. This keeps the public API synchronous\n   * while allowing the host application to provide an LRU implementation if desired.\n   *\n   * Example:\n   *   cacheFactory: () => new Map<string, Element | undefined>()\n   */\n  readonly cacheFactory?: () => Map<string, Element | undefined>;\n  /**\n   * How long (ms) to wait for the auditHook before abandoning the call. Default: 2000 ms.\n   */\n  readonly auditHookTimeoutMs?: number;\n\n  /**\n   * Privacy guard: if `true` the validator will compute & emit a SHA-256 hex of\n   * the selector as part of follow-up validation_failure_hash events. Default: false.\n   */\n  readonly emitSelectorHash?: boolean;\n}\n\n/* ------------------------------- Defaults -------------------------------- */\n\n/**\n * NOTE: Sets are shallowly referenced here. Object.freeze is used to guard the top-level\n * config object from accidental property mutation; the Set contents themselves are treated\n * as immutable by convention. If you require absolute immutability consider using a frozen\n * wrapper or an immutable collection library.\n */\nconst DEFAULT_CONFIG = Object.freeze({\n  allowedRootSelectors: new Set([\n    \"#main-content\",\n    \"#main-header\",\n    \"#modal-container\",\n  ]),\n  forbiddenRoots: new Set([\"body\", \"html\", \"#app\", \"#root\"]),\n  failFast: false,\n  maxSelectorLength: 1024,\n  maxValidationsPerSecond: 50,\n  auditHook: undefined,\n  validatedElementTTLms: 5 * 60 * 1000,\n  instanceId: undefined,\n  cacheFactory: undefined,\n  auditHookTimeoutMs: 2000,\n  emitSelectorHash: false,\n}) as unknown as DOMValidatorConfig;\n\n/* ------------------------------ Helpers ---------------------------------- */\n\n/**\n * Deterministic, non-cryptographic fingerprint (djb2 -> hex) implemented\n * in a functional/reduce style to satisfy immutability lint rules while remaining\n * deterministic and fast enough for short selectors.\n */\nfunction fingerprintHexSync(input: string): string {\n  // Functional reduction over code points — avoids mutable `let` per lint policy.\n  // rename accumulator to satisfy naming rules\n  const hash = Array.from(String(input)).reduce((accumulator, ch) => {\n    // acc * 33 ^ c  (force to unsigned 32-bit)\n    const next = ((accumulator * 33) ^ ch.charCodeAt(0)) >>> 0;\n    return next;\n  }, 5381);\n  return hash.toString(16).padStart(8, \"0\");\n}\n\n/**\n * Helper: wrap a promise with a timeout that rejects with a specific error.\n * Ensures that the timeout rejection cleans up the timer deterministically.\n */\nfunction promiseWithTimeout<T>(\n  p: Promise<T>,\n  ms: number,\n  errorMessage = \"operation_timeout\",\n): Promise<T> {\n  return new Promise<T>((resolve, reject) => {\n    const t = setTimeout(() => {\n      reject(new Error(errorMessage));\n    }, ms);\n    void p.then(\n      (v) => {\n        clearTimeout(t);\n        resolve(v);\n      },\n      (error) => {\n        clearTimeout(t);\n        reject(error);\n      },\n    );\n  });\n}\n\n/**\n * Async SHA-256 hex digest with guarded timeout and typed fallbacks.\n *\n * Strategy:\n *  - Prefer Web Crypto (crypto.subtle) in browsers.\n *  - Prefer Node's built-in `createHash` synchronously when available (dynamic import).\n *  - Try optional fast libs as last resorts.\n *\n * Notes:\n *  - Some underlying operations (e.g., subtle.digest) are not cancellable — the timeout\n *    prevents us from waiting forever but cannot stop the underlying work. Keep timeouts conservative.\n *  - All imported modules are validated by runtime shape checks; no unchecked `any` usage.\n */\nasync function sha256Hex(input: string, timeoutMs = 1500): Promise<string> {\n  const enc = SHARED_ENCODER;\n\n  // Test hook: allow unit tests to override dynamic imports deterministically.\n  // Tests may set __test_importOverride to a function that receives a module\n  // specifier and returns a Promise resolving to a module-like object.\n  // This is only used for testing and is intentionally opt-in.\n\n  const importer: (spec: string) => Promise<any> =\n    (sha256Hex as any).__test_importOverride ?? ((s: string) => import(s));\n\n  // Helper strategies: try multiple implementations in order and return the first successful result.\n  async function tryWebCrypto(): Promise<string | undefined> {\n    let data: Uint8Array | undefined;\n    let u8: Uint8Array | undefined;\n    try {\n      const g = globalThis as unknown as { crypto?: unknown };\n      if (g.crypto && typeof (g.crypto as any).subtle === \"object\") {\n        type SubtleLike = {\n          digest(\n            alg: string,\n            data: ArrayBuffer | ArrayBufferView,\n          ): Promise<ArrayBuffer>;\n        };\n        const subtle = (g.crypto as any).subtle as SubtleLike;\n        // create an explicit encoded buffer so we can attempt to wipe it afterwards\n        data = enc.encode(input);\n        const digest = await promiseWithTimeout(\n          subtle.digest(\"SHA-256\", data),\n          timeoutMs,\n          \"sha256_timeout\",\n        );\n        u8 = new Uint8Array(digest);\n        return Array.from(u8)\n          .map((b) => b.toString(16).padStart(2, \"0\"))\n          .join(\"\");\n      }\n    } catch (error) {\n      try {\n        secureDevelopmentLog(\n          \"debug\",\n          \"DOMValidator\",\n          \"sha256: webcrypto failed\",\n          { err: sanitizeErrorForLogs(error) },\n        );\n      } catch {\n        /* swallow */\n      }\n    } finally {\n      // Best-effort attempt to wipe any temporary buffers we created\n      try {\n        if (u8) secureWipe(u8);\n      } catch {\n        /* swallow */\n      }\n      try {\n        if (data) secureWipe(data);\n      } catch {\n        /* swallow */\n      }\n    }\n    return undefined;\n  }\n\n  async function tryNodeCrypto(): Promise<string | undefined> {\n    try {\n      const nodeCryptoModulePromise = importer(\"node:crypto\") as Promise<\n        typeof import(\"node:crypto\")\n      >;\n      const nodeCrypto = await promiseWithTimeout(\n        nodeCryptoModulePromise,\n        timeoutMs,\n        \"sha256_timeout\",\n      );\n      if (nodeCrypto && typeof nodeCrypto.createHash === \"function\") {\n        return String(\n          nodeCrypto.createHash(\"sha256\").update(input).digest(\"hex\"),\n        );\n      }\n    } catch (error) {\n      try {\n        secureDevelopmentLog(\n          \"debug\",\n          \"DOMValidator\",\n          \"sha256: node:crypto unavailable\",\n          { err: sanitizeErrorForLogs(error) },\n        );\n      } catch {\n        /* swallow */\n      }\n    }\n    return undefined;\n  }\n\n  async function tryFastSha256(): Promise<string | undefined> {\n    try {\n      const fastModulePromise = importer(\"fast-sha256\") as Promise<unknown>;\n      const fastModule = await promiseWithTimeout(\n        fastModulePromise,\n        timeoutMs,\n        \"sha256_timeout\",\n      );\n      if (fastModule !== null && typeof fastModule === \"object\") {\n        const m = fastModule as Record<string, unknown>;\n        if (typeof m[\"hashHex\"] === \"function\")\n          return String((m[\"hashHex\"] as (...a: unknown[]) => unknown)(input));\n        if (typeof m[\"hex\"] === \"function\")\n          return String((m[\"hex\"] as (...a: unknown[]) => unknown)(input));\n      }\n      if (typeof fastModule === \"function\")\n        return String((fastModule as unknown as (s: string) => string)(input));\n    } catch (error) {\n      try {\n        secureDevelopmentLog(\n          \"debug\",\n          \"DOMValidator\",\n          \"sha256: fast-sha256 not usable\",\n          { err: sanitizeErrorForLogs(error) },\n        );\n      } catch {\n        /* swallow */\n      }\n    }\n    return undefined;\n  }\n\n  async function tryHashWasm(): Promise<string | undefined> {\n    try {\n      const hwPromise = importer(\"hash-wasm\") as Promise<unknown>;\n      const hw = await promiseWithTimeout(\n        hwPromise,\n        timeoutMs,\n        \"sha256_timeout\",\n      );\n      if (hw !== null && typeof hw === \"object\") {\n        const module_ = hw as Record<string, unknown>;\n        if (typeof module_[\"sha256\"] === \"function\") {\n          const maybe = (module_[\"sha256\"] as (...a: unknown[]) => unknown)(\n            input,\n          );\n          if (maybe instanceof Promise)\n            return String(\n              await promiseWithTimeout(\n                maybe as Promise<unknown>,\n                timeoutMs,\n                \"sha256_timeout\",\n              ),\n            );\n          return String(maybe);\n        }\n      }\n    } catch (error) {\n      try {\n        secureDevelopmentLog(\n          \"debug\",\n          \"DOMValidator\",\n          \"sha256: hash-wasm not usable\",\n          { err: sanitizeErrorForLogs(error) },\n        );\n      } catch {\n        /* swallow */\n      }\n    }\n    return undefined;\n  }\n\n  const strategies = [tryWebCrypto, tryNodeCrypto, tryFastSha256, tryHashWasm];\n  for (const strat of strategies) {\n    const out = await strat();\n    if (typeof out === \"string\") return out;\n  }\n\n  throw new CryptoUnavailableError(\"No crypto available\");\n}\n\n/** Sanitize selector for logs: strip attribute values and quoted substrings; truncate. */\nfunction sanitizeSelectorForLogs(sel: string): string {\n  try {\n    const s = String(sel);\n    // Use safe scanners instead of complex regexes to avoid catastrophic backtracking\n    const redacted = redactAttributesSafely(s);\n    const noQuotes = removeQuotedSegmentsSafely(redacted);\n    // Truncate to safe length\n    if (noQuotes.length <= 128) return noQuotes;\n    const head = noQuotes.slice(0, 96);\n    const tail = noQuotes.slice(-24);\n    return `${head}…${tail}`;\n  } catch {\n    return \"<unavailable>\";\n  }\n}\n\n/**\n * Redact attribute selector values safely without backtracking-prone regex.\n * Implementation is somewhat stateful and branchy by necessity; disable the\n * cognitive-complexity rule here with a justification — this is a small,\n * auditable scanner that avoids ReDoS risks from complex regexes.\n */\n// eslint-disable-next-line sonarjs/cognitive-complexity\nfunction redactAttributesSafely(s: string): string {\n  const out: string[] = [];\n  let index = 0;\n  while (index < s.length) {\n    const ch = s[index];\n    if (ch === \"[\") {\n      // capture up to '=' or closing bracket\n      let index_ = index + 1;\n      while (index_ < s.length && s[index_] !== \"]\" && s[index_] !== \"=\")\n        index_++;\n      if (index_ < s.length && s[index_] === \"=\") {\n        // we have an attribute with value; find end of value\n        // skip whitespace\n        let k = index_ + 1;\n        while (k < s.length && /\\s/.test(String(s[k]))) k++;\n        // value may be quoted or unquoted\n        if (k < s.length && (s[k] === '\"' || s[k] === \"'\")) {\n          const quote = s[k];\n          k++;\n          while (k < s.length && s[k] !== quote) k++;\n          // advance to closing bracket\n          while (k < s.length && s[k] !== \"]\") k++;\n          out.push(s.slice(index, index + 1));\n          out.push(s.slice(index + 1, index_).replace(/\\s+/g, \"\"));\n          out.push(\"=<redacted>]\");\n          index = k + 1;\n          continue;\n        }\n        // unquoted value: advance to closing bracket\n        while (k < s.length && s[k] !== \"]\") k++;\n        out.push(s.slice(index, index + 1));\n        out.push(s.slice(index + 1, index_).replace(/\\s+/g, \"\"));\n        out.push(\"=<redacted>]\");\n        index = k + 1;\n        continue;\n      }\n    }\n    out.push(String(ch));\n    index++;\n  }\n  return out.join(\"\");\n}\n\n/** Remove quoted segments safely (handles escaped quotes conservatively). */\nfunction removeQuotedSegmentsSafely(s: string): string {\n  let out = \"\";\n  let index = 0;\n  while (index < s.length) {\n    const ch = s[index];\n    if (ch === '\"' || ch === \"'\") {\n      const quote = ch;\n      index++;\n      while (index < s.length) {\n        if (s[index] === \"\\\\\") {\n          // skip escaped char\n          index += 2;\n        } else if (s[index] === quote) {\n          index++;\n          break;\n        } else {\n          index++;\n        }\n      }\n      out += \"<redacted>\";\n      continue;\n    }\n    out += ch;\n    index++;\n  }\n  return out;\n}\n\n/**\n * Extract raw bracketed attribute segments (including brackets) from a selector.\n * Implemented as a safe scanner to avoid complex regexes.\n */\n// eslint-disable-next-line sonarjs/cognitive-complexity\nfunction extractAttributeSegments(s: string): string[] {\n  const parts: string[] = [];\n  let index = 0;\n  while (index < s.length) {\n    if (s[index] === \"[\") {\n      const start = index;\n      index++;\n      // scan until matching closing bracket, handling nested quotes conservatively\n      let inQuote: string | undefined = undefined;\n      while (index < s.length) {\n        const ch = s[index];\n        if (inQuote !== undefined) {\n          if (ch === \"\\\\\") {\n            index += 2;\n            continue;\n          }\n          if (ch === inQuote) {\n            inQuote = undefined;\n            index++;\n            continue;\n          }\n          index++;\n          continue;\n        }\n        if (ch === '\"' || ch === \"'\") {\n          inQuote = ch;\n          index++;\n          continue;\n        }\n        if (ch === \"]\") {\n          index++;\n          break;\n        }\n        index++;\n      }\n      parts.push(s.slice(start, index));\n      continue;\n    }\n    index++;\n  }\n  return parts;\n}\n\n/* ------------------------------ Implementation ---------------------------- */\n\ntype RootCache = Map<string, Element | undefined>;\n\n/**\n * A security-focused class for validating and querying DOM elements.\n */\nexport class DOMValidator {\n  readonly #config: DOMValidatorConfig;\n\n  // validatedElements stores last validation timestamp to allow TTL-based revalidation.\n  // WeakMap keys ensure no memory leaks; value is epoch ms when validated.\n  readonly #validatedElements = new WeakMap<Element, number>();\n\n  // Mutable internal cache (lazily populated) — typed as RootCache for clarity.\n  #resolvedRootsCache?: RootCache;\n\n  // Rate limiter state (mutable)\n  #validationCounter = 0;\n  #lastWindow = Date.now();\n\n  // Instance id for audit correlation\n  readonly #instanceId: string | undefined;\n\n  /**\n   * Construct a new DOMValidator.\n   *\n   * @param config - validator configuration\n   * @mutates this.#resolvedRootsCache - initializes internal cache (Map by default)\n   */\n  constructor(config: DOMValidatorConfig = DEFAULT_CONFIG) {\n    this.#config = Object.freeze(DOMValidator.cloneAndNormalizeConfig(config));\n    this.#instanceId = this.#config.instanceId;\n\n    // initialize cache synchronously via factory (if provided) or Map\n    this.#resolvedRootsCache = this.#config.cacheFactory\n      ? this.#config.cacheFactory()\n      : new Map<string, Element | undefined>();\n\n    // If the host hasn't provided a cacheFactory, try to asynchronously upgrade\n    // the default Map to an optional `lru-cache` instance when available. This\n    // is a best-effort, non-blocking optimization and must not change the\n    // synchronous public API (we keep the Map until/if LRU becomes ready).\n    if (!this.#config.cacheFactory) {\n      // The upgrade attempt is intentionally non-blocking and may perform an\n      // optional dynamic import; running it from the constructor is safe because\n      // we never await it and it does not change the synchronous public API.\n      // Disable the rule here with a narrow comment explaining the trade-off.\n      // eslint-disable-next-line sonarjs/no-async-constructor\n      void this.#tryUpgradeCache();\n    }\n\n    // Defensive validation: ensure no allowed selector is present in forbiddenRoots (case-insensitive compare)\n    for (const root of this.#config.allowedRootSelectors) {\n      try {\n        const normalized = String(root).trim().toLowerCase();\n        if (this.#config.forbiddenRoots.has(normalized)) {\n          throw new InvalidConfigurationError(\n            `Disallowed broad selector in validator allowlist: \"${root}\"`,\n          );\n        }\n      } catch (error) {\n        // sanitize and rethrow as configuration error\n        const safe = sanitizeErrorForLogs(error);\n        secureDevelopmentLog(\n          \"error\",\n          \"DOMValidator\",\n          \"constructor: invalid config\",\n          { err: safe },\n        );\n        throw error;\n      }\n    }\n  }\n\n  /**\n   * Attempt to upgrade the internal cache to an optional LRU implementation if available.\n   * This runs asynchronously and never changes the synchronous contract of the class.\n   */\n  async #tryUpgradeCache(): Promise<void> {\n    try {\n      // Allow tests to override dynamic imports deterministically.\n\n      const importer: (spec: string) => Promise<any> =\n        (DOMValidator as any).__test_importOverride ??\n        ((s: string) => import(s));\n      const module_ = await promiseWithTimeout(\n        importer(\"lru-cache\"),\n        1200,\n        \"lru_import_timeout\",\n      );\n      // Narrow the dynamic import result into a minimal runtime shape we expect.\n      const LRU: unknown = (module_ as any).default ?? module_;\n      if (typeof LRU === \"function\") {\n        // Construct via 'any' intentionally but validate runtime shape before use.\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-call\n        const inst: unknown = new (LRU as any)({ max: 1000 });\n        if (\n          inst &&\n          typeof (inst as any).get === \"function\" &&\n          typeof (inst as any).set === \"function\"\n        ) {\n          this.#resolvedRootsCache = inst as unknown as RootCache;\n          secureDevelopmentLog(\n            \"debug\",\n            \"DOMValidator\",\n            \"lru-cache: upgraded internal cache\",\n          );\n        }\n      }\n    } catch (error) {\n      const safe = sanitizeErrorForLogs(error);\n      try {\n        secureDevelopmentLog(\n          \"debug\",\n          \"DOMValidator\",\n          \"lru-cache not available or failed to init\",\n          { err: safe },\n        );\n      } catch {\n        /* swallow */\n      }\n    }\n  }\n\n  private static cloneAndNormalizeConfig(\n    cfg: DOMValidatorConfig,\n  ): DOMValidatorConfig {\n    // Defensive clones: ensure nested Sets are fresh copies (prevent external mutation)\n    const allowed = new Set<string>();\n    for (const s of cfg.allowedRootSelectors ??\n      DEFAULT_CONFIG.allowedRootSelectors) {\n      allowed.add(String(s).trim());\n    }\n    const forbidden = new Set<string>();\n    for (const s of cfg.forbiddenRoots ?? DEFAULT_CONFIG.forbiddenRoots) {\n      forbidden.add(String(s).trim().toLowerCase());\n    }\n\n    const out = {\n      allowedRootSelectors: allowed,\n      forbiddenRoots: forbidden,\n      failFast: Boolean(cfg.failFast),\n      maxSelectorLength:\n        cfg.maxSelectorLength ?? DEFAULT_CONFIG.maxSelectorLength,\n      maxValidationsPerSecond:\n        cfg.maxValidationsPerSecond ?? DEFAULT_CONFIG.maxValidationsPerSecond,\n      auditHook: cfg.auditHook ?? DEFAULT_CONFIG.auditHook,\n      validatedElementTTLms:\n        cfg.validatedElementTTLms ?? DEFAULT_CONFIG.validatedElementTTLms,\n      instanceId: cfg.instanceId ?? DEFAULT_CONFIG.instanceId,\n      cacheFactory: cfg.cacheFactory,\n      auditHookTimeoutMs:\n        cfg.auditHookTimeoutMs ?? DEFAULT_CONFIG.auditHookTimeoutMs,\n      emitSelectorHash: cfg.emitSelectorHash ?? DEFAULT_CONFIG.emitSelectorHash,\n    };\n\n    // Shallow-freeze to prevent casual mutation; nested Sets are already fresh copies.\n    return Object.freeze(out) as unknown as DOMValidatorConfig;\n  }\n\n  /**\n   * Clear any cached root resolution state. Useful for SPAs or dynamic pages where\n   * root elements can be removed/replaced.\n   *\n   * @mutates this.#resolvedRootsCache\n   */\n  public invalidateCache(): void {\n    this.#resolvedRootsCache = this.#config.cacheFactory\n      ? this.#config.cacheFactory()\n      : new Map<string, Element | undefined>();\n\n    // emit audit event if configured (fire-and-forget)\n    if (this.#config.auditHook) {\n      const eventBase = {\n        kind: \"cache_refresh\" as const,\n        timestamp: new Date().toISOString(),\n      };\n      const event = this.#instanceId\n        ? ({ ...eventBase, instanceId: this.#instanceId } as AuditEvent)\n        : (eventBase as AuditEvent);\n      // intentionally fire-and-forget; safeCallAuditHook has internal timeout\n      void this.#safeCallAuditHook(event).catch(() => {\n        /* swallowing; audit non-critical */\n      });\n    }\n  }\n\n  /**\n   * Resolve and cache allowed root Elements. Returns an empty Map in no-DOM environments.\n   *\n   * Note: synchronous by design to keep public API sync.\n   *\n   * @mutates this.#resolvedRootsCache\n   */\n  #resolveAndCacheAllowedRoots(): ReadonlyMap<string, Element | undefined> {\n    if (!hasDOM) return new Map();\n\n    if (this.#resolvedRootsCache && this.#resolvedRootsCache.size > 0) {\n      return this.#resolvedRootsCache;\n    }\n\n    const mutable =\n      this.#resolvedRootsCache ?? new Map<string, Element | undefined>();\n    for (const selector of this.#config.allowedRootSelectors) {\n      try {\n        const element = document.querySelector(selector) ?? undefined;\n        mutable.set(selector, element);\n      } catch (error) {\n        secureDevelopmentLog(\"debug\", \"DOMValidator\", \"resolve root failed\", {\n          selector: sanitizeSelectorForLogs(String(selector)),\n          err: sanitizeErrorForLogs(error),\n        });\n        mutable.set(selector, undefined);\n      }\n    }\n    this.#resolvedRootsCache = mutable;\n    return this.#resolvedRootsCache;\n  }\n\n  // Helper: assert parenthesis nesting depth is within allowed limit\n  #assertParenDepthWithinLimit(selector: string, maxDepth: number): void {\n    let depth = 0;\n    for (let index = 0; index < selector.length; index++) {\n      const ch = selector[index];\n      if (ch === \"(\") {\n        depth++;\n        if (depth > maxDepth) {\n          this.#emitValidationFailureEvent(selector, \"paren_depth_exceeded\");\n          throw new InvalidParameterError(\n            \"Selector nesting depth is too large.\",\n          );\n        }\n      } else if (ch === \")\") {\n        depth = Math.max(0, depth - 1);\n      }\n    }\n  }\n\n  /**\n   * Non-blocking background parse using optional `css-what` to detect subtle\n   * selector syntax issues. This never changes the synchronous result; it only\n   * emits audit events or dev logs if the optional parser reports problems.\n   */\n  #backgroundCssWhatParse(selector: string): void {\n    if (!selector) return;\n    void (async () => {\n      try {\n        // Allow tests to override dynamic imports deterministically.\n\n        const importer: (spec: string) => Promise<any> =\n          (DOMValidator as any).__test_importOverride ??\n          ((s: string) => import(s));\n        const module_ = await promiseWithTimeout(\n          importer(\"css-what\"),\n          800,\n          \"css-what_timeout\",\n        );\n        // Narrow runtime shape: we expect an exported parser function named\n        // `parse` or the default export. Treat as unknown and validate before use.\n        const maybeParser: unknown =\n          (module_ as any).parse ?? (module_ as any).default ?? module_;\n        if (typeof maybeParser === \"function\") {\n          const parserFunction = maybeParser as (s: string) => unknown;\n          // call parser; css-what throws on invalid input\n          parserFunction(String(selector));\n        }\n      } catch (error) {\n        try {\n          // Non-fatal: emit a validation failure audit and a dev log for debugging\n          this.#emitValidationFailureEvent(selector, \"css_what_parse_failed\");\n          secureDevelopmentLog(\n            \"debug\",\n            \"DOMValidator\",\n            \"css-what parse failed\",\n            {\n              err: sanitizeErrorForLogs(error),\n            },\n          );\n        } catch {\n          /* swallow */\n        }\n      }\n    })();\n  }\n\n  /**\n   * Rate-limit guard for selector syntax validation.\n   * Throws InvalidParameterError when rate limit exceeded.\n   *\n   * @mutates this.#validationCounter\n   * @mutates this.#lastWindow\n   */\n  #checkRateLimit(): void {\n    const now = Date.now();\n    if (now - this.#lastWindow >= 1000) {\n      this.#lastWindow = now;\n      this.#validationCounter = 0;\n    }\n    this.#validationCounter++;\n    const max = this.#config.maxValidationsPerSecond ?? 50;\n    if (this.#validationCounter > max) {\n      if (this.#config.auditHook) {\n        const eventBase = {\n          kind: \"rate_limit_triggered\" as const,\n          timestamp: new Date().toISOString(),\n        };\n        const event = this.#instanceId\n          ? ({ ...eventBase, instanceId: this.#instanceId } as AuditEvent)\n          : (eventBase as AuditEvent);\n        void this.#safeCallAuditHook(event).catch(() => {});\n      }\n      throw new InvalidParameterError(\"Selector validation rate exceeded\");\n    }\n  }\n\n  /**\n   * Basic validation of a CSS selector's syntax. Conservative approach:\n   * - quick allowlist for simple selectors (ID, class, tag, basic combinators);\n   * - explicit rejection of expensive pseudo-classes and known expensive constructs;\n   * - disallow complex selectors in non-DOM environments.\n   *\n   * @throws {InvalidParameterError} If the selector is invalid or disallowed.\n   */\n  public validateSelectorSyntax(selector: string): string {\n    this.#checkRateLimit();\n\n    if (typeof selector !== \"string\") {\n      this.#emitValidationFailureEvent(String(selector), \"non_string_selector\");\n      throw new InvalidParameterError(\"Selector must be a string.\");\n    }\n\n    const s = selector.trim();\n\n    if (!s) {\n      this.#emitValidationFailureEvent(s, \"empty_selector\");\n      throw new InvalidParameterError(\n        \"Invalid selector: must be a non-empty string.\",\n      );\n    }\n\n    const maxLength = this.#config.maxSelectorLength ?? 1024;\n    if (s.length > maxLength) {\n      this.#emitValidationFailureEvent(s, \"selector_too_long\");\n      throw new InvalidParameterError(\"Selector is too long.\");\n    }\n\n    // Fast allowlist for very simple selectors: ID, class, tag, and simple combinators.\n    // Implemented via safe scanner to avoid complex regexes and ReDoS.\n    const maxCombinators = 8;\n    const isSimple = (() => {\n      let tokens = 0;\n      let index = 0;\n      const validToken = (tok: string) => /^[#.]?[-\\w]+$/.test(tok);\n      while (index < s.length) {\n        // split on combinators\n        let index_ = index;\n        while (index_ < s.length && !/[ >+~]/.test(s.charAt(index_))) index_++;\n        const tok = s.slice(index, index_).trim();\n        if (!tok) return false;\n        if (!validToken(tok)) return false;\n        tokens++;\n        // skip combinator(s)\n        while (index_ < s.length && /[ >+~]/.test(s.charAt(index_))) index_++;\n        index = index_;\n        if (tokens > maxCombinators + 1) return false;\n      }\n      return tokens > 0 && tokens <= maxCombinators + 1;\n    })();\n    if (isSimple) return s;\n\n    // Reject known expensive or complex pseudo-classes immediately. Use simple\n    // substring checks instead of a complex regex to avoid ReDoS concerns.\n    const expensiveList = [\n      \":has(\",\n      \":is(\",\n      \":where(\",\n      \":nth-last\",\n      \":nth-child\",\n      \":not(\",\n      \":matches(\",\n      \":contains(\",\n    ];\n    for (const token of expensiveList) {\n      if (s.toLowerCase().includes(token)) {\n        this.#emitValidationFailureEvent(s, \"expensive_pseudo\");\n        throw new InvalidParameterError(\n          \"Selector contains disallowed or expensive pseudo-classes.\",\n        );\n      }\n    }\n\n    // Additional syntactic constraints: parentheses depth, attribute selector length\n    // parentheses depth\n    this.#assertParenDepthWithinLimit(s, 3);\n\n    // attributes length and complexity — use a safe scanner to extract bracketed segments\n    const attributeSegments = extractAttributeSegments(s);\n    for (const seg of attributeSegments) {\n      if (seg.length > 128) {\n        this.#emitValidationFailureEvent(s, \"attribute_selector_too_long\");\n        throw new InvalidParameterError(\"Attribute selector is too large.\");\n      }\n    }\n\n    if (!hasDOM) {\n      this.#emitValidationFailureEvent(s, \"complex_selector_no_dom\");\n      throw new InvalidParameterError(\n        \"Complex selectors are disallowed in non-DOM environments.\",\n      );\n    }\n\n    // Final safety-net: attempt to parse using a DocumentFragment (may throw)\n    try {\n      document.createDocumentFragment().querySelector(s);\n    } catch (error) {\n      const safe = sanitizeErrorForLogs(error);\n      this.#emitValidationFailureEvent(s, \"parser_reject\");\n      secureDevelopmentLog(\n        \"debug\",\n        \"DOMValidator\",\n        \"selector parsing rejected by native parser\",\n        { err: safe },\n      );\n      throw new InvalidParameterError(\n        `Invalid selector syntax (rejected by parser).`,\n      );\n    }\n\n    // Kick off an optional background parse using `css-what` for additional\n    // parsing coverage without blocking the sync return.\n    this.#backgroundCssWhatParse(s);\n\n    return s;\n  }\n\n  /**\n   * Narrowing helper: asserts the provided value is a DOM Element.\n   * Uses TTL-based revalidation to avoid trusting elements indefinitely.\n   * @throws {InvalidParameterError} if the value is not an Element or if no DOM exists.\n   *\n   * @mutates this.#validatedElements\n   */\n  public validateElement(element_: unknown): Element {\n    if (!hasDOM) {\n      this.#emitValidationFailureEvent(String(element_), \"no_dom_for_element\");\n      throw new InvalidParameterError(\"No DOM available to validate elements.\");\n    }\n    if (!(element_ instanceof Element)) {\n      this.#emitValidationFailureEvent(String(element_), \"not_element\");\n      throw new InvalidParameterError(\n        \"Invalid element: must be a DOM Element.\",\n      );\n    }\n    const element = element_ as Element;\n\n    const now = Date.now();\n    const ttl = this.#config.validatedElementTTLms ?? 5 * 60 * 1000;\n    const last = this.#validatedElements.get(element) ?? 0;\n    if (last && now - last <= ttl) {\n      // considered still validated\n      return element;\n    }\n\n    const tag = (element.tagName || \"\").toLowerCase();\n    if ([\"script\", \"iframe\", \"object\", \"embed\", \"style\"].includes(tag)) {\n      this.#emitValidationFailureEvent(String(tag), \"forbidden_tag\");\n      throw new InvalidParameterError(`Forbidden element tag: <${tag}>`);\n    }\n\n    this.#validatedElements.set(element, now);\n    return element;\n  }\n\n  /**\n   * Safely query for an element ensuring it resides within an allowlisted root.\n   *\n   * Returns `undefined` in non-DOM environments or when nothing matches.\n   */\n  public queryElementSafely(\n    selector: string,\n    context?: Document | Element,\n  ): Element | undefined {\n    const results = this.queryAllSafely(selector, context);\n    return results.length > 0 ? results[0] : undefined;\n  }\n\n  /**\n   * Query for all matching elements that are inside allowlisted roots.\n   * Returns empty array in no-DOM contexts.\n   *\n   * Public return type is readonly, internal array is mutable.\n   *\n   * @mutates this.#resolvedRootsCache\n   */\n  public queryAllSafely(\n    selector: string,\n    context?: Document | Element,\n  ): readonly Element[] {\n    if (!hasDOM) {\n      secureDevelopmentLog(\n        \"warn\",\n        \"DOMValidator\",\n        \"Blocked queryAllSafely: no DOM available\",\n        {\n          selector: sanitizeSelectorForLogs(selector),\n        },\n      );\n      return [];\n    }\n\n    try {\n      this.validateSelectorSyntax(selector);\n\n      const context_ = (context ?? document) as Document | Element;\n      const nodeList = context_.querySelectorAll(selector);\n      if (!nodeList || nodeList.length === 0) return [];\n\n      // Refresh cached roots and ensure connectedness\n      const resolved = new Map<string, Element | undefined>(\n        this.#resolveAndCacheAllowedRoots() as ReadonlyMap<\n          string,\n          Element | undefined\n        >,\n      );\n      for (const [sel, rootElement] of Array.from(resolved.entries())) {\n        if (rootElement && !rootElement.isConnected) {\n          try {\n            resolved.set(sel, document.querySelector(sel) ?? undefined);\n          } catch (error) {\n            secureDevelopmentLog(\n              \"debug\",\n              \"DOMValidator\",\n              \"refresh root failed\",\n              {\n                selector: sanitizeSelectorForLogs(sel),\n                err: sanitizeErrorForLogs(error),\n              },\n            );\n            resolved.set(sel, undefined);\n          }\n        }\n      }\n      // commit refreshed map to internal cache\n      this.#resolvedRootsCache = new Map(resolved);\n\n      const rootEls = Array.from(resolved.values()).filter(\n        Boolean,\n      ) as readonly Element[];\n\n      // Internal mutable result\n      const result: Element[] = [];\n      for (const element of Array.from(nodeList)) {\n        const isContained = rootEls.some(\n          (rootElement) =>\n            rootElement === element || rootElement.contains(element),\n        );\n        if (!isContained) continue;\n        try {\n          result.push(this.validateElement(element));\n        } catch (error) {\n          // skip elements that fail validation (and continue)\n          secureDevelopmentLog(\n            \"debug\",\n            \"DOMValidator\",\n            \"element validation failed, skipping\",\n            {\n              selector: sanitizeSelectorForLogs(selector),\n              err: sanitizeErrorForLogs(error),\n            },\n          );\n        }\n      }\n      return result as readonly Element[];\n    } catch (error) {\n      const safe = sanitizeErrorForLogs(error);\n      secureDevelopmentLog(\"warn\", \"DOMValidator\", \"queryAllSafely failed\", {\n        selector: sanitizeSelectorForLogs(selector),\n        err: safe,\n      });\n      if (this.#config.failFast) throw error;\n      return [];\n    }\n  }\n\n  /**\n   * Checks whether a given element is contained inside allowed roots.\n   * Returns false in non-DOM contexts.\n   */\n  public containsWithinAllowedRoots(element: Element): boolean {\n    if (!hasDOM) return false;\n    try {\n      this.validateElement(element);\n    } catch {\n      return false;\n    }\n    const resolved = this.#resolveAndCacheAllowedRoots();\n    for (const root of Array.from(resolved.values()).filter(\n      Boolean,\n    ) as readonly Element[]) {\n      if (root === element || root.contains(element)) return true;\n    }\n    return false;\n  }\n\n  /* ---------------------------- Auditing helpers ------------------------- */\n\n  /**\n   * Internal: emit lightweight audit event for validation failure; immediately\n   * includes fingerprint; asynchronously compute SHA-256 of the selector (with timeout)\n   * and emit follow-up event when available — only if emitSelectorHash is enabled.\n   */\n  #emitValidationFailureEvent(selector: string, reason?: string): void {\n    const hook = this.#config.auditHook;\n    if (!hook) return;\n    const fingerprint = fingerprintHexSync(selector);\n    const baseEvent: AuditEvent = Object.freeze({\n      kind: \"validation_failure\",\n      timestamp: new Date().toISOString(),\n      selectorFingerprint: fingerprint,\n      selectorLength: selector ? selector.length : 0,\n      ...(reason ? { reason } : {}),\n      ...(this.#instanceId ? { instanceId: this.#instanceId } : {}),\n    } as AuditEvent);\n    // fire-and-forget (do not await) — ensure rejections are observed by attaching catch\n    void this.#safeCallAuditHook(baseEvent).catch(() => {\n      /* non-fatal */\n    });\n\n    // Compute SHA-256 asynchronously with timeout and emit follow-up event when ready,\n    // only when explicitly enabled to avoid privacy leakage and extra CPU.\n    if (!this.#config.emitSelectorHash) return;\n\n    void (async () => {\n      try {\n        const hash = await sha256Hex(\n          selector,\n          this.#config.auditHookTimeoutMs ?? 1500,\n        );\n        const follow: AuditEvent = Object.freeze({\n          kind: \"validation_failure_hash\",\n          timestamp: new Date().toISOString(),\n          selectorFingerprint: fingerprint,\n          selectorHash: hash,\n          selectorLength: selector.length,\n          ...(reason ? { reason } : {}),\n          ...(this.#instanceId ? { instanceId: this.#instanceId } : {}),\n        } as AuditEvent);\n        await this.#safeCallAuditHook(follow);\n      } catch (error) {\n        // log sanitized debug info; never throw from auditing path\n        try {\n          secureDevelopmentLog(\n            \"debug\",\n            \"DOMValidator\",\n            \"emitValidationFailureEvent: hash or hook failed\",\n            {\n              err: sanitizeErrorForLogs(error),\n            },\n          );\n        } catch {\n          /* swallow */\n        }\n      }\n    })();\n  }\n\n  /** Generic safe call to audit hook with error handling and timeout. */\n  async #safeCallAuditHook(event: AuditEvent): Promise<void> {\n    try {\n      const hook = this.#config.auditHook;\n      if (!hook) return;\n      const timeoutMs = this.#config.auditHookTimeoutMs ?? 2000;\n      // Wrap the hook call in Promise.race with a timeout.\n      // Create a plain, whitelisted, frozen event object to avoid accidental\n      // prototype pollution or unexpected keys being received by the hook.\n      const base = { kind: event.kind, timestamp: event.timestamp } as const;\n      const safeEvent = Object.freeze({\n        ...base,\n        ...(event.selectorFingerprint\n          ? { selectorFingerprint: event.selectorFingerprint }\n          : {}),\n        ...(event.selectorLength !== undefined\n          ? { selectorLength: event.selectorLength }\n          : {}),\n        ...(event.reason ? { reason: event.reason } : {}),\n        ...(event.selectorHash ? { selectorHash: event.selectorHash } : {}),\n        ...(event.instanceId ? { instanceId: event.instanceId } : {}),\n      } as AuditEvent);\n\n      await promiseWithTimeout(\n        (async () => {\n          // Ensure any thrown value is propagated to our outer try/catch and sanitized.\n          await hook(safeEvent);\n        })(),\n        timeoutMs,\n        \"audit_hook_timeout\",\n      );\n    } catch (error) {\n      // Avoid throwing from auditing; log minimally for dev\n      try {\n        secureDevelopmentLog(\"warn\", \"DOMValidator\", \"Audit hook failed\", {\n          err: sanitizeErrorForLogs(error),\n          eventKind: event.kind,\n        });\n      } catch {\n        // swallow\n      }\n    }\n  }\n\n  /* ---------------------------- Misc helpers ----------------------------- */\n  /* Misc helpers intentionally minimal; mask/truncate helpers live as top-level functions. */\n  // Test-only methods: allow unit tests to trigger internal background tasks\n  // in a controlled manner. These are part of the test surface only and\n  // do not change production behavior.\n  public async __test_tryUpgradeCache(): Promise<void> {\n    return await this.#tryUpgradeCache();\n  }\n\n  public __test_backgroundCssWhatParse(selector: string): void {\n    return this.#backgroundCssWhatParse(selector);\n  }\n}\n\n/* ---------------------------- Default helpers ---------------------------- */\n\n/**\n * Factory helper to create a new, independent `DOMValidator` instance with the\n * library's default configuration. Prefer creating your own instance in\n * application code instead of mutating the default singleton.\n *\n * Accepts partial config shapes (arrays or sets) and normalizes them.\n */\nexport function createDefaultDOMValidator(\n  config?: Partial<DOMValidatorConfig>,\n): DOMValidator {\n  const merged: DOMValidatorConfig = {\n    ...DEFAULT_CONFIG,\n    ...(config ?? {}),\n  } as DOMValidatorConfig;\n\n  // Rehydrate sets if caller provided arrays or iterables\n  const allowedInput = (config?.allowedRootSelectors ??\n    DEFAULT_CONFIG.allowedRootSelectors) as\n    | ReadonlySet<string>\n    | string[]\n    | Iterable<string>;\n  const forbiddenInput = (config?.forbiddenRoots ??\n    DEFAULT_CONFIG.forbiddenRoots) as\n    | ReadonlySet<string>\n    | string[]\n    | Iterable<string>;\n\n  const allowedSet = new Set<string>();\n  for (const s of allowedInput as Iterable<string>)\n    allowedSet.add(String(s).trim());\n  const forbiddenSet = new Set<string>();\n  for (const s of forbiddenInput as Iterable<string>)\n    forbiddenSet.add(String(s).trim().toLowerCase());\n\n  const finalConfig: DOMValidatorConfig = Object.freeze({\n    ...merged,\n    allowedRootSelectors: allowedSet,\n    forbiddenRoots: forbiddenSet,\n  });\n\n  return new DOMValidator(finalConfig);\n}\n\n/**\n * Lazily-constructed default validator to avoid throwing at import-time in non-DOM contexts.\n *\n * @mutates defaultInstance\n */\nlet defaultInstance: DOMValidator | undefined = undefined;\n\nexport function getDefaultDOMValidator(): DOMValidator {\n  if (!defaultInstance) defaultInstance = new DOMValidator(DEFAULT_CONFIG);\n  return defaultInstance;\n}\n\n// Test-only helper: reset the lazily-constructed default instance so unit tests\n// can exercise both the creation and the cached-return branches deterministically.\n// This is intentionally test-only and should not be used in application code.\nexport function __test_resetDefaultValidatorForUnitTests(): void {\n  (defaultInstance as any) = undefined;\n}\n\n/* -------------------------------------------------------------------------- */\n/* Test-only exports (intentionally named to indicate non-public API).         */\n/* These are provided to support unit tests and debugging; they are small,\n * auditable wrappers that do not change runtime behavior.                   */\nexport const __test_redactAttributesSafely = redactAttributesSafely;\nexport const __test_removeQuotedSegmentsSafely = removeQuotedSegmentsSafely;\nexport const __test_extractAttributeSegments = extractAttributeSegments;\nexport const __test_fingerprintHexSync = fingerprintHexSync;\nexport const __test_promiseWithTimeout = promiseWithTimeout;\nexport const __test_sha256Hex = sha256Hex;\nexport const __test_sanitizeSelectorForLogs = sanitizeSelectorForLogs;\n\n// Also expose the helpers under their original names for test consumers that\n// import the module directly in unit tests. These are considered non-breaking\n// for runtime behavior but are intended for test use only.\nexport {\n  redactAttributesSafely,\n  removeQuotedSegmentsSafely,\n  extractAttributeSegments,\n};\n",
    "usedDeprecatedRules": [
      {
        "ruleId": "functional/prefer-readonly-type",
        "replacedBy": [
          "functional/prefer-immutable-types",
          "functional/type-declaration-immutability"
        ]
      }
    ]
  },
  {
    "filePath": "/home/david/Security-kit/src/encoding-utils.ts",
    "messages": [],
    "suppressedMessages": [
      {
        "ruleId": "unicorn/prevent-abbreviations",
        "severity": 1,
        "message": "The filename `encoding-utils.ts` should be named `encoding-utilities.ts`. A more descriptive name will do too.",
        "line": 11,
        "column": 1,
        "nodeType": "Program",
        "messageId": "replace",
        "endLine": 164,
        "endColumn": 1,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "functional/no-let",
        "severity": 2,
        "message": "Unexpected let, use const instead.",
        "line": 71,
        "column": 5,
        "nodeType": "VariableDeclaration",
        "messageId": "generic",
        "endLine": 71,
        "endColumn": 21,
        "suppressions": [
          {
            "kind": "directive",
            "justification": "Local binary string accumulator; scoped to function"
          }
        ]
      },
      {
        "ruleId": "functional/no-let",
        "severity": 2,
        "message": "Unexpected let, use const instead.",
        "line": 73,
        "column": 10,
        "nodeType": "VariableDeclaration",
        "messageId": "generic",
        "endLine": 73,
        "endColumn": 23,
        "suppressions": [
          {
            "kind": "directive",
            "justification": "Local loop index; scoped to function"
          }
        ]
      },
      {
        "ruleId": "functional/no-let",
        "severity": 2,
        "message": "Unexpected let, use const instead.",
        "line": 91,
        "column": 12,
        "nodeType": "VariableDeclaration",
        "messageId": "generic",
        "endLine": 91,
        "endColumn": 25,
        "suppressions": [
          {
            "kind": "directive",
            "justification": "Local loop index; scoped to function"
          }
        ]
      },
      {
        "ruleId": "functional/immutable-data",
        "severity": 2,
        "message": "Modifying an existing object/array is not allowed.",
        "line": 94,
        "column": 9,
        "nodeType": "AssignmentExpression",
        "messageId": "generic",
        "endLine": 94,
        "endColumn": 43,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "functional/no-let",
        "severity": 2,
        "message": "Unexpected let, use const instead.",
        "line": 155,
        "column": 10,
        "nodeType": "VariableDeclaration",
        "messageId": "generic",
        "endLine": 155,
        "endColumn": 23,
        "suppressions": [
          {
            "kind": "directive",
            "justification": "Local loop index and intentional array modification for secure wipe; scoped to function"
          }
        ]
      },
      {
        "ruleId": "functional/immutable-data",
        "severity": 2,
        "message": "Modifying an existing object/array is not allowed.",
        "line": 155,
        "column": 55,
        "nodeType": "AssignmentExpression",
        "messageId": "generic",
        "endLine": 155,
        "endColumn": 70,
        "suppressions": [
          {
            "kind": "directive",
            "justification": "Local loop index and intentional array modification for secure wipe; scoped to function"
          }
        ]
      }
    ],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "functional/prefer-readonly-type",
        "replacedBy": [
          "functional/prefer-immutable-types",
          "functional/type-declaration-immutability"
        ]
      }
    ]
  },
  {
    "filePath": "/home/david/Security-kit/src/encoding.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "functional/prefer-readonly-type",
        "replacedBy": [
          "functional/prefer-immutable-types",
          "functional/type-declaration-immutability"
        ]
      }
    ]
  },
  {
    "filePath": "/home/david/Security-kit/src/environment.ts",
    "messages": [],
    "suppressedMessages": [
      {
        "ruleId": "functional/no-let",
        "severity": 2,
        "message": "Unexpected let, use const instead.",
        "line": 17,
        "column": 3,
        "nodeType": "VariableDeclaration",
        "messageId": "generic",
        "endLine": 17,
        "endColumn": 69,
        "suppressions": [
          {
            "kind": "directive",
            "justification": "runtime mutability required for setExplicitEnv"
          }
        ]
      },
      {
        "ruleId": "functional/immutable-data",
        "severity": 2,
        "message": "Modifying a map is not allowed.",
        "line": 34,
        "column": 7,
        "nodeType": "CallExpression",
        "messageId": "map",
        "endLine": 34,
        "endColumn": 20,
        "suppressions": [
          {
            "kind": "directive",
            "justification": "deliberate, limited cache mutation"
          }
        ]
      },
      {
        "ruleId": "functional/immutable-data",
        "severity": 2,
        "message": "Modifying a map is not allowed.",
        "line": 48,
        "column": 9,
        "nodeType": "CallExpression",
        "messageId": "map",
        "endLine": 48,
        "endColumn": 54,
        "suppressions": [
          {
            "kind": "directive",
            "justification": "deliberate, limited cache mutation"
          }
        ]
      },
      {
        "ruleId": "functional/immutable-data",
        "severity": 2,
        "message": "Modifying a map is not allowed.",
        "line": 74,
        "column": 7,
        "nodeType": "CallExpression",
        "messageId": "map",
        "endLine": 74,
        "endColumn": 41,
        "suppressions": [
          {
            "kind": "directive",
            "justification": "intentional, limited cache mutation"
          }
        ]
      },
      {
        "ruleId": "functional/immutable-data",
        "severity": 2,
        "message": "Modifying a map is not allowed.",
        "line": 86,
        "column": 7,
        "nodeType": "CallExpression",
        "messageId": "map",
        "endLine": 86,
        "endColumn": 20,
        "suppressions": [
          {
            "kind": "directive",
            "justification": "intentional, limited cache mutation"
          }
        ]
      }
    ],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "functional/prefer-readonly-type",
        "replacedBy": [
          "functional/prefer-immutable-types",
          "functional/type-declaration-immutability"
        ]
      }
    ]
  },
  {
    "filePath": "/home/david/Security-kit/src/errors.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "functional/prefer-readonly-type",
        "replacedBy": [
          "functional/prefer-immutable-types",
          "functional/type-declaration-immutability"
        ]
      }
    ]
  },
  {
    "filePath": "/home/david/Security-kit/src/globals.d.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "functional/prefer-readonly-type",
        "replacedBy": [
          "functional/prefer-immutable-types",
          "functional/type-declaration-immutability"
        ]
      }
    ]
  },
  {
    "filePath": "/home/david/Security-kit/src/index.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "functional/prefer-readonly-type",
        "replacedBy": [
          "functional/prefer-immutable-types",
          "functional/type-declaration-immutability"
        ]
      }
    ]
  },
  {
    "filePath": "/home/david/Security-kit/src/logger.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "functional/prefer-readonly-type",
        "replacedBy": [
          "functional/prefer-immutable-types",
          "functional/type-declaration-immutability"
        ]
      }
    ]
  },
  {
    "filePath": "/home/david/Security-kit/src/postMessage.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unsafe-assignment",
        "severity": 2,
        "message": "Unsafe assignment of an `any` value.",
        "line": 228,
        "column": 11,
        "nodeType": "VariableDeclarator",
        "messageId": "anyAssignment",
        "endLine": 228,
        "endColumn": 47
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-assignment",
        "severity": 2,
        "message": "Unsafe assignment of an `any` value.",
        "line": 416,
        "column": 9,
        "nodeType": "VariableDeclarator",
        "messageId": "anyAssignment",
        "endLine": 416,
        "endColumn": 59
      },
      {
        "ruleId": "sonarjs/cognitive-complexity",
        "severity": 2,
        "message": "Refactor this function to reduce its Cognitive Complexity from 20 to the 18 allowed.",
        "line": 1162,
        "column": 12,
        "nodeType": null,
        "messageId": "refactorFunction",
        "endLine": 1162,
        "endColumn": 33
      },
      {
        "ruleId": "sonarjs/no-ignored-exceptions",
        "severity": 2,
        "message": "Handle this exception or don't catch it at all.",
        "line": 1267,
        "column": 5,
        "nodeType": "CatchClause",
        "messageId": "handleException",
        "endLine": 1272,
        "endColumn": 4
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'e' is defined but never used.",
        "line": 1267,
        "column": 12,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 1267,
        "endColumn": 13
      },
      {
        "ruleId": "unicorn/prevent-abbreviations",
        "severity": 1,
        "message": "Please rename the variable `e`. Suggested names are: `error`, `event`. A more descriptive name will do too.",
        "line": 1267,
        "column": 12,
        "nodeType": "Identifier",
        "messageId": "suggestion",
        "endLine": 1267,
        "endColumn": 13
      }
    ],
    "suppressedMessages": [
      {
        "ruleId": "sonarjs/cognitive-complexity",
        "severity": 2,
        "message": "Refactor this function to reduce its Cognitive Complexity from 22 to the 18 allowed.",
        "line": 254,
        "column": 10,
        "nodeType": null,
        "messageId": "refactorFunction",
        "endLine": 254,
        "endColumn": 31,
        "suppressions": [
          {
            "kind": "directive",
            "justification": "Single-pass defensive validation requires conditional branches; splitting would harm auditability without real risk reduction."
          }
        ]
      },
      {
        "ruleId": "sonarjs/cognitive-complexity",
        "severity": 2,
        "message": "Refactor this function to reduce its Cognitive Complexity from 24 to the 18 allowed.",
        "line": 353,
        "column": 10,
        "nodeType": null,
        "messageId": "refactorFunction",
        "endLine": 353,
        "endColumn": 21,
        "suppressions": [
          {
            "kind": "directive",
            "justification": "Defensive conversions and filtering require explicit branches to stay auditable."
          }
        ]
      },
      {
        "ruleId": "functional/no-let",
        "severity": 2,
        "message": "Unexpected let, use const instead.",
        "line": 421,
        "column": 5,
        "nodeType": "VariableDeclaration",
        "messageId": "generic",
        "endLine": 421,
        "endColumn": 24,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "functional/immutable-data",
        "severity": 2,
        "message": "Modifying an existing object/array is not allowed.",
        "line": 468,
        "column": 5,
        "nodeType": "AssignmentExpression",
        "messageId": "generic",
        "endLine": 468,
        "endColumn": 64,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "sonarjs/cognitive-complexity",
        "severity": 2,
        "message": "Refactor this function to reduce its Cognitive Complexity from 39 to the 18 allowed.",
        "line": 486,
        "column": 10,
        "nodeType": null,
        "messageId": "refactorFunction",
        "endLine": 486,
        "endColumn": 20,
        "suppressions": [
          {
            "kind": "directive",
            "justification": "Iterative deep-freeze avoids recursion risks and requires controlled mutation locally."
          }
        ]
      },
      {
        "ruleId": "functional/prefer-readonly-type",
        "severity": 2,
        "message": "Only readonly arrays allowed.",
        "line": 501,
        "column": 16,
        "nodeType": "TSArrayType",
        "messageId": "array",
        "endLine": 501,
        "endColumn": 25,
        "fix": { "range": [16891, 16891], "text": "readonly " },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "functional/no-let",
        "severity": 2,
        "message": "Unexpected let, use const instead.",
        "line": 503,
        "column": 3,
        "nodeType": "VariableDeclaration",
        "messageId": "generic",
        "endLine": 503,
        "endColumn": 17,
        "suppressions": [
          { "kind": "directive", "justification": "" },
          { "kind": "directive", "justification": "" }
        ]
      },
      {
        "ruleId": "functional/immutable-data",
        "severity": 2,
        "message": "Modifying an array is not allowed.",
        "line": 521,
        "column": 21,
        "nodeType": "CallExpression",
        "messageId": "array",
        "endLine": 521,
        "endColumn": 32,
        "suppressions": [
          { "kind": "directive", "justification": "" },
          { "kind": "directive", "justification": "" }
        ]
      },
      {
        "ruleId": "functional/immutable-data",
        "severity": 2,
        "message": "Modifying an array is not allowed.",
        "line": 534,
        "column": 43,
        "nodeType": "CallExpression",
        "messageId": "array",
        "endLine": 534,
        "endColumn": 56,
        "suppressions": [
          { "kind": "directive", "justification": "" },
          { "kind": "directive", "justification": "" }
        ]
      },
      {
        "ruleId": "functional/immutable-data",
        "severity": 2,
        "message": "Modifying an array is not allowed.",
        "line": 539,
        "column": 43,
        "nodeType": "CallExpression",
        "messageId": "array",
        "endLine": 539,
        "endColumn": 56,
        "suppressions": [
          { "kind": "directive", "justification": "" },
          { "kind": "directive", "justification": "" }
        ]
      },
      {
        "ruleId": "sonarjs/cognitive-complexity",
        "severity": 2,
        "message": "Refactor this function to reduce its Cognitive Complexity from 50 to the 18 allowed.",
        "line": 564,
        "column": 17,
        "nodeType": null,
        "messageId": "refactorFunction",
        "endLine": 564,
        "endColumn": 38,
        "suppressions": [
          {
            "kind": "directive",
            "justification": "Multiple wire format validation and sanitization branches; splitting would harm auditability."
          }
        ]
      },
      {
        "ruleId": "functional/no-let",
        "severity": 2,
        "message": "Unexpected let, use const instead.",
        "line": 622,
        "column": 5,
        "nodeType": "VariableDeclaration",
        "messageId": "generic",
        "endLine": 622,
        "endColumn": 28,
        "suppressions": [
          {
            "kind": "directive",
            "justification": "Local serialization variable; scoped to block"
          }
        ]
      },
      {
        "ruleId": "functional/no-let",
        "severity": 2,
        "message": "Unexpected let, use const instead.",
        "line": 724,
        "column": 3,
        "nodeType": "VariableDeclaration",
        "messageId": "generic",
        "endLine": 729,
        "endColumn": 19,
        "suppressions": [
          {
            "kind": "directive",
            "justification": "Local parsing variables for parameter overloading; scoped to function"
          }
        ]
      },
      {
        "ruleId": "functional/no-let",
        "severity": 2,
        "message": "Unexpected let, use const instead.",
        "line": 731,
        "column": 3,
        "nodeType": "VariableDeclaration",
        "messageId": "generic",
        "endLine": 731,
        "endColumn": 73,
        "suppressions": [
          {
            "kind": "directive",
            "justification": "Local parsing variables for parameter overloading; scoped to function"
          }
        ]
      },
      {
        "ruleId": "functional/no-let",
        "severity": 2,
        "message": "Unexpected let, use const instead.",
        "line": 829,
        "column": 3,
        "nodeType": "VariableDeclaration",
        "messageId": "generic",
        "endLine": 829,
        "endColumn": 46,
        "suppressions": [
          {
            "kind": "directive",
            "justification": "Local validation loop; scoped to function"
          }
        ]
      },
      {
        "ruleId": "functional/immutable-data",
        "severity": 2,
        "message": "Modifying a set is not allowed.",
        "line": 835,
        "column": 7,
        "nodeType": "CallExpression",
        "messageId": "set",
        "endLine": 835,
        "endColumn": 30,
        "suppressions": [
          {
            "kind": "directive",
            "justification": "Local set building; safe operation"
          }
        ]
      },
      {
        "ruleId": "functional/no-let",
        "severity": 2,
        "message": "Unexpected let, use const instead.",
        "line": 850,
        "column": 3,
        "nodeType": "VariableDeclaration",
        "messageId": "generic",
        "endLine": 850,
        "endColumn": 52,
        "suppressions": [
          {
            "kind": "directive",
            "justification": "Local diagnostic state; scoped to function"
          }
        ]
      },
      {
        "ruleId": "functional/no-let",
        "severity": 2,
        "message": "Unexpected let, use const instead.",
        "line": 851,
        "column": 3,
        "nodeType": "VariableDeclaration",
        "messageId": "generic",
        "endLine": 851,
        "endColumn": 36,
        "suppressions": [
          {
            "kind": "directive",
            "justification": "Local diagnostic state; scoped to function"
          }
        ]
      },
      {
        "ruleId": "functional/immutable-data",
        "severity": 2,
        "message": "Modifying an existing object/array is not allowed.",
        "line": 877,
        "column": 7,
        "nodeType": "AssignmentExpression",
        "messageId": "generic",
        "endLine": 877,
        "endColumn": 44,
        "suppressions": [
          {
            "kind": "directive",
            "justification": "Local cache initialization; safe operation"
          }
        ]
      },
      {
        "ruleId": "functional/no-let",
        "severity": 2,
        "message": "Unexpected let, use const instead.",
        "line": 1234,
        "column": 5,
        "nodeType": "VariableDeclaration",
        "messageId": "generic",
        "endLine": 1234,
        "endColumn": 25,
        "suppressions": [
          {
            "kind": "directive",
            "justification": "Local parsed variable; scoped to function"
          }
        ]
      },
      {
        "ruleId": "functional/prefer-readonly-type",
        "severity": 2,
        "message": "A readonly modifier is required.",
        "line": 1248,
        "column": 25,
        "nodeType": "TSPropertySignature",
        "messageId": "property",
        "endLine": 1248,
        "endColumn": 51,
        "fix": { "range": [42863, 42863], "text": "readonly " },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "functional/prefer-readonly-type",
        "severity": 2,
        "message": "A readonly modifier is required.",
        "line": 1250,
        "column": 29,
        "nodeType": "TSPropertySignature",
        "messageId": "property",
        "endLine": 1250,
        "endColumn": 55,
        "fix": { "range": [42959, 42959], "text": "readonly " },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "functional/prefer-readonly-type",
        "severity": 2,
        "message": "A readonly modifier is required.",
        "line": 1251,
        "column": 33,
        "nodeType": "TSPropertySignature",
        "messageId": "property",
        "endLine": 1251,
        "endColumn": 59,
        "fix": { "range": [43038, 43038], "text": "readonly " },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "functional/prefer-readonly-type",
        "severity": 2,
        "message": "A readonly modifier is required.",
        "line": 1252,
        "column": 37,
        "nodeType": "TSPropertySignature",
        "messageId": "property",
        "endLine": 1252,
        "endColumn": 63,
        "fix": { "range": [43104, 43104], "text": "readonly " },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "functional/prefer-readonly-type",
        "severity": 2,
        "message": "A readonly modifier is required.",
        "line": 1256,
        "column": 9,
        "nodeType": "TSPropertySignature",
        "messageId": "property",
        "endLine": 1260,
        "endColumn": 19,
        "fix": { "range": [43192, 43192], "text": "readonly " },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "functional/no-let",
        "severity": 2,
        "message": "Unexpected let, use const instead.",
        "line": 1288,
        "column": 3,
        "nodeType": "VariableDeclaration",
        "messageId": "generic",
        "endLine": 1288,
        "endColumn": 17,
        "suppressions": [
          {
            "kind": "directive",
            "justification": "Local serialization state; scoped to function"
          }
        ]
      },
      {
        "ruleId": "functional/immutable-data",
        "severity": 2,
        "message": "Modifying an existing object/array is not allowed.",
        "line": 1304,
        "column": 7,
        "nodeType": "AssignmentExpression",
        "messageId": "generic",
        "endLine": 1304,
        "endColumn": 69,
        "suppressions": [
          {
            "kind": "directive",
            "justification": "Building new null-proto object; local writes to fresh object are safe"
          }
        ]
      },
      {
        "ruleId": "functional/no-let",
        "severity": 2,
        "message": "Unexpected let, use const instead.",
        "line": 1322,
        "column": 1,
        "nodeType": "VariableDeclaration",
        "messageId": "generic",
        "endLine": 1322,
        "endColumn": 69,
        "suppressions": [
          {
            "kind": "directive",
            "justification": "Controlled, file-local state for salt memoization; audited"
          }
        ]
      },
      {
        "ruleId": "functional/no-let",
        "severity": 2,
        "message": "Unexpected let, use const instead.",
        "line": 1329,
        "column": 1,
        "nodeType": "VariableDeclaration",
        "messageId": "generic",
        "endLine": 1329,
        "endColumn": 65,
        "suppressions": [
          {
            "kind": "directive",
            "justification": "Controlled, file-local state for salt memoization; audited"
          }
        ]
      },
      {
        "ruleId": "functional/no-let",
        "severity": 2,
        "message": "Unexpected let, use const instead.",
        "line": 1333,
        "column": 1,
        "nodeType": "VariableDeclaration",
        "messageId": "generic",
        "endLine": 1333,
        "endColumn": 59,
        "suppressions": [
          {
            "kind": "directive",
            "justification": "Controlled, file-local state for diagnostics flag; audited"
          }
        ]
      },
      {
        "ruleId": "functional/no-let",
        "severity": 2,
        "message": "Unexpected let, use const instead.",
        "line": 1340,
        "column": 1,
        "nodeType": "VariableDeclaration",
        "messageId": "generic",
        "endLine": 1340,
        "endColumn": 57,
        "suppressions": [
          {
            "kind": "directive",
            "justification": "Controlled, file-local state for failure backoff; audited"
          }
        ]
      },
      {
        "ruleId": "functional/no-let",
        "severity": 2,
        "message": "Unexpected let, use const instead.",
        "line": 1425,
        "column": 12,
        "nodeType": "VariableDeclaration",
        "messageId": "generic",
        "endLine": 1425,
        "endColumn": 25,
        "suppressions": [
          {
            "kind": "directive",
            "justification": "Local loop index and buffer initialization; scoped"
          }
        ]
      },
      {
        "ruleId": "functional/immutable-data",
        "severity": 2,
        "message": "Modifying an existing object/array is not allowed.",
        "line": 1426,
        "column": 9,
        "nodeType": "AssignmentExpression",
        "messageId": "generic",
        "endLine": 1426,
        "endColumn": 79,
        "suppressions": [
          {
            "kind": "directive",
            "justification": "Local loop index and buffer initialization; scoped"
          }
        ]
      },
      {
        "ruleId": "functional/no-let",
        "severity": 2,
        "message": "Unexpected let, use const instead.",
        "line": 1538,
        "column": 3,
        "nodeType": "VariableDeclaration",
        "messageId": "generic",
        "endLine": 1538,
        "endColumn": 39,
        "suppressions": [
          {
            "kind": "directive",
            "justification": "Local salt buffer variable; scoped to function"
          }
        ]
      },
      {
        "ruleId": "functional/no-let",
        "severity": 2,
        "message": "Unexpected let, use const instead.",
        "line": 1566,
        "column": 3,
        "nodeType": "VariableDeclaration",
        "messageId": "generic",
        "endLine": 1566,
        "endColumn": 38,
        "suppressions": [
          {
            "kind": "directive",
            "justification": "Local accumulator for hash computation; scoped to function"
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-call",
        "severity": 2,
        "message": "Unsafe call of a(n) `Function` typed value.",
        "line": 1702,
        "column": 40,
        "nodeType": "TSAsExpression",
        "messageId": "unsafeCall",
        "endLine": 1702,
        "endColumn": 59,
        "suppressions": [
          {
            "kind": "directive",
            "justification": "Runtime guard ensures request is a function; test environment only"
          }
        ]
      }
    ],
    "errorCount": 5,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "// SPDX-License-Identifier: MIT\n// SPDX-FileCopyrightText: © 2025 David Osipov <personal@david-osipov.vision>\n\n/**\n * Hardened utilities for secure cross-context communication using `postMessage`.\n * - Enforces strict origin validation\n * - Converts incoming payloads to null-prototype objects to prevent prototype pollution\n * - Optional schema or function validators (required in production)\n * - Safe diagnostic/fingerprinting behavior with crypto checks\n *\n * Important runtime behavior changes (compared to earlier draft):\n * - No top-level `await`. Use synchronous environment checks at creation time.\n * - Production requires crypto availability for diagnostics; creation will fail fast\n *   if `crypto.getRandomValues` is not present.\n * - `expectedSource` may be a comparator function for robust cross-context matching.\n *\n * This file contains a few carefully-scoped `eslint-disable` comments to allow\n * low-level, audited mutations (null-proto creation, controlled caches).\n */\n\n/* eslint-disable functional/no-let, functional/immutable-data */\n\nimport {\n  InvalidParameterError,\n  InvalidConfigurationError,\n  CryptoUnavailableError,\n  TransferableNotAllowedError,\n  EncodingError,\n  sanitizeErrorForLogs,\n} from \"./errors\";\nimport { ensureCrypto } from \"./state\";\nimport { secureDevLog as secureDevelopmentLog } from \"./utils\";\nimport { arrayBufferToBase64 } from \"./encoding-utils\";\nimport { SHARED_ENCODER } from \"./encoding\";\nimport { isForbiddenKey } from \"./constants\";\nimport { environment } from \"./environment\";\nimport { normalizeOrigin as normalizeUrlOrigin } from \"./url\";\n\n// --- Interfaces and Types ---\n\nexport interface SecurePostMessageOptions {\n  readonly targetWindow: Window;\n  readonly payload: unknown;\n  readonly targetOrigin: string;\n  readonly wireFormat?: \"json\" | \"structured\" | \"auto\";\n  readonly sanitize?: boolean; // default true\n  readonly allowTransferables?: boolean; // default false\n  readonly allowTypedArrays?: boolean; // default false\n}\n\nexport interface SecurePostMessageListener {\n  readonly destroy: () => void;\n}\n\nexport type SchemaValue = \"string\" | \"number\" | \"boolean\" | \"object\" | \"array\";\n\nexport type MessageListenerContext = {\n  readonly origin: string;\n  readonly source?: unknown;\n  readonly ports?: readonly MessagePort[] | undefined;\n  readonly event?: MessageEvent;\n};\n\nexport type CreateSecurePostMessageListenerOptions = {\n  readonly allowedOrigins: readonly string[];\n  readonly onMessage: (data: unknown, context?: MessageListenerContext) => void;\n  readonly validate?: ((d: unknown) => boolean) | Record<string, SchemaValue>;\n  // New hardening options\n  readonly allowOpaqueOrigin?: boolean; // default false\n  readonly expectedSource?: Window | MessagePort | ((s: unknown) => boolean); // optional stronger binding, now accepts comparator\n  readonly allowExtraProps?: boolean; // default false when using schema\n  readonly enableDiagnostics?: boolean; // default false; gates fingerprints in prod\n  // freezePayload: when true (default), the sanitized payload will be deeply frozen\n  // before being passed to the consumer. When false, callers accept responsibility\n  // for not mutating the payload.\n  readonly freezePayload?: boolean;\n  readonly wireFormat?: \"json\" | \"structured\" | \"auto\"; // default json\n  readonly deepFreezeNodeBudget?: number;\n  readonly allowTransferables?: boolean; // default false: disallow transferables like MessagePort/ArrayBuffer\n  readonly allowTypedArrays?: boolean; // default false: disallow TypedArray/DataView/ArrayBuffer without opt-in\n};\nexport { validateTransferables };\n\n// --- Constants ---\n\nexport const POSTMESSAGE_MAX_PAYLOAD_BYTES = 32 * 1024;\nexport const POSTMESSAGE_MAX_PAYLOAD_DEPTH = 8;\n\n// Small default limits for diagnostics to prevent DoS via expensive hashing\nconst DEFAULT_DIAGNOSTIC_BUDGET = 5; // fingerprints per minute\n\n// Budget for deep-freeze traversal to avoid CPU/DoS via very wide objects\nconst DEFAULT_DEEP_FREEZE_NODE_BUDGET = 5000; // tunable\n\n// --- Utilities ---\n\n/**\n * Safe \"now\" helper that works in browser & node-like hosts.\n */\nfunction now(): number {\n  return typeof performance !== \"undefined\" &&\n    typeof performance.now === \"function\"\n    ? performance.now()\n    : Date.now();\n}\n\n/**\n * Synchronous check for presence of a secure RNG in the environment.\n * This intentionally does not await `ensureCrypto()` because some environments\n * require an async initialization; we need a fast, non-async gate for\n * production fail-fast behavior.\n */\nfunction syncCryptoAvailable(): boolean {\n  try {\n    // globalThis.crypto.getRandomValues presence is the minimal sync capability.\n    // In Node 20+, globalThis.crypto is present. In browsers, it is present.\n    // This is a conservative check; ensureCrypto() may still be used for\n    // full async work (e.g., subtle).\n    const g = globalThis as unknown as { readonly crypto?: unknown };\n    if (!g || typeof g.crypto === \"undefined\") return false;\n    const c = g.crypto as unknown as { readonly getRandomValues?: unknown };\n    return !!(c && typeof c.getRandomValues === \"function\");\n  } catch {\n    return false;\n  }\n}\n\n// Centralized crypto availability checker with consistent error handling and logging\nfunction checkCryptoAvailabilityForSecurityFeature(\n  featureName: string,\n  requireInProduction = true,\n): void {\n  if (!syncCryptoAvailable()) {\n    if (requireInProduction && environment.isProduction) {\n      // Production requires crypto for security guarantees\n      try {\n        _diagnosticsDisabledDueToNoCryptoInProduction = true;\n        secureDevelopmentLog(\n          \"error\",\n          \"postMessage\",\n          `Secure crypto unavailable in production for ${featureName}`,\n          {},\n        );\n      } catch {\n        /* best-effort logging */\n      }\n      throw new CryptoUnavailableError(\n        `Secure crypto required in production for ${featureName}`,\n      );\n    } else if (environment.isProduction) {\n      // Non-critical crypto usage in production - disable diagnostics\n      try {\n        _diagnosticsDisabledDueToNoCryptoInProduction = true;\n        secureDevelopmentLog(\n          \"warn\",\n          \"postMessage\",\n          `Secure crypto unavailable in production; ${featureName} disabled`,\n          {},\n        );\n      } catch {\n        /* best-effort logging */\n      }\n    }\n  }\n}\n\n// Helper: call consumer and centralize async rejection/sync throw handling so\n// the main `handler` function stays small and easier to lint/verify.\nfunction invokeConsumerSafely(\n  consumer: (d: unknown, c?: MessageListenerContext) => void,\n  data: unknown,\n  contextOrOrigin: string | MessageListenerContext,\n): void {\n  // Normalize origin for logging regardless of whether a raw origin string\n  // or the richer MessageListenerContext was provided.\n  const originForLogs =\n    typeof contextOrOrigin === \"string\"\n      ? contextOrOrigin\n      : contextOrOrigin?.origin;\n\n  try {\n    const result = consumer(\n      data,\n      typeof contextOrOrigin === \"string\" ? undefined : contextOrOrigin,\n    );\n    Promise.resolve(result).catch((asyncError) => {\n      try {\n        secureDevelopmentLog(\"error\", \"postMessage\", \"Listener handler error\", {\n          origin: originForLogs,\n          error: sanitizeErrorForLogs(asyncError),\n        });\n      } catch {\n        /* best-effort logging */\n      }\n    });\n  } catch (error: unknown) {\n    try {\n      secureDevelopmentLog(\"error\", \"postMessage\", \"Listener handler error\", {\n        origin: originForLogs,\n        error: sanitizeErrorForLogs(error),\n      });\n    } catch {\n      /* best-effort logging */\n    }\n  }\n}\n\nfunction isArrayBufferViewSafe(value: unknown): value is ArrayBufferView {\n  try {\n    return (\n      typeof ArrayBuffer !== \"undefined\" &&\n      typeof ArrayBuffer.isView === \"function\" &&\n      ArrayBuffer.isView(value as ArrayBufferView)\n    );\n  } catch {\n    return false;\n  }\n}\n\n/**\n * Safely gets the constructor name of an object, handling cross-realm scenarios.\n * @param value The value to get the constructor name for.\n * @returns The constructor name as a string, or undefined if it cannot be determined.\n */\nfunction safeCtorName(value: unknown): string | undefined {\n  if (value === null || typeof value !== \"object\") return undefined;\n  try {\n    const proto = Object.getPrototypeOf(value);\n    if (!proto) return undefined;\n    const protoWithConstructor = proto as Record<string, unknown>;\n    const constructor = protoWithConstructor.constructor;\n    if (!constructor || typeof constructor !== \"function\") {\n      return undefined;\n    }\n    const ctor = constructor as Function;\n    const namePropertyValue = (ctor as { readonly name?: unknown }).name;\n    const nameProperty =\n      typeof namePropertyValue === \"string\" ? namePropertyValue : undefined;\n    const maybeName =\n      typeof nameProperty === \"string\" ? nameProperty : undefined;\n    return typeof maybeName === \"string\" ? maybeName : undefined;\n  } catch {\n    return undefined;\n  }\n}\n\n// --- Internal Security Helpers ---\n\n/**\n * Validates that payload does not contain disallowed transferable objects\n * like MessagePort, ArrayBuffer, or SharedArrayBuffer unless explicitly allowed.\n */\n/* eslint-disable-next-line sonarjs/cognitive-complexity -- Single-pass defensive validation requires conditional branches; splitting would harm auditability without real risk reduction. */\nfunction validateTransferables(\n  payload: unknown,\n  allowTransferables: boolean,\n  allowTypedArrays: boolean,\n  depth = 0,\n  maxDepth = POSTMESSAGE_MAX_PAYLOAD_DEPTH,\n  visited?: WeakSet<object>,\n): void {\n  if (depth > maxDepth) return; // depth check handled elsewhere\n  if (payload === null || typeof payload !== \"object\") return;\n\n  // Handle circular references\n  visited ??= new WeakSet<object>();\n  if (visited.has(payload as object)) return;\n\n  visited.add(payload as object);\n\n  // Check for disallowed transferable types\n  const ctorName = safeCtorName(payload);\n\n  // MessagePort and other transferable objects\n  if (\n    ctorName === \"MessagePort\" ||\n    ctorName === \"ReadableStream\" ||\n    ctorName === \"WritableStream\" ||\n    ctorName === \"TransformStream\"\n  ) {\n    if (!allowTransferables) {\n      throw new TransferableNotAllowedError(\n        `Transferable object ${ctorName} is not allowed unless allowTransferables=true`,\n      );\n    }\n  }\n\n  // ArrayBuffer and typed arrays\n  if (ctorName === \"ArrayBuffer\" || ctorName === \"SharedArrayBuffer\") {\n    if (!allowTypedArrays) {\n      throw new TransferableNotAllowedError(\n        `${ctorName} is not allowed unless allowTypedArrays=true`,\n      );\n    }\n  }\n\n  // TypedArray and DataView check\n  try {\n    if (isArrayBufferViewSafe(payload)) {\n      if (!allowTypedArrays) {\n        throw new TransferableNotAllowedError(\n          \"TypedArray/DataView is not allowed unless allowTypedArrays=true\",\n        );\n      }\n    }\n  } catch {\n    // If ArrayBuffer.isView throws, continue\n  }\n\n  // Recursively check nested objects and arrays\n  if (Array.isArray(payload)) {\n    for (const item of payload) {\n      validateTransferables(\n        item,\n        allowTransferables,\n        allowTypedArrays,\n        depth + 1,\n        maxDepth,\n        visited,\n      );\n    }\n    return;\n  }\n\n  for (const key of Object.keys(payload as Record<string, unknown>)) {\n    try {\n      const desc = Object.getOwnPropertyDescriptor(\n        payload as Record<string, unknown>,\n        key,\n      );\n      if (desc && Object.hasOwn(desc, \"value\")) {\n        const descValue = desc.value as unknown;\n        validateTransferables(\n          descValue,\n          allowTransferables,\n          allowTypedArrays,\n          depth + 1,\n          maxDepth,\n          visited,\n        );\n      }\n    } catch {\n      continue;\n    }\n  }\n}\n\n/**\n * Converts objects to null-prototype objects to prevent prototype pollution attacks.\n * Also enforces depth limits and strips forbidden keys.\n */\n/* eslint-disable-next-line sonarjs/cognitive-complexity -- Defensive conversions and filtering require explicit branches to stay auditable. */\nfunction toNullProto(\n  object: unknown,\n  depth = 0,\n  maxDepth = POSTMESSAGE_MAX_PAYLOAD_DEPTH,\n  visited?: WeakSet<object>,\n): unknown {\n  if (depth > maxDepth) {\n    throw new InvalidParameterError(\n      `Payload depth exceeds limit of ${maxDepth}`,\n    );\n  }\n\n  if (object === null || typeof object !== \"object\") {\n    return object;\n  }\n\n  // Host-type rejection: typed arrays and other exotic host objects should be rejected.\n  try {\n    // ArrayBuffer view check covers TypedArray and DataView\n    if (isArrayBufferViewSafe(object)) {\n      throw new InvalidParameterError(\n        \"Unsupported typed-array or DataView in payload.\",\n      );\n    }\n  } catch {\n    // If ArrayBuffer.isView throws (very exotic hosts), fall through to other checks\n  }\n\n  const ctorName = safeCtorName(object);\n  if (\n    ctorName === \"Map\" ||\n    ctorName === \"Set\" ||\n    ctorName === \"Date\" ||\n    ctorName === \"RegExp\" ||\n    ctorName === \"ArrayBuffer\" ||\n    ctorName === \"DataView\" ||\n    ctorName === \"SharedArrayBuffer\" ||\n    ctorName === \"WeakMap\" ||\n    ctorName === \"WeakSet\" ||\n    ctorName === \"Blob\" ||\n    ctorName === \"File\" ||\n    ctorName === \"URL\"\n  ) {\n    throw new InvalidParameterError(\n      `Unsupported object type in payload: ${String(ctorName ?? \"Unknown\")}`,\n    );\n  }\n\n  // Use a WeakSet per top-level invocation to detect cycles.\n  visited ??= new WeakSet<object>();\n  if (visited.has(object as object)) {\n    throw new InvalidParameterError(\"Circular reference detected in payload.\");\n  }\n  visited.add(object as object);\n\n  if (Array.isArray(object)) {\n    // Map children using the same visited set so cycles across array/object are detected.\n    const mapped = (object as readonly unknown[]).map((item) =>\n      toNullProto(item, depth + 1, maxDepth, visited),\n    );\n    return mapped;\n  }\n\n  const out: Record<string, unknown> = Object.create(null);\n  // iterate string keys only; ignore symbol-keyed properties to avoid\n  // invoking exotic symbol-based traps or leaking internals\n  for (const key of Object.keys(object as Record<string, unknown>)) {\n    // Use safe property access to avoid invoking getters\n    let value: unknown;\n    try {\n      const desc = Object.getOwnPropertyDescriptor(\n        object as Record<string, unknown>,\n        key,\n      );\n      if (\n        desc &&\n        (typeof desc.get === \"function\" || typeof desc.set === \"function\")\n      ) {\n        // Skip accessor properties to avoid executing untrusted getters\n        continue;\n      }\n      if (desc && Object.hasOwn(desc, \"value\")) {\n        const descValueValue = desc.value as unknown;\n        value = descValueValue;\n      } else {\n        // Fallback, but guard in try/catch\n        const objectValueRaw = (object as Record<string, unknown>)[key];\n        const objectValue = objectValueRaw as unknown;\n        value = objectValue as unknown;\n      }\n    } catch (error: unknown) {\n      // If property access throws, skip it but log best-effort in dev\n      try {\n        secureDevelopmentLog(\n          \"warn\",\n          \"postMessage\",\n          \"Skipped property due to throwing getter\",\n          { key, error: sanitizeErrorForLogs(error) },\n        );\n      } catch {\n        /* best-effort */\n      }\n      continue;\n    }\n\n    // Skip forbidden keys that could enable prototype pollution\n    if (isForbiddenKey(key)) {\n      continue;\n    }\n\n    // Additional defensive check for prototype-related keys\n    if (key === \"__proto__\" || key === \"constructor\" || key === \"prototype\") {\n      continue;\n    }\n\n    out[key] = toNullProto(value, depth + 1, maxDepth, visited);\n  }\n\n  return out;\n}\n\n// Helper: detect common localhost hostnames and IPv6 loopback forms.\nfunction isHostnameLocalhost(hostname: string): boolean {\n  if (!hostname) return false;\n  const h = hostname.toLowerCase().trim();\n  if (h === \"localhost\" || h === \"127.0.0.1\" || h === \"::1\") return true;\n  if (h.startsWith(\"127.\")) return true; // 127.x.x.x\n  if (h.startsWith(\"::ffff:127.\")) return true; // IPv4-mapped IPv6\n  return false;\n}\n\n// Iterative deep-freeze with node budget to avoid deep recursion and DoS via wide structures.\n/* eslint-disable-next-line sonarjs/cognitive-complexity -- Iterative deep-freeze avoids recursion risks and requires controlled mutation locally. */\nfunction deepFreeze<T>(\n  object: T,\n  nodeBudget = DEFAULT_DEEP_FREEZE_NODE_BUDGET,\n): T {\n  if (!(object && typeof object === \"object\")) return object;\n\n  // Quick guard: attempt to freeze shallowly first (best-effort)\n  try {\n    Object.freeze(object as unknown as object);\n  } catch {\n    // ignore errors from freezing exotic host objects\n  }\n\n  /* eslint-disable functional/no-let, functional/immutable-data, functional/prefer-readonly-type */\n  // Iterative traversal stack (mutable local) — safe because this is internal state\n  const stack: unknown[] = [object as unknown];\n  const seen = new WeakSet<object>();\n  let nodes = 0;\n\n  while (stack.length > 0) {\n    if (++nodes > nodeBudget) {\n      // Budget exceeded; log and stop traversal to avoid CPU exhaustion\n      try {\n        secureDevelopmentLog(\n          \"warn\",\n          \"postMessage\",\n          \"deepFreeze budget exceeded\",\n          { nodeBudget },\n        );\n      } catch {\n        /* best-effort */\n      }\n      break;\n    }\n\n    const current = stack.pop();\n    if (!current || typeof current !== \"object\") continue;\n    if (seen.has(current as object)) continue;\n    seen.add(current as object);\n\n    try {\n      try {\n        Object.freeze(current as object);\n      } catch {\n        // ignore freeze errors\n      }\n      if (Array.isArray(current)) {\n        for (const v of current) {\n          if (v && typeof v === \"object\") stack.push(v);\n        }\n      } else {\n        // Use Object.values to iterate own enumerable values (consistent with toNullProto)\n        for (const v of Object.values(current as Record<string, unknown>)) {\n          if (v && typeof v === \"object\") stack.push(v);\n        }\n      }\n    } catch (error: unknown) {\n      // Best effort logging\n      try {\n        secureDevelopmentLog(\n          \"warn\",\n          \"postMessage\",\n          \"deepFreeze encountered error while traversing object\",\n          { error: sanitizeErrorForLogs(error) },\n        );\n      } catch {\n        /* ignore */\n      }\n    }\n  }\n  /* eslint-enable functional/no-let, functional/immutable-data */\n\n  return object;\n}\n\n// --- Public API ---\n\n/* eslint-disable-next-line sonarjs/cognitive-complexity -- Multiple wire format validation and sanitization branches; splitting would harm auditability. */\nexport function sendSecurePostMessage(options: SecurePostMessageOptions): void {\n  const { targetWindow, payload, targetOrigin } = options;\n  const wireFormat = (options as SecurePostMessageOptions).wireFormat ?? \"json\";\n  const sanitizeOutgoing =\n    (options as SecurePostMessageOptions).sanitize !== false; // default true\n  if (!targetWindow)\n    throw new InvalidParameterError(\"targetWindow must be provided.\");\n  if (targetOrigin === \"*\")\n    throw new InvalidParameterError(\"targetOrigin cannot be a wildcard ('*').\");\n  if (!targetOrigin || typeof targetOrigin !== \"string\")\n    throw new InvalidParameterError(\"targetOrigin must be a specific string.\");\n\n  // Enforce absolute origin and prefer HTTPS (allow localhost for dev)\n  try {\n    const parsed = new URL(targetOrigin);\n    // Enforce that an origin string does not include a path/search/hash\n    if (\n      (parsed.pathname && parsed.pathname !== \"/\") ||\n      parsed.search ||\n      parsed.hash\n    ) {\n      throw new InvalidParameterError(\n        \"targetOrigin must be a pure origin (no path, query, or fragment).\",\n      );\n    }\n    const isLocalhost = isHostnameLocalhost(parsed.hostname);\n    if (parsed.origin === \"null\") {\n      throw new InvalidParameterError(\"targetOrigin 'null' is not allowed.\");\n    }\n    if (parsed.protocol !== \"https:\" && !isLocalhost) {\n      throw new InvalidParameterError(\n        \"targetOrigin must use https: (localhost allowed for dev).\",\n      );\n    }\n  } catch (error: unknown) {\n    // Log sanitized parse error and fail loudly per \"Fail Loudly, Fail Safely\" policy.\n    try {\n      secureDevelopmentLog(\n        \"warn\",\n        \"postMessage\",\n        \"Invalid targetOrigin provided\",\n        {\n          targetOrigin,\n          error: sanitizeErrorForLogs(error),\n        },\n      );\n    } catch {\n      // best-effort logging; do not leak raw error details\n    }\n    throw new InvalidParameterError(\n      \"targetOrigin must be an absolute origin, e.g. 'https://example.com'.\",\n    );\n  }\n\n  // Handle wire formats\n  if (wireFormat === \"json\") {\n    // Serialize first to validate JSON-serializability and enforce size limits\n    /* eslint-disable-next-line functional/no-let -- Local serialization variable; scoped to block */\n    let serialized: string;\n    try {\n      const toSend = sanitizeOutgoing ? toNullProto(payload) : payload;\n      serialized = JSON.stringify(toSend);\n    } catch {\n      // JSON.stringify throws TypeError on circular structures\n      throw new InvalidParameterError(\"Payload must be JSON-serializable.\");\n    }\n\n    // Enforce max payload bytes before sending\n    const bytes = SHARED_ENCODER.encode(serialized);\n    if (bytes.length > POSTMESSAGE_MAX_PAYLOAD_BYTES) {\n      throw new InvalidParameterError(\n        `Payload exceeds maximum size of ${POSTMESSAGE_MAX_PAYLOAD_BYTES} bytes.`,\n      );\n    }\n\n    try {\n      targetWindow.postMessage(serialized, targetOrigin);\n    } catch (error: unknown) {\n      if (error instanceof TypeError) {\n        throw new InvalidParameterError(\"Payload must be JSON-serializable.\");\n      }\n      throw error;\n    }\n    return;\n  }\n\n  if (wireFormat === \"structured\" || wireFormat === \"auto\") {\n    // Structured: allow posting non-string data. 'auto' may be downgraded on receive.\n    // By default we sanitize outgoing payloads to null-proto version to avoid prototype pollution.\n    const allowTransferablesOutgoing = options.allowTransferables ?? false;\n    const allowTypedArraysOutgoing = options.allowTypedArrays ?? false;\n\n    // Fail-fast on incompatible options combination\n    if (sanitizeOutgoing && allowTypedArraysOutgoing) {\n      throw new InvalidParameterError(\n        \"Incompatible options: sanitize=true is incompatible with allowTypedArrays=true. \" +\n          \"To send TypedArray/DataView/ArrayBuffer, set sanitize=false and ensure allowTypedArrays=true.\",\n      );\n    }\n\n    // Validate transferables before any processing\n    try {\n      validateTransferables(\n        payload,\n        allowTransferablesOutgoing,\n        allowTypedArraysOutgoing,\n      );\n    } catch (error: unknown) {\n      if (error instanceof TransferableNotAllowedError) {\n        throw error; // Re-throw specific transferable errors\n      }\n      throw new InvalidParameterError(\n        \"Payload validation failed: \" +\n          String((error as Error)?.message ?? String(error)),\n      );\n    }\n\n    if (sanitizeOutgoing) {\n      try {\n        const sanitized = toNullProto(payload);\n        // sanitized is a JSON-safe structure (null-proto or primitives)\n        targetWindow.postMessage(sanitized, targetOrigin);\n        return;\n      } catch (error: unknown) {\n        if (error instanceof TransferableNotAllowedError) {\n          throw error; // Re-throw transferable errors\n        }\n        const errorMessage =\n          error instanceof Error ? error.message : `${String(error)}`;\n        throw new InvalidParameterError(\n          \"Structured-clone payload contains unsupported host objects or circular references: \" +\n            errorMessage,\n        );\n      }\n    }\n    // If sanitize disabled, attempt to post as-is but transferables were already validated above\n    try {\n      // payload was validated for transferables above; assert safe typing for postMessage\n      targetWindow.postMessage(payload, targetOrigin);\n      return;\n    } catch (error: unknown) {\n      const errorMessage =\n        error instanceof Error ? error.message : String(error);\n      throw new InvalidParameterError(\n        \"Failed to post structured payload: ensure payload is structured-cloneable: \" +\n          errorMessage,\n      );\n    }\n  }\n\n  throw new InvalidParameterError(\"Unsupported wireFormat\");\n}\n\nexport function createSecurePostMessageListener(\n  allowedOriginsOrOptions:\n    | readonly string[]\n    | CreateSecurePostMessageListenerOptions,\n  onMessageOptional?: (data: unknown) => void,\n): SecurePostMessageListener {\n  /* eslint-disable functional/no-let -- Local parsing variables for parameter overloading; scoped to function */\n  let allowedOrigins: readonly string[] | undefined,\n    onMessage: (data: unknown) => void,\n    validator:\n      | ((d: unknown) => boolean)\n      | Record<string, SchemaValue>\n      | undefined;\n\n  let optionsObject: CreateSecurePostMessageListenerOptions | undefined;\n  /* eslint-enable functional/no-let */\n\n  if (Array.isArray(allowedOriginsOrOptions)) {\n    allowedOrigins = allowedOriginsOrOptions;\n    if (!onMessageOptional) {\n      throw new InvalidParameterError(\n        \"onMessage callback is required when passing allowed origins array.\",\n      );\n    }\n    onMessage = onMessageOptional as (data: unknown) => void;\n  } else {\n    optionsObject =\n      allowedOriginsOrOptions as CreateSecurePostMessageListenerOptions;\n    allowedOrigins = optionsObject.allowedOrigins;\n    onMessage = optionsObject.onMessage;\n    validator = optionsObject.validate;\n  }\n\n  // Production-time synchronous crypto availability check:\n  checkCryptoAvailabilityForSecurityFeature(\"postMessage diagnostics\", true);\n\n  // In production, require explicit channel binding and a validator to avoid\n  // creating a listener that accepts messages from any origin/source.\n  const hasAllowedOrigins =\n    Array.isArray(allowedOrigins) && allowedOrigins.length > 0;\n  const hasExpectedSource =\n    typeof optionsObject?.expectedSource !== \"undefined\";\n  if (environment.isProduction && !(hasAllowedOrigins || hasExpectedSource)) {\n    throw new InvalidConfigurationError(\n      \"createSecurePostMessageListener requires 'allowedOrigins' or 'expectedSource' in production.\",\n    );\n  }\n\n  // If production, require validator presence to force positive validation\n  if (environment.isProduction && !validator) {\n    throw new InvalidConfigurationError(\n      \"createSecurePostMessageListener requires 'validate' in production.\",\n    );\n  }\n\n  // Lock configuration at creation time to prevent TOCTOU attacks\n  // Build canonical options object and freeze it to prevent mutation\n  const finalOptions = (\n    optionsObject\n      ? { ...optionsObject, allowedOrigins: optionsObject.allowedOrigins ?? [] }\n      : {\n          allowedOrigins: allowedOrigins ?? [],\n          onMessage,\n          validate: validator,\n          allowOpaqueOrigin: false,\n          expectedSource: undefined,\n          allowExtraProps: false,\n          enableDiagnostics: false,\n          freezePayload: true,\n          wireFormat: \"json\",\n          deepFreezeNodeBudget: DEFAULT_DEEP_FREEZE_NODE_BUDGET,\n          allowTransferables: false,\n          allowTypedArrays: false,\n        }\n  ) as CreateSecurePostMessageListenerOptions;\n  Object.freeze(finalOptions);\n\n  // Extract immutable locals to prevent runtime configuration changes\n  const validatorLocal = finalOptions.validate;\n  const expectedSourceLocal = finalOptions.expectedSource;\n  const allowExtraPropertiesLocal = finalOptions.allowExtraProps ?? false;\n  const freezePayloadLocal = finalOptions.freezePayload !== false;\n  const enableDiagnosticsLocal = !!finalOptions.enableDiagnostics;\n  const wireFormatLocal = finalOptions.wireFormat ?? \"json\";\n  const allowTransferablesLocal = !!finalOptions.allowTransferables;\n  const allowTypedArraysLocal = !!finalOptions.allowTypedArrays;\n  const allowOpaqueOriginLocal = !!finalOptions.allowOpaqueOrigin;\n  /* deepFreezeNodeBudgetLocal intentionally unused here; use finalOptions.deepFreezeNodeBudget where needed */\n\n  // Normalize origins to canonical form to avoid mismatches like :443 vs default\n  function normalizeOrigin(o: string): string {\n    try {\n      // Reuse shared URL normalization\n      const norm = normalizeUrlOrigin(o);\n      // Validate canonicalization by parsing norm\n      const u = new URL(norm);\n      if (u.origin === \"null\") throw new InvalidParameterError(\"opaque origin\");\n      const isLocalhost = isHostnameLocalhost(u.hostname);\n      if (u.protocol !== \"https:\" && !isLocalhost)\n        throw new InvalidParameterError(\"insecure origin\");\n      return norm;\n    } catch {\n      throw new InvalidParameterError(\n        `Invalid allowed origin '${o}'. Use an absolute origin 'https://example.com' or 'http://localhost'.`,\n      );\n    }\n  }\n\n  // Build the canonical allowed origin set and an abort controller for the\n  // event listener lifecycle. If any origin is invalid, collect them and\n  // throw a single informative error.\n  /* eslint-disable functional/no-let -- Local validation loop; scoped to function */\n  let invalidOrigins: readonly string[] = [];\n  const allowedOriginSet = new Set<string>();\n  for (const o of allowedOrigins || []) {\n    try {\n      const n = normalizeOrigin(o);\n      /* eslint-disable-next-line functional/immutable-data -- Local set building; safe operation */\n      allowedOriginSet.add(n);\n    } catch {\n      invalidOrigins = [...invalidOrigins, o];\n    }\n  }\n  /* eslint-enable functional/no-let */\n  if (invalidOrigins.length > 0) {\n    throw new InvalidParameterError(\n      `Invalid allowedOrigins provided: ${invalidOrigins.join(\", \")}`,\n    );\n  }\n\n  const abortController = new AbortController();\n  // Diagnostic budget to limit expensive fingerprinting on the failure path\n  /* eslint-disable functional/no-let -- Local diagnostic state; scoped to function */\n  let diagnosticBudget = DEFAULT_DIAGNOSTIC_BUDGET;\n  let diagnosticLastRefill = now();\n  function canConsumeDiagnostic(): boolean {\n    const n = now();\n    if (n - diagnosticLastRefill > 60_000) {\n      diagnosticBudget = DEFAULT_DIAGNOSTIC_BUDGET;\n      diagnosticLastRefill = n;\n    }\n    if (diagnosticBudget > 0) {\n      diagnosticBudget -= 1;\n      return true;\n    }\n    return false;\n  }\n  /* eslint-enable functional/no-let */\n\n  // Module-scoped cache to avoid re-freezing identical object instances.\n  function getDeepFreezeCache(): WeakSet<object> | undefined {\n    try {\n      // Use an internal well-known symbol to attach a cache to the deepFreeze\n      const key = Symbol.for(\"__security_kit_deep_freeze_cache_v1\");\n      const holder = deepFreeze as unknown as Record<\n        symbol,\n        WeakSet<object> | undefined\n      >;\n      // Use nullish coalescing assignment when possible to avoid repeated lookups\n      /* eslint-disable-next-line functional/immutable-data -- Local cache initialization; safe operation */\n      holder[key] ??= new WeakSet<object>();\n      return holder[key];\n    } catch {\n      return undefined;\n    }\n  }\n\n  function freezePayloadIfNeeded(payload: unknown): void {\n    const shouldFreeze = finalOptions.freezePayload !== false; // default true\n    if (!shouldFreeze) return;\n    if (payload == undefined || typeof payload !== \"object\") return;\n    const asObject = payload as object;\n    const cache = getDeepFreezeCache();\n    const nodeBudget =\n      finalOptions.deepFreezeNodeBudget ?? DEFAULT_DEEP_FREEZE_NODE_BUDGET;\n    if (cache) {\n      if (!cache.has(asObject)) {\n        try {\n          deepFreeze(asObject, nodeBudget);\n        } catch (error: unknown) {\n          try {\n            secureDevelopmentLog(\n              \"warn\",\n              \"postMessage\",\n              \"deepFreeze failed or budget exceeded while freezing payload\",\n              { error: sanitizeErrorForLogs(error) },\n            );\n          } catch {\n            /* best-effort */\n          }\n        }\n        try {\n          cache.add(asObject);\n        } catch {\n          /* ignore */\n        }\n      }\n      return;\n    }\n    try {\n      deepFreeze(asObject, nodeBudget);\n    } catch (error: unknown) {\n      try {\n        secureDevelopmentLog(\n          \"warn\",\n          \"postMessage\",\n          \"deepFreeze failed or budget exceeded while freezing payload\",\n          { error: sanitizeErrorForLogs(error) },\n        );\n      } catch {\n        /* ignore */\n      }\n    }\n  }\n\n  const handler = (event: MessageEvent) => {\n    // Validate origin and source using extracted helpers to reduce cognitive complexity\n    if (!isEventOriginAllowlisted(event)) return;\n    if (!isEventSourceExpected(event)) return;\n    try {\n      const data = parseMessageEventData(event);\n\n      if (!validatorLocal) {\n        // Defensive: validator should always be present due to creation-time checks\n        secureDevelopmentLog(\n          \"error\",\n          \"postMessage\",\n          \"Message validator missing at runtime\",\n          {},\n        );\n        return;\n      }\n\n      const validationResult = _validatePayloadWithExtras(\n        data,\n        validatorLocal,\n        allowExtraPropertiesLocal,\n      );\n      if (!validationResult.valid) {\n        // Gate expensive fingerprinting behind diagnostics and a small budget to avoid DoS\n        scheduleDiagnosticForFailedValidation(\n          event.origin,\n          validationResult.reason,\n          data,\n        );\n        return;\n      }\n\n      // Freeze payload by default (immutable) with an identity cache to avoid\n      // repeated work. Consumers can opt out with freezePayload: false.\n      if (freezePayloadLocal) freezePayloadIfNeeded(data);\n      // Build a small context object to give consumers access to event-level\n      // details such as origin, source and ports. This keeps the onMessage\n      // signature backwards-compatible (second param optional).\n      const context: MessageListenerContext = {\n        origin: event.origin,\n        source: event.source,\n        ports: event.ports as unknown as readonly MessagePort[] | undefined,\n        event,\n      };\n      // Call the consumer in a small helper so this handler stays simple.\n      invokeConsumerSafely(\n        onMessage as (d: unknown, c?: unknown) => void,\n        data,\n        context,\n      );\n    } catch (error: unknown) {\n      secureDevelopmentLog(\"error\", \"postMessage\", \"Listener handler error\", {\n        origin: event?.origin,\n        error: sanitizeErrorForLogs(error),\n      });\n    }\n  };\n\n  function isEventOriginAllowlisted(event: MessageEvent): boolean {\n    // Treat empty string and 'null' as opaque origin markers. By default we\n    // reject opaque origins because they are hard to reason about. If the\n    // listener explicitly opted into `allowOpaqueOrigin`, accept them and\n    // skip canonical normalization checks.\n    const incoming = typeof event.origin === \"string\" ? event.origin : \"\";\n    const isOpaque = incoming === \"\" || incoming === \"null\";\n    if (isOpaque) {\n      if (!allowOpaqueOriginLocal) {\n        secureDevelopmentLog(\n          \"warn\",\n          \"postMessage\",\n          \"Dropped message due to invalid origin format\",\n          {\n            origin: incoming,\n          },\n        );\n        return false;\n      }\n      // If opaque origins are allowed, skip normalization and allow the message\n      // to proceed to other checks (e.g., expectedSource). This keeps the\n      // explicit opt-in behavior while allowing reply-port based scenarios.\n      return true;\n    }\n\n    try {\n      if (!allowedOriginSet.has(normalizeOrigin(incoming))) {\n        secureDevelopmentLog(\n          \"warn\",\n          \"postMessage\",\n          \"Dropped message from non-allowlisted origin\",\n          {\n            origin: incoming,\n          },\n        );\n        return false;\n      }\n    } catch (error: unknown) {\n      secureDevelopmentLog(\n        \"warn\",\n        \"postMessage\",\n        \"Dropped message due to invalid origin format\",\n        {\n          origin: incoming,\n          error: sanitizeErrorForLogs(error),\n        },\n      );\n      return false;\n    }\n    return true;\n  }\n\n  function isEventSourceExpected(event: MessageEvent): boolean {\n    if (typeof expectedSourceLocal === \"undefined\") return true;\n    const expected = expectedSourceLocal;\n    // If expectedSource is a comparator function, call it\n    if (typeof expected === \"function\") {\n      try {\n        const ok = (expected as (s: unknown) => boolean)(event.source);\n        if (!ok) {\n          secureDevelopmentLog(\n            \"warn\",\n            \"postMessage\",\n            \"Dropped message from unexpected source (comparator mismatch)\",\n            {\n              origin: event.origin,\n            },\n          );\n        }\n        return Boolean(ok);\n      } catch (error: unknown) {\n        secureDevelopmentLog(\n          \"warn\",\n          \"postMessage\",\n          \"Dropped message due to expectedSource comparator throwing\",\n          {\n            origin: event.origin,\n            error: sanitizeErrorForLogs(error),\n          },\n        );\n        return false;\n      }\n    }\n    // Otherwise do strict reference equality\n    if (expected && event.source !== expected) {\n      secureDevelopmentLog(\n        \"warn\",\n        \"postMessage\",\n        \"Dropped message from unexpected source (reference mismatch)\",\n        {\n          origin: event.origin,\n        },\n      );\n      return false;\n    }\n    return true;\n  }\n\n  // Schedule diagnostics for failed validation: use the diagnostic budget and\n  // a salted fingerprint when available. This is extracted to keep handler\n  // cognitive complexity under limits.\n  function scheduleDiagnosticForFailedValidation(\n    origin: string,\n    reason: string | undefined,\n    data: unknown,\n  ): void {\n    const enableDiagnostics = enableDiagnosticsLocal;\n    if (\n      !enableDiagnostics ||\n      !canConsumeDiagnostic() ||\n      _diagnosticsDisabledDueToNoCryptoInProduction\n    ) {\n      secureDevelopmentLog(\n        \"warn\",\n        \"postMessage\",\n        \"Message dropped due to failed validation\",\n        {\n          origin,\n          reason,\n        },\n      );\n      return;\n    }\n\n    // Async helper: attempt to compute fingerprint and log it.\n    const computeAndLog = async () => {\n      try {\n        await ensureCrypto();\n      } catch {\n        // No secure crypto available: respect production policy and avoid\n        // creating low-entropy fingerprints. If in production, disable\n        // future diagnostics that would rely on non-crypto fallbacks.\n        try {\n          if (environment.isProduction)\n            _diagnosticsDisabledDueToNoCryptoInProduction = true;\n        } catch {\n          /* ignore */\n        }\n        secureDevelopmentLog(\n          \"warn\",\n          \"postMessage\",\n          \"Message dropped due to failed validation\",\n          { origin, reason },\n        );\n        return;\n      }\n\n      // Attempt fingerprinting and log result (async). Errors handled per-case.\n      getPayloadFingerprint(data)\n        .then((fp) => {\n          secureDevelopmentLog(\n            \"warn\",\n            \"postMessage\",\n            \"Message dropped due to failed validation\",\n            { origin, reason, fingerprint: fp },\n          );\n        })\n        .catch(() => {\n          secureDevelopmentLog(\n            \"warn\",\n            \"postMessage\",\n            \"Message dropped due to failed validation\",\n            { origin, reason },\n          );\n        });\n    };\n\n    // Fire-and-forget the async helper; errors are handled internally.\n    void computeAndLog();\n  }\n\n  function parseMessageEventData(event: MessageEvent): unknown {\n    const wireFormat = wireFormatLocal;\n\n    // If structured/auto, allow non-string data when appropriate\n    if (wireFormat === \"structured\") {\n      // Accept structured clone payloads but sanitize and enforce host-type disallow rules\n      if (event.data === null || typeof event.data !== \"object\") {\n        // primitive types are acceptable via structured clone\n        return event.data;\n      }\n      // Use locked configuration values from creation time\n\n      // Use strict transferable validation\n      try {\n        validateTransferables(\n          event.data,\n          allowTransferablesLocal,\n          allowTypedArraysLocal,\n        );\n      } catch (error: unknown) {\n        if (error instanceof TransferableNotAllowedError) {\n          throw error; // Re-throw specific transferable errors\n        }\n        throw new InvalidParameterError(\n          \"Received payload validation failed: \" +\n            String((error as Error)?.message ?? error),\n        );\n      }\n\n      // Special handling for ArrayBuffers when allowed\n      if (allowTypedArraysLocal && event.data instanceof ArrayBuffer) {\n        return event.data; // Return ArrayBuffer as-is without toNullProto processing\n      }\n\n      // Convert to null-prototype and enforce depth/forbidden keys\n      return toNullProto(event.data, 0, POSTMESSAGE_MAX_PAYLOAD_DEPTH);\n    }\n\n    if (wireFormat === \"auto\") {\n      // auto: accept structured clone only for same-origin messages; otherwise require JSON string\n      try {\n        const sameOrigin =\n          normalizeUrlOrigin(event.origin) ===\n          normalizeUrlOrigin(location.origin);\n        if (\n          sameOrigin &&\n          event.data !== null &&\n          typeof event.data === \"object\"\n        ) {\n          return toNullProto(event.data, 0, POSTMESSAGE_MAX_PAYLOAD_DEPTH);\n        }\n      } catch {\n        // fall back to JSON handling below\n      }\n      // else treat as JSON string path\n    }\n\n    // Default JSON path: require string\n    if (typeof event.data !== \"string\") {\n      // Reject non-string payloads to avoid structured clone cycles and ambiguous typing\n      throw new InvalidParameterError(\n        \"postMessage payload must be a JSON string\",\n      );\n    }\n    const byteLength = SHARED_ENCODER.encode(event.data).length;\n    if (byteLength > POSTMESSAGE_MAX_PAYLOAD_BYTES) {\n      secureDevelopmentLog(\"warn\", \"postMessage\", \"Dropped oversized payload\", {\n        origin: event.origin,\n      });\n      throw new InvalidParameterError(\"Payload exceeds maximum allowed size.\");\n    }\n    // eslint-disable-next-line functional/no-let -- Local parsed variable; scoped to function\n    let parsed: unknown;\n    try {\n      parsed = JSON.parse(event.data);\n    } catch {\n      throw new InvalidParameterError(\"Invalid JSON in postMessage\");\n    }\n    // Convert to null-prototype objects and enforce depth + forbidden keys\n    return toNullProto(parsed, 0, POSTMESSAGE_MAX_PAYLOAD_DEPTH);\n  }\n\n  // Use globalThis.addEventListener so the listener works both on the main\n  // thread (window) and in worker contexts (self/globalThis). Cast to any to\n  // avoid TypeScript errors in non-DOM environments.\n  // Prefer `window.addEventListener` when available (tests often stub `window`).\n  const globalTarget: { addEventListener?: unknown } =\n    typeof window !== \"undefined\" &&\n    (window as unknown as { addEventListener?: unknown }).addEventListener\n      ? (window as unknown as { addEventListener?: unknown })\n      : (globalThis as unknown as { addEventListener?: unknown });\n  try {\n    (\n      globalTarget as unknown as {\n        addEventListener: (\n          type: string,\n          listener: EventListenerOrEventListenerObject,\n          options?: AddEventListenerOptions,\n        ) => void;\n      }\n    ).addEventListener(\n      \"message\",\n      handler as EventListenerOrEventListenerObject,\n      { signal: abortController.signal } as AddEventListenerOptions,\n    );\n  } catch (e) {\n    // If addEventListener is not available on the selected target, surface a clear error.\n    throw new InvalidConfigurationError(\n      \"Global event target does not support addEventListener\",\n    );\n  }\n  return { destroy: () => abortController.abort() };\n}\n\n// --- Internal Helpers ---\n\n// Deterministic, stable JSON serialization used for fingerprinting only.\nfunction stableStringify(\n  object: unknown,\n  maxDepth = POSTMESSAGE_MAX_PAYLOAD_DEPTH,\n  nodeBudget = DEFAULT_DEEP_FREEZE_NODE_BUDGET,\n):\n  | { readonly ok: true; readonly s: string }\n  | { readonly ok: false; readonly reason: string } {\n  /* eslint-disable functional/no-let -- Local serialization state; scoped to function */\n  const seen = new WeakSet<object>();\n  let nodes = 0;\n\n  function norm(o: unknown, depth: number): unknown {\n    if (++nodes > nodeBudget) throw new InvalidParameterError(\"budget\");\n    if (o === null || typeof o !== \"object\") return o;\n    if (depth > maxDepth) throw new InvalidParameterError(\"depth\");\n    if (seen.has(o as object)) throw new InvalidParameterError(\"circular\");\n    seen.add(o as object);\n    if (Array.isArray(o))\n      return (o as readonly unknown[]).map((v) => norm(v, depth + 1));\n    const keys = Object.keys(o as Record<string, unknown>).sort((a, b) =>\n      a.localeCompare(b),\n    );\n    /* eslint-disable functional/immutable-data -- Building new null-proto object; local writes to fresh object are safe */\n    const result = Object.create(null) as Record<string, unknown>;\n    for (const k of keys) {\n      result[k] = norm((o as Record<string, unknown>)[k], depth + 1);\n    }\n    /* eslint-enable functional/immutable-data */\n    return result;\n  }\n\n  try {\n    const normalized = norm(object, 0);\n    return { ok: true, s: JSON.stringify(normalized) };\n  } catch (error: unknown) {\n    return { ok: false, reason: String((error as Error)?.message ?? \"error\") };\n  }\n  /* eslint-enable functional/no-let */\n}\n\n// Memoized salt initialization promise to avoid races when multiple callers\n// request a salt concurrently.\n/* eslint-disable-next-line functional/no-let -- Controlled, file-local state for salt memoization; audited */\nlet _payloadFingerprintSaltPromise: Promise<Uint8Array> | undefined;\n\n// Salt used to make fingerprints non-linkable across process restarts.\n// Generated lazily using secure RNG when available.\nconst FINGERPRINT_SALT_LENGTH = 16;\n// Use `undefined` as the uninitialised sentinel to align with lint rules\n/* eslint-disable-next-line functional/no-let -- Controlled, file-local state for salt memoization; audited */\nlet _payloadFingerprintSalt: Uint8Array | undefined = undefined;\n// If secure crypto is not available in production, disable diagnostics that\n// rely on non-crypto fallbacks.\n/* eslint-disable-next-line functional/no-let -- Controlled, file-local state for diagnostics flag; audited */\nlet _diagnosticsDisabledDueToNoCryptoInProduction = false;\n\n// Cooldown period in milliseconds to prevent thundering herd on repeated failures\n// when generating the fingerprint salt. This avoids repeated rapid retries\n// hitting the underlying crypto initialization when it's failing transiently.\nconst SALT_FAILURE_COOLDOWN_MS = 5_000;\n/* eslint-disable-next-line functional/no-let -- Controlled, file-local state for failure backoff; audited */\nlet _saltGenerationFailureTimestamp: number | undefined;\n\nasync function ensureFingerprintSalt(): Promise<Uint8Array> {\n  if (typeof _payloadFingerprintSalt !== \"undefined\" && _payloadFingerprintSalt)\n    return _payloadFingerprintSalt;\n\n  // If a generation promise is already in-flight, reuse it to avoid races.\n  if (typeof _payloadFingerprintSaltPromise !== \"undefined\")\n    return _payloadFingerprintSaltPromise;\n\n  // If we recently observed a failure to generate a salt, fail-fast for a\n  // short cooldown period to avoid thundering-herd retries against a failing\n  // underlying initialization (e.g., ensureCrypto()).\n  if (\n    typeof _saltGenerationFailureTimestamp !== \"undefined\" &&\n    now() - _saltGenerationFailureTimestamp < SALT_FAILURE_COOLDOWN_MS\n  ) {\n    throw new CryptoUnavailableError(\n      \"Salt generation failed recently; on cooldown.\",\n    );\n  }\n  // Fast synchronous availability check: if in production and crypto is missing,\n  // we fail fast rather than relying on time-based fallback.\n  checkCryptoAvailabilityForSecurityFeature(\n    \"fingerprint salt generation\",\n    true,\n  );\n\n  _payloadFingerprintSaltPromise = (async () => {\n    try {\n      const crypto = await ensureCrypto();\n      const salt = new Uint8Array(FINGERPRINT_SALT_LENGTH);\n      crypto.getRandomValues(salt);\n      _payloadFingerprintSalt = salt;\n      // Success: clear any previous failure timestamp so future attempts won't be blocked\n      _saltGenerationFailureTimestamp = undefined;\n      return salt;\n    } catch (error: unknown) {\n      // Record failure timestamp to engage cooldown and avoid thundering herd\n      _saltGenerationFailureTimestamp = now();\n\n      // No secure crypto available: enforce security constitution.\n      if (environment.isProduction) {\n        try {\n          _diagnosticsDisabledDueToNoCryptoInProduction = true;\n        } catch {\n          /* ignore */\n        }\n        try {\n          secureDevelopmentLog(\n            \"warn\",\n            \"postMessage\",\n            \"Secure crypto unavailable in production; disabling diagnostics that rely on non-crypto fallbacks\",\n            { error: sanitizeErrorForLogs(error) },\n          );\n        } catch {\n          /* ignore */\n        }\n        throw new CryptoUnavailableError();\n      }\n\n      // Non-production (development/test) fallback: log and produce a\n      // deterministic, time-based salt to preserve testability.\n      try {\n        secureDevelopmentLog(\n          \"warn\",\n          \"postMessage\",\n          \"Falling back to non-crypto fingerprint salt (dev/test only)\",\n          {\n            error: sanitizeErrorForLogs(error),\n          },\n        );\n      } catch {\n        // best-effort logging\n      }\n      const timeEntropy =\n        String(Date.now()) +\n        String(\n          typeof performance !== \"undefined\" &&\n            typeof performance.now === \"function\"\n            ? performance.now()\n            : 0,\n        );\n      const buf = new Uint8Array(FINGERPRINT_SALT_LENGTH);\n      /* eslint-disable functional/no-let, functional/immutable-data -- Local loop index and buffer initialization; scoped */\n      for (let index = 0; index < buf.length; index++) {\n        buf[index] = timeEntropy.charCodeAt(index % timeEntropy.length) & 0xff;\n      }\n      /* eslint-enable functional/no-let, functional/immutable-data */\n\n      _payloadFingerprintSalt = buf;\n      // Clear failure timestamp on fallback success so we don't block future attempts\n      _saltGenerationFailureTimestamp = undefined;\n      return buf;\n    }\n  })();\n\n  try {\n    const saltResult = await _payloadFingerprintSaltPromise;\n    return saltResult;\n  } finally {\n    // clear promise so subsequent calls go fast (salt is cached)\n\n    _payloadFingerprintSaltPromise = undefined;\n  }\n}\n\n// Helper: compute an initial allowed origin from an incoming MessageEvent.\n// This mirrors the small, well-audited logic used by workers to lock the\n// inbound origin at initialization time. We expose it so callers can reuse\n// identical semantics instead of re-implementing them.\nexport function computeInitialAllowedOrigin(\n  event?: MessageEvent,\n): string | undefined {\n  try {\n    const origin =\n      event && typeof event.origin === \"string\" ? event.origin : \"\";\n    if (origin) return origin;\n    if (\n      typeof location !== \"undefined\" &&\n      location &&\n      typeof location.origin === \"string\"\n    )\n      return location.origin;\n    return undefined;\n  } catch {\n    return undefined;\n  }\n}\n\n// Helper: check whether an incoming MessageEvent should be accepted given a\n// locked origin (if any). This implements the conservative fallback behavior\n// used by workers: if a locked origin exists, require a match; otherwise\n// fall back to matching location.origin when possible; if origin information\n// is unavailable, require the presence of a reply MessagePort to avoid\n// accepting anonymous posts.\nexport function isEventAllowedWithLock(\n  event: MessageEvent,\n  lockedOrigin?: string,\n): boolean {\n  try {\n    const incomingOrigin = typeof event.origin === \"string\" ? event.origin : \"\";\n\n    if (typeof lockedOrigin === \"string\" && lockedOrigin !== \"\") {\n      return incomingOrigin === lockedOrigin;\n    }\n\n    const fallbackOrigin =\n      typeof location !== \"undefined\" ? location.origin : \"\";\n    if (incomingOrigin !== \"\" && fallbackOrigin !== \"\") {\n      return incomingOrigin === fallbackOrigin;\n    }\n\n    // If we can't establish any origin information, only accept messages that\n    // include a reply port — this avoids processing anonymous posts.\n    return !!(event?.ports && event.ports.length > 0);\n  } catch {\n    return false;\n  }\n}\n\nasync function getPayloadFingerprint(data: unknown): Promise<string> {\n  // Canonicalize sanitized payload for deterministic fingerprints\n  const sanitized: unknown = (() => {\n    try {\n      return toNullProto(data, 0, POSTMESSAGE_MAX_PAYLOAD_DEPTH);\n    } catch {\n      // If sanitization fails, fall back to raw representation for diagnostics only\n      return data;\n    }\n  })();\n  const stable = stableStringify(\n    sanitized,\n    POSTMESSAGE_MAX_PAYLOAD_DEPTH,\n    DEFAULT_DEEP_FREEZE_NODE_BUDGET,\n  );\n  if (!stable.ok) {\n    // If canonicalization fails, return an explicit error token in prod or a fallback in dev\n    if (environment.isProduction)\n      throw new EncodingError(\n        \"Fingerprinting failed due to resource constraints\",\n      );\n    // dev/test fallback: use best-effort raw string truncated\n\n    const s = JSON.stringify(sanitized).slice(0, POSTMESSAGE_MAX_PAYLOAD_BYTES);\n    return computeFingerprintFromString(s);\n  }\n  // Encode as UTF-8 bytes and truncate by bytes to avoid splitting multi-byte chars\n  const fullBytes = SHARED_ENCODER.encode(stable.s);\n  const payloadBytes = fullBytes.slice(0, POSTMESSAGE_MAX_PAYLOAD_BYTES);\n  return computeFingerprintFromBytes(payloadBytes);\n}\n\n// Common fingerprint computation logic shared between functions\nasync function computeFingerprintFromBytes(\n  payloadBytes: Uint8Array,\n): Promise<string> {\n  // eslint-disable-next-line functional/no-let -- Local salt buffer variable; scoped to function\n  let saltBuf: Uint8Array | undefined;\n  try {\n    saltBuf = await ensureFingerprintSalt();\n  } catch {\n    if (environment.isProduction)\n      throw new InvalidConfigurationError(\"Fingerprinting unavailable\");\n  }\n\n  try {\n    const crypto = await ensureCrypto();\n    const subtle = (crypto as Crypto & { readonly subtle?: SubtleCrypto })\n      .subtle;\n    if (subtle && typeof subtle.digest === \"function\" && saltBuf) {\n      const saltArray = saltBuf;\n      const input = new Uint8Array(saltArray.length + payloadBytes.length);\n      input.set(saltArray, 0);\n      input.set(payloadBytes, saltArray.length);\n      const digest = await subtle.digest(\"SHA-256\", input.buffer);\n      return arrayBufferToBase64(digest).slice(0, 12);\n    }\n  } catch {\n    /* fall through to non-crypto fallback */\n  }\n\n  // Fallback: salted non-crypto rolling hash (development/test only)\n  if (!saltBuf) return \"FINGERPRINT_ERR\";\n  const sb = saltBuf;\n  // eslint-disable-next-line functional/no-let -- Local accumulator for hash computation; scoped to function\n  let accumulator = 2166136261 >>> 0; // FNV-1a init\n  for (const byte of sb) {\n    accumulator = ((accumulator ^ byte) * 16777619) >>> 0;\n  }\n  for (const byte of payloadBytes) {\n    accumulator = ((accumulator ^ byte) * 16777619) >>> 0;\n  }\n  return accumulator.toString(16).padStart(8, \"0\");\n}\n\n// Extracted helper so stable/canonical fallback can use the same compute logic\nasync function computeFingerprintFromString(s: string): Promise<string> {\n  // Work with UTF-8 bytes and prefer crypto.subtle when available.\n  const fullBytes = SHARED_ENCODER.encode(s);\n  const payloadBytes = fullBytes.slice(0, POSTMESSAGE_MAX_PAYLOAD_BYTES);\n\n  return computeFingerprintFromBytes(payloadBytes);\n}\n\nexport function _validatePayload(\n  data: unknown,\n  validator: ((d: unknown) => boolean) | Record<string, SchemaValue>,\n): { readonly valid: boolean; readonly reason?: string } {\n  if (typeof validator === \"function\") {\n    try {\n      return { valid: validator(data) };\n    } catch (error: unknown) {\n      return {\n        valid: false,\n        reason: `Validator function threw: ${error instanceof Error ? error.message : \"\"}`,\n      };\n    }\n  }\n  const isPlainOrNullObject = (o: unknown): o is Record<string, unknown> => {\n    if (o === null || typeof o !== \"object\") return false;\n    const p = Object.getPrototypeOf(o) as object | null | undefined;\n    return p === Object.prototype || p === null;\n  };\n  if (!isPlainOrNullObject(data)) {\n    return { valid: false, reason: `Expected object, got ${typeof data}` };\n  }\n  const plainData = data;\n  const keys = Object.keys(plainData);\n  if (keys.some((k) => isForbiddenKey(k))) {\n    return { valid: false, reason: \"Forbidden property name present\" };\n  }\n  for (const [key, expectedType] of Object.entries(validator)) {\n    if (!Object.hasOwn(plainData, key)) {\n      return { valid: false, reason: `Missing property '${key}'` };\n    }\n    const value = plainData[key];\n    const actualType = Array.isArray(value) ? \"array\" : typeof value;\n    if (actualType !== expectedType) {\n      return {\n        valid: false,\n        reason: `Property '${key}' has wrong type. Expected ${expectedType}, got ${actualType}`,\n      };\n    }\n  }\n  return { valid: true };\n}\n\nexport function _validatePayloadWithExtras(\n  data: unknown,\n  validator: ((d: unknown) => boolean) | Record<string, SchemaValue>,\n  allowExtraProperties = false,\n): { readonly valid: boolean; readonly reason?: string } {\n  // Validator function path: execute safely and return boolean result.\n  if (typeof validator === \"function\") {\n    try {\n      return { valid: Boolean((validator as (d: unknown) => boolean)(data)) };\n    } catch (error: unknown) {\n      return {\n        valid: false,\n        reason: `Validator function threw: ${error instanceof Error ? error.message : \"\"}`,\n      };\n    }\n  }\n\n  // For schema validators, reuse the base validation first.\n  const base = _validatePayload(data, validator);\n  if (!base.valid) return base;\n\n  // If extra properties are allowed, we're done.\n  if (allowExtraProperties) return { valid: true };\n\n  // Otherwise, ensure no unexpected keys are present.\n  const allowed = new Set(Object.keys(validator));\n  const plainData = data as Record<string, unknown>;\n  for (const k of Object.keys(plainData)) {\n    if (!allowed.has(k)) {\n      return { valid: false, reason: `Unexpected property '${k}'` };\n    }\n  }\n\n  return { valid: true };\n}\n\n// Test-only accessors for internal helpers. Guarded by a runtime check to avoid\n// leaking internals in production builds. These are only available when the\n// build defines `__TEST__` and the runtime allows test APIs via dev-guards.\nexport const __test_internals:\n  | {\n      readonly toNullProto: (\n        object: unknown,\n        depth?: number,\n        maxDepth?: number,\n      ) => unknown;\n      readonly getPayloadFingerprint: (data: unknown) => Promise<string>;\n      readonly ensureFingerprintSalt: () => Promise<Uint8Array>;\n      readonly deepFreeze: <T>(object: T) => T;\n    }\n  | undefined =\n  typeof __TEST__ !== \"undefined\" && __TEST__\n    ? (() => {\n        // runtime guard for test-only API usage\n        // use require to avoid static circular imports in some bundlers\n        try {\n          // Prefer CommonJS require when available (test runners often support it).\n          // Fall back to throwing a helpful error if require is not available.\n          // We purposely avoid dynamic import here because this factory is synchronous.\n          // Tests should run in an environment that supports require or set the\n          // SECURITY_KIT_ALLOW_TEST_APIS flag.\n\n          try {\n            const globalRecord = globalThis as unknown as Record<\n              string,\n              unknown\n            >;\n            const request = globalRecord[\"require\"];\n            if (typeof request !== \"function\") {\n              throw new Error(\n                \"Cannot load test internals: require() not available. Ensure your test environment supports CommonJS require or enable SECURITY_KIT_ALLOW_TEST_APIS.\",\n              );\n            }\n            /* eslint-disable-next-line @typescript-eslint/no-unsafe-call -- Runtime guard ensures request is a function; test environment only */\n            const developmentGuards = (request as Function)(\n              \"./development-guards\",\n            ) as {\n              readonly assertTestApiAllowed: () => void;\n            };\n            developmentGuards.assertTestApiAllowed();\n          } catch {\n            // Ignore require errors in test environment setup\n          }\n\n          const testExports = {\n            toNullProto: toNullProto as (\n              object: unknown,\n              depth?: number,\n              maxDepth?: number,\n            ) => unknown,\n            getPayloadFingerprint: getPayloadFingerprint as (\n              data: unknown,\n            ) => Promise<string>,\n            ensureFingerprintSalt:\n              ensureFingerprintSalt as () => Promise<Uint8Array>,\n            deepFreeze: deepFreeze as <T>(object: T) => T,\n          };\n          return testExports;\n        } catch (error: unknown) {\n          // If test internals cannot be exposed, return undefined to avoid exposing internals in prod builds.\n          try {\n            secureDevelopmentLog(\n              \"warn\",\n              \"postMessage\",\n              \"Test internals not exposed\",\n              {\n                error: sanitizeErrorForLogs(error),\n              },\n            );\n          } catch {\n            /* best-effort */\n          }\n          return undefined;\n        }\n      })()\n    : undefined;\n\n// Runtime-guarded test helpers: these call a runtime dev-guard to ensure they\n// are not used in production by accident. Prefer these in unit tests instead\n// of relying on build-time __TEST__ macros which may not be available in all\n// execution environments used by test runners.\nfunction _assertTestApiAllowedInline(): void {\n  try {\n    if (!environment.isProduction) return;\n  } catch {\n    return;\n  }\n  const environmentAllow =\n    typeof process !== \"undefined\" &&\n    process?.env?.[\"SECURITY_KIT_ALLOW_TEST_APIS\"] === \"true\";\n  const globalAllow = !!(globalThis as unknown as Record<string, unknown>)[\n    \"__SECURITY_KIT_ALLOW_TEST_APIS\"\n  ];\n  if (environmentAllow || globalAllow) return;\n  throw new Error(\n    \"Test-only APIs are disabled in production. Set SECURITY_KIT_ALLOW_TEST_APIS=true or set globalThis.__SECURITY_KIT_ALLOW_TEST_APIS = true to explicitly allow.\",\n  );\n}\n\nexport function __test_getPayloadFingerprint(data: unknown): Promise<string> {\n  _assertTestApiAllowedInline();\n  return getPayloadFingerprint(data);\n}\n\nexport function __test_ensureFingerprintSalt(): Promise<Uint8Array> {\n  _assertTestApiAllowedInline();\n  return ensureFingerprintSalt();\n}\n\nexport function __test_toNullProto(\n  object: unknown,\n  depth?: number,\n  maxDepth?: number,\n): unknown {\n  _assertTestApiAllowedInline();\n  return toNullProto(\n    object,\n    depth ?? 0,\n    maxDepth ?? POSTMESSAGE_MAX_PAYLOAD_DEPTH,\n  );\n}\n\nexport function __test_deepFreeze<T>(object: T): T {\n  _assertTestApiAllowedInline();\n  return deepFreeze(object);\n}\n\nexport function __test_resetForUnitTests(): void {\n  _assertTestApiAllowedInline();\n  _payloadFingerprintSalt = undefined;\n  _diagnosticsDisabledDueToNoCryptoInProduction = false;\n  _saltGenerationFailureTimestamp = undefined;\n}\n\n// Test-only helpers to inspect and manipulate the salt failure timestamp for\n// adversarial tests that simulate cooldown behavior. Guarded by the same\n// runtime test API check used above.\nexport function __test_getSaltFailureTimestamp(): number | undefined {\n  _assertTestApiAllowedInline();\n  return _saltGenerationFailureTimestamp;\n}\n\nexport function __test_setSaltFailureTimestamp(v: number | undefined): void {\n  _assertTestApiAllowedInline();\n  _saltGenerationFailureTimestamp = v;\n}\n",
    "usedDeprecatedRules": [
      {
        "ruleId": "functional/prefer-readonly-type",
        "replacedBy": [
          "functional/prefer-immutable-types",
          "functional/type-declaration-immutability"
        ]
      }
    ]
  },
  {
    "filePath": "/home/david/Security-kit/src/protocol.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "functional/prefer-readonly-type",
        "replacedBy": [
          "functional/prefer-immutable-types",
          "functional/type-declaration-immutability"
        ]
      }
    ]
  },
  {
    "filePath": "/home/david/Security-kit/src/reporting.ts",
    "messages": [],
    "suppressedMessages": [
      {
        "ruleId": "functional/no-let",
        "severity": 2,
        "message": "Unexpected let, use const instead.",
        "line": 22,
        "column": 1,
        "nodeType": "VariableDeclaration",
        "messageId": "generic",
        "endLine": 24,
        "endColumn": 27,
        "suppressions": [
          {
            "kind": "directive",
            "justification": "deliberate runtime mutability for hook install/uninstall"
          }
        ]
      },
      {
        "ruleId": "unicorn/prevent-abbreviations",
        "severity": 1,
        "message": "The variable `getProdErrorHook` should be named `getProductionErrorHook`. A more descriptive name will do too.",
        "line": 37,
        "column": 17,
        "nodeType": "Identifier",
        "messageId": "replace",
        "endLine": 37,
        "endColumn": 33,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "unicorn/prevent-abbreviations",
        "severity": 1,
        "message": "The variable `setProdErrorHook` should be named `setProductionErrorHook`. A more descriptive name will do too.",
        "line": 42,
        "column": 17,
        "nodeType": "Identifier",
        "messageId": "replace",
        "endLine": 42,
        "endColumn": 33,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "unicorn/prevent-abbreviations",
        "severity": 1,
        "message": "The variable `configureProdErrorReporter` should be named `configureProductionErrorReporter`. A more descriptive name will do too.",
        "line": 63,
        "column": 17,
        "nodeType": "Identifier",
        "messageId": "replace",
        "endLine": 63,
        "endColumn": 43,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "functional/immutable-data",
        "severity": 2,
        "message": "Modifying an existing object/array is not allowed.",
        "line": 73,
        "column": 3,
        "nodeType": "AssignmentExpression",
        "messageId": "generic",
        "endLine": 73,
        "endColumn": 73,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "functional/immutable-data",
        "severity": 2,
        "message": "Modifying an existing object/array is not allowed.",
        "line": 75,
        "column": 3,
        "nodeType": "AssignmentExpression",
        "messageId": "generic",
        "endLine": 75,
        "endColumn": 70,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "functional/immutable-data",
        "severity": 2,
        "message": "Modifying an existing object/array is not allowed.",
        "line": 77,
        "column": 3,
        "nodeType": "AssignmentExpression",
        "messageId": "generic",
        "endLine": 77,
        "endColumn": 73,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "functional/immutable-data",
        "severity": 2,
        "message": "Modifying an existing object/array is not allowed.",
        "line": 79,
        "column": 3,
        "nodeType": "AssignmentExpression",
        "messageId": "generic",
        "endLine": 79,
        "endColumn": 47,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "unicorn/prevent-abbreviations",
        "severity": 1,
        "message": "The variable `reportProdError` should be named `reportProductionError`. A more descriptive name will do too.",
        "line": 83,
        "column": 17,
        "nodeType": "Identifier",
        "messageId": "replace",
        "endLine": 83,
        "endColumn": 32,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "functional/immutable-data",
        "severity": 2,
        "message": "Modifying an existing object/array is not allowed.",
        "line": 90,
        "column": 7,
        "nodeType": "AssignmentExpression",
        "messageId": "generic",
        "endLine": 90,
        "endColumn": 53,
        "suppressions": [
          {
            "kind": "directive",
            "justification": "deliberate, limited mutation"
          }
        ]
      },
      {
        "ruleId": "functional/immutable-data",
        "severity": 2,
        "message": "Modifying an existing object/array is not allowed.",
        "line": 99,
        "column": 5,
        "nodeType": "AssignmentExpression",
        "messageId": "generic",
        "endLine": 99,
        "endColumn": 51,
        "suppressions": [
          {
            "kind": "directive",
            "justification": "deliberate, limited mutation"
          }
        ]
      },
      {
        "ruleId": "functional/immutable-data",
        "severity": 2,
        "message": "Modifying an existing object/array is not allowed.",
        "line": 109,
        "column": 7,
        "nodeType": "AssignmentExpression",
        "messageId": "generic",
        "endLine": 112,
        "endColumn": 8,
        "suppressions": [
          {
            "kind": "directive",
            "justification": "deliberate, limited mutation"
          }
        ]
      },
      {
        "ruleId": "functional/immutable-data",
        "severity": 2,
        "message": "Modifying an existing object/array is not allowed.",
        "line": 118,
        "column": 5,
        "nodeType": "AssignmentExpression",
        "messageId": "generic",
        "endLine": 118,
        "endColumn": 58,
        "suppressions": [
          {
            "kind": "directive",
            "justification": "deliberate, limited mutation"
          }
        ]
      },
      {
        "ruleId": "unicorn/prevent-abbreviations",
        "severity": 1,
        "message": "The variable `__test_resetProdErrorReporter` should be named `__test_resetProductionErrorReporter`. A more descriptive name will do too.",
        "line": 163,
        "column": 17,
        "nodeType": "Identifier",
        "messageId": "replace",
        "endLine": 163,
        "endColumn": 46,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "functional/immutable-data",
        "severity": 2,
        "message": "Modifying an existing object/array is not allowed.",
        "line": 165,
        "column": 3,
        "nodeType": "AssignmentExpression",
        "messageId": "generic",
        "endLine": 165,
        "endColumn": 62,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "functional/immutable-data",
        "severity": 2,
        "message": "Modifying an existing object/array is not allowed.",
        "line": 167,
        "column": 3,
        "nodeType": "AssignmentExpression",
        "messageId": "generic",
        "endLine": 167,
        "endColumn": 59,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "functional/immutable-data",
        "severity": 2,
        "message": "Modifying an existing object/array is not allowed.",
        "line": 169,
        "column": 3,
        "nodeType": "AssignmentExpression",
        "messageId": "generic",
        "endLine": 169,
        "endColumn": 51,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "functional/immutable-data",
        "severity": 2,
        "message": "Modifying an existing object/array is not allowed.",
        "line": 171,
        "column": 3,
        "nodeType": "AssignmentExpression",
        "messageId": "generic",
        "endLine": 171,
        "endColumn": 47,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "functional/immutable-data",
        "severity": 2,
        "message": "Modifying an existing object/array is not allowed.",
        "line": 177,
        "column": 3,
        "nodeType": "AssignmentExpression",
        "messageId": "generic",
        "endLine": 177,
        "endColumn": 77,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      }
    ],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "functional/prefer-readonly-type",
        "replacedBy": [
          "functional/prefer-immutable-types",
          "functional/type-declaration-immutability"
        ]
      }
    ]
  },
  {
    "filePath": "/home/david/Security-kit/src/sanitizer.ts",
    "messages": [],
    "suppressedMessages": [
      {
        "ruleId": "functional/immutable-data",
        "severity": 2,
        "message": "Modifying a map is not allowed.",
        "line": 151,
        "column": 5,
        "nodeType": "CallExpression",
        "messageId": "map",
        "endLine": 151,
        "endColumn": 51,
        "suppressions": [
          {
            "kind": "directive",
            "justification": "private, controlled cache mutation for TrustedTypePolicy instances"
          }
        ]
      }
    ],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "functional/prefer-readonly-type",
        "replacedBy": [
          "functional/prefer-immutable-types",
          "functional/type-declaration-immutability"
        ]
      }
    ]
  },
  {
    "filePath": "/home/david/Security-kit/src/scripts/fuzz-harness.ts",
    "messages": [
      {
        "ruleId": "functional/immutable-data",
        "severity": 2,
        "message": "Modifying an existing object/array is not allowed.",
        "line": 76,
        "column": 5,
        "nodeType": "AssignmentExpression",
        "messageId": "generic",
        "endLine": 76,
        "endColumn": 57
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-member-access",
        "severity": 2,
        "message": "Unsafe member access .nested on an `any` value.",
        "line": 76,
        "column": 16,
        "nodeType": "Identifier",
        "messageId": "unsafeMemberExpression",
        "endLine": 76,
        "endColumn": 22
      },
      {
        "ruleId": "functional/immutable-data",
        "severity": 2,
        "message": "Modifying properties of existing object not allowed.",
        "line": 126,
        "column": 7,
        "nodeType": "CallExpression",
        "messageId": "object",
        "endLine": 126,
        "endColumn": 62
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-member-access",
        "severity": 2,
        "message": "Unsafe member access .a on an `any` value.",
        "line": 126,
        "column": 40,
        "nodeType": "Identifier",
        "messageId": "unsafeMemberExpression",
        "endLine": 126,
        "endColumn": 41
      }
    ],
    "suppressedMessages": [
      {
        "ruleId": "functional/no-let",
        "severity": 2,
        "message": "Unexpected let, use const instead.",
        "line": 26,
        "column": 3,
        "nodeType": "VariableDeclaration",
        "messageId": "generic",
        "endLine": 26,
        "endColumn": 23,
        "suppressions": [
          {
            "kind": "directive",
            "justification": "Local accumulator for random number generation; scoped to function"
          }
        ]
      },
      {
        "ruleId": "functional/no-let",
        "severity": 2,
        "message": "Unexpected let, use const instead.",
        "line": 28,
        "column": 8,
        "nodeType": "VariableDeclaration",
        "messageId": "generic",
        "endLine": 28,
        "endColumn": 21,
        "suppressions": [
          {
            "kind": "directive",
            "justification": "Local loop index; scoped to function"
          }
        ]
      },
      {
        "ruleId": "functional/immutable-data",
        "severity": 2,
        "message": "Modifying an existing object/array is not allowed.",
        "line": 56,
        "column": 5,
        "nodeType": "AssignmentExpression",
        "messageId": "generic",
        "endLine": 56,
        "endColumn": 27,
        "suppressions": [
          {
            "kind": "directive",
            "justification": "intentional test harness behavior"
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 76,
        "column": 11,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 76,
        "endColumn": 14,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [2610, 2613], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [2610, 2613], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "functional/immutable-data",
        "severity": 2,
        "message": "Modifying an existing object/array is not allowed.",
        "line": 92,
        "column": 9,
        "nodeType": "AssignmentExpression",
        "messageId": "generic",
        "endLine": 94,
        "endColumn": 10,
        "suppressions": [
          {
            "kind": "directive",
            "justification": "intentional fuzz harness mutation"
          }
        ]
      },
      {
        "ruleId": "functional/immutable-data",
        "severity": 2,
        "message": "Modifying an existing object/array is not allowed.",
        "line": 98,
        "column": 9,
        "nodeType": "AssignmentExpression",
        "messageId": "generic",
        "endLine": 100,
        "endColumn": 10,
        "suppressions": [
          {
            "kind": "directive",
            "justification": "intentional fuzz harness mutation"
          }
        ]
      },
      {
        "ruleId": "functional/immutable-data",
        "severity": 2,
        "message": "Modifying an existing object/array is not allowed.",
        "line": 104,
        "column": 9,
        "nodeType": "AssignmentExpression",
        "messageId": "generic",
        "endLine": 106,
        "endColumn": 10,
        "suppressions": [
          { "kind": "directive", "justification": "intentional fuzz payload" }
        ]
      },
      {
        "ruleId": "functional/immutable-data",
        "severity": 2,
        "message": "Modifying an existing object/array is not allowed.",
        "line": 111,
        "column": 7,
        "nodeType": "AssignmentExpression",
        "messageId": "generic",
        "endLine": 113,
        "endColumn": 8,
        "suppressions": [
          {
            "kind": "directive",
            "justification": "intentional fuzz harness mutation"
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 126,
        "column": 35,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 126,
        "endColumn": 38,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [4550, 4553], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [4550, 4553], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "functional/immutable-data",
        "severity": 2,
        "message": "Modifying an existing object/array is not allowed.",
        "line": 146,
        "column": 3,
        "nodeType": "AssignmentExpression",
        "messageId": "generic",
        "endLine": 146,
        "endColumn": 32,
        "suppressions": [
          {
            "kind": "directive",
            "justification": "intentional fuzz harness access"
          }
        ]
      }
    ],
    "errorCount": 4,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { Sanitizer, STRICT_HTML_POLICY_CONFIG } from \"../sanitizer\";\nimport * as postMessageModule from \"../postMessage\";\nimport * as crypto from \"node:crypto\";\n\nfunction randomString(length = 6, rnd?: () => number) {\n  const chars = \"abcdefghijklmnopqrstuvwxyz0123456789\";\n  if (typeof rnd === \"function\") {\n    return Array.from(\n      { length },\n      () => chars[Math.floor(rnd() * chars.length)],\n    ).join(\"\");\n  }\n  const buf = Buffer.alloc(length);\n  crypto.randomFillSync(buf);\n  return Array.from(buf)\n    .map((b) => chars[(b as number) % chars.length])\n    .join(\"\");\n}\n\n// Secure RNG returning a float in [0,1)\nfunction secureRandom(): number {\n  const buf = Buffer.alloc(6);\n  crypto.randomFillSync(buf);\n  // Use a typed loop to compose a 48-bit integer from 6 random bytes\n  // eslint-disable-next-line functional/no-let -- Local accumulator for random number generation; scoped to function\n  let accumulator = 0;\n  // eslint-disable-next-line functional/no-let -- Local loop index; scoped to function\n  for (let index = 0; index < 6; index++) {\n    accumulator = (accumulator << 8) + buf.readUInt8(index);\n  }\n  const v = accumulator;\n  return v / 2 ** 48;\n}\n\nfunction makeHostilePayload(\n  index: number,\n  rnd = secureRandom,\n  randString = randomString,\n  randInt?: (n: number) => number,\n): unknown {\n  if (!randInt) randInt = (n: number) => Math.floor(rnd() * n);\n  const r = rnd();\n  if (r < 0.2) {\n    // prototype pollution vector (intentional for fuzzing)\n\n    return { __proto__: { hacked: index } };\n  }\n  if (r < 0.4) {\n    const o: Record<PropertyKey, unknown> = { a: 1 };\n    const s = Symbol(randString(6, rnd));\n    // unsafe member access on purpose for fuzzing\n    // Narrow, intentional mutation for the fuzz harness: we need to create a symbol-keyed\n    // property to exercise sanitizer behavior across exotic keys. This is auditable and\n    // intentionally unsafe in this test-only file.\n    // eslint-disable-next-line functional/immutable-data -- intentional test harness behavior\n    o[s] = { evil: index };\n\n    return o;\n  }\n  if (r < 0.6) {\n    // Use an object literal with an accessor to avoid mutating an existing object.\n    const o: Record<PropertyKey, unknown> = {\n      a: 1,\n      get b() {\n        throw new Error(\"hostile getter\");\n      },\n    };\n\n    return o;\n  }\n  if (r < 0.8) {\n    const o: Record<PropertyKey, unknown> = { nested: {} };\n    // deliberate nested mutation to exercise prototype setters in sanitizer\n    // Cast to any for intentional test-only mutation\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    (o as any).nested.deep = { __proto__: { p: index } };\n\n    return o;\n  }\n\n  // Extra vectors when rnd is present\n  if (r < 0.9) {\n    // toString/valueOf override or Symbol.toPrimitive\n    const o: Record<PropertyKey, unknown> = { v: 1 };\n    if (randInt) {\n      const choice = randInt(3);\n      if (choice === 0) {\n        // deliberate mutation to override toString for fuzzing\n        // Narrow, intentional mutation: override built-in conversion helpers to assert\n        // sanitizer and consumers handle poisoned primitives safely.\n        // eslint-disable-next-line functional/immutable-data -- intentional fuzz harness mutation\n        o.toString = () => {\n          throw new Error(\"poisoned toString\");\n        };\n      } else if (choice === 1) {\n        // deliberate mutation to override valueOf for fuzzing\n        // eslint-disable-next-line functional/immutable-data -- intentional fuzz harness mutation\n        o.valueOf = () => {\n          throw new Error(\"poisoned valueOf\");\n        };\n      } else {\n        // deliberate mutation to override Symbol.toPrimitive\n        // eslint-disable-next-line functional/immutable-data -- intentional fuzz payload\n        o[Symbol.toPrimitive] = () => {\n          throw new Error(\"poisoned toPrimitive\");\n        };\n      }\n    } else {\n      // Narrow intentional mutation for the fallback path when randInt is not provided.\n      // eslint-disable-next-line functional/immutable-data -- intentional fuzz harness mutation\n      o.toString = () => {\n        throw new Error(\"poisoned toString\");\n      };\n    }\n\n    return o;\n  }\n\n  if (r < 0.95) {\n    // setPrototypeOf attack on nested object keys\n    const o: Record<PropertyKey, unknown> = { a: { b: 1 } };\n    try {\n      // intentionally mutate prototype to test sanitizer hardening\n      // Cast to any for test-only mutation\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      Object.setPrototypeOf((o as any).a, { poisoned: true });\n    } catch (error) {\n      console.warn(\n        \"setPrototypeOf failed during fuzz harness\",\n        (error as Error).message,\n      );\n    }\n\n    return o;\n  }\n\n  // long key names\n  const key = Array.from({ length: 512 })\n    .map(() => randomString(4, rnd))\n    .join(\":\");\n  const object: Record<string, unknown> = {};\n  // deliberate long-key insertion for fuzzing\n  // Narrow, intentional mutation to insert a very long property name to test\n  // sanitizer/validator behavior on extreme keys.\n  // eslint-disable-next-line functional/immutable-data -- intentional fuzz harness access\n  object[key] = { huge: index };\n\n  return object;\n}\n\nexport async function runStandaloneFuzzHarness(iterations = 100) {\n  const dp: { readonly sanitize: (s: string, cfg?: unknown) => string } = {\n    sanitize: (s: string) => s,\n  };\n  const sanitizer = new Sanitizer(dp, { strict: STRICT_HTML_POLICY_CONFIG });\n  for (const index of Array.from(\n    { length: iterations },\n    (_, index_) => index_,\n  )) {\n    const before = Object.prototype.hasOwnProperty(\"hacked\");\n    const p: unknown = makeHostilePayload(index);\n    try {\n      try {\n        sanitizer.getSanitizedString(JSON.stringify(p), \"strict\");\n      } catch (error) {\n        console.warn(\n          \"sanitizer error during fuzz iteration:\",\n          (error as Error).message,\n        );\n      }\n      try {\n        postMessageModule._validatePayload?.(\n          p,\n          (_d: unknown) => true as unknown as boolean,\n        );\n      } catch (error) {\n        console.warn(\n          \"postMessage validator error during fuzz iteration:\",\n          (error as Error).message,\n        );\n      }\n    } catch (caught) {\n      // give a more descriptive name to caught exception\n      console.error(\"Unexpected crash\", caught);\n      return 1;\n    }\n    const after = Object.prototype.hasOwnProperty(\"hacked\");\n    if (after !== before) {\n      console.error(\"Prototype polluted! iteration\", index, p, {\n        before,\n        after,\n      });\n      return 2;\n    }\n  }\n  console.info(\n    `Fuzz finished: no prototype pollution detected in ${iterations} iterations`,\n  );\n  return 0;\n}\n",
    "usedDeprecatedRules": [
      {
        "ruleId": "functional/prefer-readonly-type",
        "replacedBy": [
          "functional/prefer-immutable-types",
          "functional/type-declaration-immutability"
        ]
      }
    ]
  },
  {
    "filePath": "/home/david/Security-kit/src/secure-api-signer.ts",
    "messages": [
      {
        "ruleId": "sonarjs/cognitive-complexity",
        "severity": 2,
        "message": "Refactor this function to reduce its Cognitive Complexity from 37 to the 18 allowed.",
        "line": 168,
        "column": 10,
        "nodeType": null,
        "messageId": "refactorFunction",
        "endLine": 168,
        "endColumn": 22
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-assignment",
        "severity": 2,
        "message": "Unsafe assignment of an `any` value.",
        "line": 191,
        "column": 11,
        "nodeType": "VariableDeclarator",
        "messageId": "anyAssignment",
        "endLine": 191,
        "endColumn": 76
      }
    ],
    "suppressedMessages": [
      {
        "ruleId": "functional/prefer-readonly-type",
        "severity": 2,
        "message": "A readonly modifier is required.",
        "line": 339,
        "column": 3,
        "nodeType": "PropertyDefinition",
        "messageId": "property",
        "endLine": 348,
        "endColumn": 5,
        "fix": { "range": [12566, 12566], "text": "readonly " },
        "suppressions": [
          {
            "kind": "directive",
            "justification": "These fields are intentionally mutable for state management"
          }
        ]
      },
      {
        "ruleId": "functional/prefer-readonly-type",
        "severity": 2,
        "message": "A readonly modifier is required.",
        "line": 351,
        "column": 3,
        "nodeType": "PropertyDefinition",
        "messageId": "property",
        "endLine": 351,
        "endColumn": 28,
        "fix": { "range": [12977, 12977], "text": "readonly " },
        "suppressions": [
          {
            "kind": "directive",
            "justification": "These fields are intentionally mutable for state management"
          }
        ]
      },
      {
        "ruleId": "functional/prefer-readonly-type",
        "severity": 2,
        "message": "A readonly modifier is required.",
        "line": 354,
        "column": 3,
        "nodeType": "PropertyDefinition",
        "messageId": "property",
        "endLine": 354,
        "endColumn": 26,
        "fix": { "range": [13181, 13181], "text": "readonly " },
        "suppressions": [
          {
            "kind": "directive",
            "justification": "These fields are intentionally mutable for state management"
          }
        ]
      },
      {
        "ruleId": "functional/prefer-readonly-type",
        "severity": 2,
        "message": "Only readonly types allowed.",
        "line": 358,
        "column": 30,
        "nodeType": "TSTypeReference",
        "messageId": "type",
        "endLine": 358,
        "endColumn": 41,
        "fix": { "range": [13453, 13456], "text": "ReadonlySet" },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "functional/prefer-readonly-type",
        "severity": 2,
        "message": "A readonly modifier is required.",
        "line": 361,
        "column": 3,
        "nodeType": "PropertyDefinition",
        "messageId": "property",
        "endLine": 361,
        "endColumn": 37,
        "fix": { "range": [13594, 13594], "text": "readonly " },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "functional/prefer-readonly-type",
        "severity": 2,
        "message": "A readonly modifier is required.",
        "line": 365,
        "column": 3,
        "nodeType": "PropertyDefinition",
        "messageId": "property",
        "endLine": 365,
        "endColumn": 30,
        "fix": { "range": [13984, 13984], "text": "readonly " },
        "suppressions": [
          {
            "kind": "directive",
            "justification": "These fields are intentionally mutable for state management"
          }
        ]
      },
      {
        "ruleId": "functional/prefer-readonly-type",
        "severity": 2,
        "message": "A readonly modifier is required.",
        "line": 367,
        "column": 3,
        "nodeType": "PropertyDefinition",
        "messageId": "property",
        "endLine": 367,
        "endColumn": 44,
        "fix": { "range": [14139, 14139], "text": "readonly " },
        "suppressions": [
          {
            "kind": "directive",
            "justification": "These fields are intentionally mutable for state management"
          }
        ]
      },
      {
        "ruleId": "functional/immutable-data",
        "severity": 2,
        "message": "Modifying an existing object/array is not allowed.",
        "line": 550,
        "column": 5,
        "nodeType": "AssignmentExpression",
        "messageId": "generic",
        "endLine": 550,
        "endColumn": 44,
        "suppressions": [
          {
            "kind": "directive",
            "justification": "controlled state transition"
          }
        ]
      },
      {
        "ruleId": "functional/no-let",
        "severity": 2,
        "message": "Unexpected let, use const instead.",
        "line": 553,
        "column": 5,
        "nodeType": "VariableDeclaration",
        "messageId": "generic",
        "endLine": 553,
        "endColumn": 65,
        "suppressions": [
          {
            "kind": "directive",
            "justification": "temporary variables for cleanup"
          }
        ]
      },
      {
        "ruleId": "functional/no-let",
        "severity": 2,
        "message": "Unexpected let, use const instead.",
        "line": 555,
        "column": 5,
        "nodeType": "VariableDeclaration",
        "messageId": "generic",
        "endLine": 555,
        "endColumn": 66,
        "suppressions": [
          {
            "kind": "directive",
            "justification": "temporary variables for cleanup"
          }
        ]
      },
      {
        "ruleId": "functional/no-let",
        "severity": 2,
        "message": "Unexpected let, use const instead.",
        "line": 557,
        "column": 5,
        "nodeType": "VariableDeclaration",
        "messageId": "generic",
        "endLine": 557,
        "endColumn": 55,
        "suppressions": [
          {
            "kind": "directive",
            "justification": "temporary variables for cleanup"
          }
        ]
      },
      {
        "ruleId": "functional/immutable-data",
        "severity": 2,
        "message": "Modifying an existing object/array is not allowed.",
        "line": 656,
        "column": 5,
        "nodeType": "AssignmentExpression",
        "messageId": "generic",
        "endLine": 656,
        "endColumn": 46,
        "suppressions": [
          {
            "kind": "directive",
            "justification": "controlled append to internal list reference"
          }
        ]
      },
      {
        "ruleId": "functional/immutable-data",
        "severity": 2,
        "message": "Modifying a set is not allowed.",
        "line": 659,
        "column": 7,
        "nodeType": "CallExpression",
        "messageId": "set",
        "endLine": 659,
        "endColumn": 37,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "sonarjs/cognitive-complexity",
        "severity": 2,
        "message": "Refactor this function to reduce its Cognitive Complexity from 27 to the 18 allowed.",
        "line": 730,
        "column": 10,
        "nodeType": null,
        "messageId": "refactorFunction",
        "endLine": 730,
        "endColumn": 36,
        "suppressions": [
          {
            "kind": "directive",
            "justification": "Security-critical branching kept explicit and small; further refactor would obscure error handling"
          }
        ]
      },
      {
        "ruleId": "functional/no-let",
        "severity": 2,
        "message": "Unexpected let, use const instead.",
        "line": 747,
        "column": 9,
        "nodeType": "VariableDeclaration",
        "messageId": "generic",
        "endLine": 747,
        "endColumn": 41,
        "suppressions": [
          {
            "kind": "directive",
            "justification": "temporary holder for cleanup"
          }
        ]
      },
      {
        "ruleId": "functional/no-let",
        "severity": 2,
        "message": "Unexpected let, use const instead.",
        "line": 883,
        "column": 5,
        "nodeType": "VariableDeclaration",
        "messageId": "generic",
        "endLine": 883,
        "endColumn": 60,
        "suppressions": [
          {
            "kind": "directive",
            "justification": "timerId is reassigned in finally"
          }
        ]
      },
      {
        "ruleId": "functional/immutable-data",
        "severity": 2,
        "message": "Modifying an existing object/array is not allowed.",
        "line": 890,
        "column": 11,
        "nodeType": "AssignmentExpression",
        "messageId": "generic",
        "endLine": 890,
        "endColumn": 37,
        "suppressions": [
          { "kind": "directive", "justification": "Clearing event handler" }
        ]
      },
      {
        "ruleId": "unicorn/no-null",
        "severity": 2,
        "message": "Use `undefined` instead of `null`.",
        "line": 890,
        "column": 33,
        "nodeType": "Literal",
        "messageId": "error",
        "endLine": 890,
        "endColumn": 37,
        "suggestions": [
          {
            "messageId": "replace",
            "fix": { "range": [31913, 31917], "text": "undefined" },
            "data": {},
            "desc": "Replace `null` with `undefined`."
          }
        ],
        "suppressions": [
          { "kind": "directive", "justification": "Clearing event handler" }
        ]
      },
      {
        "ruleId": "functional/immutable-data",
        "severity": 2,
        "message": "Modifying an existing object/array is not allowed.",
        "line": 903,
        "column": 7,
        "nodeType": "AssignmentExpression",
        "messageId": "generic",
        "endLine": 926,
        "endColumn": 8,
        "suppressions": [
          {
            "kind": "directive",
            "justification": "Controlled assignment for lifecycle"
          }
        ]
      },
      {
        "ruleId": "functional/immutable-data",
        "severity": 2,
        "message": "Modifying an existing object/array is not allowed.",
        "line": 933,
        "column": 11,
        "nodeType": "AssignmentExpression",
        "messageId": "generic",
        "endLine": 933,
        "endColumn": 37,
        "suppressions": [
          { "kind": "directive", "justification": "Clearing event handler" }
        ]
      },
      {
        "ruleId": "unicorn/no-null",
        "severity": 2,
        "message": "Use `undefined` instead of `null`.",
        "line": 933,
        "column": 33,
        "nodeType": "Literal",
        "messageId": "error",
        "endLine": 933,
        "endColumn": 37,
        "suggestions": [
          {
            "messageId": "replace",
            "fix": { "range": [33237, 33241], "text": "undefined" },
            "data": {},
            "desc": "Replace `null` with `undefined`."
          }
        ],
        "suppressions": [
          { "kind": "directive", "justification": "Clearing event handler" }
        ]
      },
      {
        "ruleId": "functional/immutable-data",
        "severity": 2,
        "message": "Modifying an existing object/array is not allowed.",
        "line": 976,
        "column": 7,
        "nodeType": "AssignmentExpression",
        "messageId": "generic",
        "endLine": 997,
        "endColumn": 8,
        "suppressions": [
          {
            "kind": "directive",
            "justification": "Controlled assignment of event handler for request lifecycle. Performance-critical path."
          }
        ]
      },
      {
        "ruleId": "functional/immutable-data",
        "severity": 2,
        "message": "Modifying an existing object/array is not allowed.",
        "line": 1143,
        "column": 5,
        "nodeType": "AssignmentExpression",
        "messageId": "generic",
        "endLine": 1143,
        "endColumn": 51,
        "suppressions": [
          {
            "kind": "directive",
            "justification": "controlled state transition"
          }
        ]
      },
      {
        "ruleId": "functional/immutable-data",
        "severity": 2,
        "message": "Modifying an existing object/array is not allowed.",
        "line": 1170,
        "column": 5,
        "nodeType": "AssignmentExpression",
        "messageId": "generic",
        "endLine": 1170,
        "endColumn": 56,
        "suppressions": [
          {
            "kind": "directive",
            "justification": "Controlled state transition for O(1) port addition. Encapsulated within private method."
          }
        ]
      },
      {
        "ruleId": "functional/immutable-data",
        "severity": 2,
        "message": "Modifying an existing object/array is not allowed.",
        "line": 1184,
        "column": 16,
        "nodeType": "UpdateExpression",
        "messageId": "generic",
        "endLine": 1184,
        "endColumn": 41,
        "suppressions": [
          {
            "kind": "directive",
            "justification": "controlled reservation counter"
          }
        ]
      },
      {
        "ruleId": "functional/immutable-data",
        "severity": 2,
        "message": "Modifying an existing object/array is not allowed.",
        "line": 1186,
        "column": 5,
        "nodeType": "UpdateExpression",
        "messageId": "generic",
        "endLine": 1186,
        "endColumn": 32,
        "suppressions": [
          {
            "kind": "directive",
            "justification": "controlled reservation state update"
          }
        ]
      },
      {
        "ruleId": "functional/immutable-data",
        "severity": 2,
        "message": "Modifying a set is not allowed.",
        "line": 1188,
        "column": 5,
        "nodeType": "CallExpression",
        "messageId": "set",
        "endLine": 1188,
        "endColumn": 36,
        "suppressions": [
          {
            "kind": "directive",
            "justification": "controlled reservation state update"
          }
        ]
      },
      {
        "ruleId": "functional/immutable-data",
        "severity": 2,
        "message": "Modifying a set is not allowed.",
        "line": 1204,
        "column": 5,
        "nodeType": "CallExpression",
        "messageId": "set",
        "endLine": 1204,
        "endColumn": 39,
        "suppressions": [
          { "kind": "directive", "justification": "controlled token removal" }
        ]
      },
      {
        "ruleId": "functional/immutable-data",
        "severity": 2,
        "message": "Modifying an existing object/array is not allowed.",
        "line": 1206,
        "column": 5,
        "nodeType": "AssignmentExpression",
        "messageId": "generic",
        "endLine": 1206,
        "endColumn": 75,
        "suppressions": [
          {
            "kind": "directive",
            "justification": "controlled reservation state update"
          }
        ]
      },
      {
        "ruleId": "functional/immutable-data",
        "severity": 2,
        "message": "Modifying a set is not allowed.",
        "line": 1216,
        "column": 5,
        "nodeType": "CallExpression",
        "messageId": "set",
        "endLine": 1216,
        "endColumn": 39,
        "suppressions": [
          { "kind": "directive", "justification": "controlled token removal" }
        ]
      },
      {
        "ruleId": "functional/immutable-data",
        "severity": 2,
        "message": "Modifying an existing object/array is not allowed.",
        "line": 1218,
        "column": 5,
        "nodeType": "AssignmentExpression",
        "messageId": "generic",
        "endLine": 1218,
        "endColumn": 75,
        "suppressions": [
          {
            "kind": "directive",
            "justification": "controlled reservation state update"
          }
        ]
      },
      {
        "ruleId": "functional/immutable-data",
        "severity": 2,
        "message": "Modifying an existing object/array is not allowed.",
        "line": 1240,
        "column": 7,
        "nodeType": "AssignmentExpression",
        "messageId": "generic",
        "endLine": 1240,
        "endColumn": 58,
        "suppressions": [
          {
            "kind": "directive",
            "justification": "controlled state transition"
          }
        ]
      },
      {
        "ruleId": "functional/immutable-data",
        "severity": 2,
        "message": "Modifying an existing object/array is not allowed.",
        "line": 1259,
        "column": 9,
        "nodeType": "AssignmentExpression",
        "messageId": "generic",
        "endLine": 1259,
        "endColumn": 66,
        "suppressions": [
          {
            "kind": "directive",
            "justification": "controlled state transition"
          }
        ]
      },
      {
        "ruleId": "functional/immutable-data",
        "severity": 2,
        "message": "Modifying an existing object/array is not allowed.",
        "line": 1277,
        "column": 9,
        "nodeType": "AssignmentExpression",
        "messageId": "generic",
        "endLine": 1277,
        "endColumn": 66,
        "suppressions": [
          {
            "kind": "directive",
            "justification": "controlled state transition"
          }
        ]
      },
      {
        "ruleId": "functional/immutable-data",
        "severity": 2,
        "message": "Modifying an existing object/array is not allowed.",
        "line": 1286,
        "column": 9,
        "nodeType": "AssignmentExpression",
        "messageId": "generic",
        "endLine": 1286,
        "endColumn": 66,
        "suppressions": [
          {
            "kind": "directive",
            "justification": "controlled state transition"
          }
        ]
      },
      {
        "ruleId": "functional/immutable-data",
        "severity": 2,
        "message": "Modifying an existing object/array is not allowed.",
        "line": 1300,
        "column": 7,
        "nodeType": "AssignmentExpression",
        "messageId": "generic",
        "endLine": 1300,
        "endColumn": 64,
        "suppressions": [
          {
            "kind": "directive",
            "justification": "controlled state transition"
          }
        ]
      },
      {
        "ruleId": "functional/immutable-data",
        "severity": 2,
        "message": "Modifying an existing object/array is not allowed.",
        "line": 1317,
        "column": 7,
        "nodeType": "AssignmentExpression",
        "messageId": "generic",
        "endLine": 1317,
        "endColumn": 64,
        "suppressions": [
          {
            "kind": "directive",
            "justification": "controlled state transition"
          }
        ]
      },
      {
        "ruleId": "functional/immutable-data",
        "severity": 2,
        "message": "Modifying an existing object/array is not allowed.",
        "line": 1326,
        "column": 7,
        "nodeType": "AssignmentExpression",
        "messageId": "generic",
        "endLine": 1326,
        "endColumn": 64,
        "suppressions": [
          {
            "kind": "directive",
            "justification": "controlled state transition"
          }
        ]
      },
      {
        "ruleId": "functional/no-let",
        "severity": 2,
        "message": "Unexpected let, use const instead.",
        "line": 1366,
        "column": 3,
        "nodeType": "VariableDeclaration",
        "messageId": "generic",
        "endLine": 1366,
        "endColumn": 26,
        "suppressions": [
          {
            "kind": "directive",
            "justification": "response reassignment needed for error handling"
          }
        ]
      }
    ],
    "errorCount": 2,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "// SPDX-License-Identifier: MIT\n// SPDX-FileCopyrightText: © 2025 David Osipov\n// SecureApiSigner — hardened TypeScript implementation with strict integrity defaults\n//\n// Integrity strategy:\n// - `integrity` controls behavior: \"require\" | \"compute\" | \"none\"\n//   - \"require\": a build-time `expectedWorkerScriptHash` (base64 SHA-256) MUST be provided (strict; default).\n//   - \"compute\": the library will fetch the worker script at runtime, compute its hash and proceed (dev-friendly).\n//   - \"none\": skip script hash checks entirely (forbidden in production).\n// - When runtime policy enables Blob workers AND Blob URLs, the signer creates the Worker from the verified bytes\n//   to eliminate the TOCTOU window. Otherwise, URL-based Worker creation is used as a fallback with explicit guards.\n\nimport {\n  InvalidParameterError,\n  WorkerError,\n  RateLimitError,\n  CircuitBreakerError,\n  SecurityKitError,\n} from \"./errors\";\nimport { safeStableStringify } from \"./canonical.js\";\n//   in security-sensitive deployments. \"compute\" is the pragmatic default for npm consumers.\n// - Other hardenings retained: binary-only secrets, handshake, strict runtime guards, canonicalization,\n//   best-effort wiping, rigorous port cleanup, and fixed destroy listener removal.\n//\n// NOTE: For maximum security in production, CI should compute `expectedWorkerScriptHash` and the integritiy mode should be \"require\".\n// If that's impractical for your consumers, \"compute\" offers portability at the cost of the remaining TOCTOU risk.\n\nimport { getSecureRandomBytesSync } from \"./crypto\";\nimport { SHARED_ENCODER } from \"./encoding\";\nimport {\n  bytesToBase64,\n  base64ToBytes,\n  sha256Base64,\n  isLikelyBase64,\n  secureWipeWrapper,\n} from \"./encoding-utils\";\nimport { environment } from \"./environment\";\nimport type {\n  InitMessage,\n  SignRequest,\n  ErrorResponse,\n  WorkerMessage,\n  SignedResponse,\n} from \"./protocol\";\nimport { getLoggingConfig, getRuntimePolicy } from \"./config\";\nimport { VerifiedByteCache } from \"./secure-cache\";\nimport { secureCompare, secureDevelopmentLog } from \"./utils\";\n\n/*\n * NOTE: This file is security-critical and targets a pragmatic balance between\n * strict functional immutability rules and necessary runtime state management\n * (worker lifecycle, active ports, and circuit-breaker). The project enforces\n * aggressive immutability via ESLint; to avoid scattering ad-hoc disables we\n * explicitly relax a small set of rules for this file where mutation is a\n * controlled implementation detail.\n */\n\n/* ========================= Configuration ========================= */\nconst CIRCUIT_BREAKER_FAILURE_THRESHOLD = 10;\nconst CIRCUIT_BREAKER_TIMEOUT_MS = 60_000; // 1 minute\nconst CIRCUIT_BREAKER_SUCCESS_THRESHOLD = 3;\nconst DEFAULT_REQUEST_TIMEOUT_MS = 15_000;\nconst HANDSHAKE_TIMEOUT_MS = 10_000;\nconst DEFAULT_MAX_PENDING_REQUESTS = 200;\nconst DEFAULT_DESTROY_ACK_TIMEOUT_MS = 2_000; // wait for worker to confirm destroy\nconst HANDSHAKE_NONCE_BYTES = 16;\nconst DEFAULT_MAX_CANONICAL_LENGTH = 2_000_000; // 2MB limit to prevent DoS\n\n/* ========================= Types ========================= */\n\nexport type IntegrityMode = \"require\" | \"compute\" | \"none\";\n\nexport type SecureApiSignerInit = {\n  readonly secret: ArrayBuffer | Uint8Array; // production: binary only\n  readonly workerUrl: string | URL;\n  readonly useModuleWorker?: boolean;\n  /**\n   * Optional. If provided + integrity === 'require' will be compared. Base64 SHA-256.\n   */\n  readonly expectedWorkerScriptHash?: string;\n  readonly allowCrossOriginWorkerOrigins?: readonly string[]; // allowlist for cross-origin workers\n  readonly kid?: string;\n  readonly maxPendingRequests?: number;\n  readonly requestTimeoutMs?: number;\n  readonly requestHandshakeTimeoutMs?: number;\n  readonly destroyAckTimeoutMs?: number;\n  readonly wipeProvidedSecret?: boolean; // default true — best-effort\n  /**\n   * Controls integrity behaviour when publishing to npm:\n   * - \"require\": throw unless expectedWorkerScriptHash is provided and matches fetched script.\n   * - \"compute\": fetch and compute script hash at runtime and proceed (default). This is portable.\n   * - \"none\": skip hashing (not recommended).\n   */\n  readonly integrity?: IntegrityMode;\n  /**\n   * Strongly discouraged. In production (environment.isProduction), integrity: 'compute' retains a TOCTOU window.\n   * By default, we refuse to use 'compute' in production to uphold Zero Trust. Set this to true only if you have\n   * immutable, fingerprinted worker assets with HTTPS and origin integrity controls in place.\n   */\n  readonly allowComputeIntegrityInProduction?: boolean;\n\n  // NEW: explicit rate limiting knobs for the worker\n  readonly rateLimitPerMinute?: number;\n  readonly maxConcurrentSigning?: number;\n\n  // NEW: optional handshake policy overrides to prevent config drift\n  readonly handshakeMaxNonceLength?: number;\n  readonly allowedNonceFormats?: readonly import(\"./constants\").NonceFormat[];\n};\n\nexport type SignedPayload = {\n  readonly signature: string; // base64\n  readonly nonce: string;\n  readonly timestamp: number;\n  readonly kid?: string;\n  readonly algorithm: \"HMAC-SHA256\";\n};\n\nexport type SignContext = {\n  readonly method?: string;\n  readonly path?: string;\n  readonly body?: unknown;\n};\n\ntype CircuitBreakerState = \"closed\" | \"open\" | \"half-open\";\n\ntype CircuitBreakerStatus = {\n  readonly state: CircuitBreakerState;\n  readonly failureCount: number;\n  readonly lastFailureTime: number;\n  readonly successCount: number;\n};\n\ntype ActivePortMeta = {\n  readonly port: MessagePort;\n  readonly reject: (reason: unknown) => void;\n  readonly timer: ReturnType<typeof setTimeout>;\n};\n\ntype SignerState = {\n  readonly destroyed: boolean;\n  readonly activePorts: ReadonlyMap<MessagePort, ActivePortMeta>;\n  readonly circuitBreaker: CircuitBreakerStatus;\n};\n\n/** Generate cryptographically random request ID to avoid mutable counter */\nfunction generateRequestId(): number {\n  const bytes = getSecureRandomBytesSync(4);\n  // Convert to positive 32-bit integer, Uint8Array indices are guaranteed to exist\n  return (\n    (((bytes[0] ?? 0) << 24) |\n      ((bytes[1] ?? 0) << 16) |\n      ((bytes[2] ?? 0) << 8) |\n      (bytes[3] ?? 0)) >>>\n    0\n  );\n}\n\n/* ========================= Utilities ========================= */\n\n// Use shared encoding-utils for base64/hash/wipe helpers\n\n// Small, conservative cross-call cache for canonical JSON strings.\n// WeakMap ensures GC-bound entries; we only cache deeply frozen roots (shallow audit)\n// with primitive or frozen nested values to avoid stale reads after mutation.\nconst STRINGIFY_CACHE: WeakMap<object, string> = new WeakMap();\n\nfunction canCacheRoot(root: unknown): boolean {\n  if (root === null || typeof root !== \"object\") return false;\n  if (!Object.isFrozen(root)) return false;\n  if (Array.isArray(root)) {\n    const array = root as readonly unknown[];\n    for (const v of array) {\n      if (v === null) continue;\n      const t = typeof v;\n      if (t === \"string\" || t === \"boolean\") continue;\n      if (t === \"number\" && Number.isFinite(v as number)) continue;\n      if (t === \"object\") {\n        if (!Object.isFrozen(v as object)) return false;\n        continue;\n      }\n      return false; // functions/symbols/bigint/NaN/Infinity disqualify\n    }\n    return true;\n  }\n  const object = root as Record<string, unknown>;\n  const keys = Object.keys(object);\n  for (const k of keys) {\n    const d = Object.getOwnPropertyDescriptor(object, k);\n    if (!d || !d.enumerable || !(\"value\" in d)) return false;\n    const v = (d as PropertyDescriptor & { readonly value: unknown }).value;\n    if (v === null) continue;\n    const t = typeof v;\n    if (t === \"string\" || t === \"boolean\") continue;\n    if (t === \"number\" && Number.isFinite(v as number)) continue;\n    if (t === \"object\") {\n      if (!Object.isFrozen(v as object)) return false;\n      continue;\n    }\n    return false;\n  }\n  return true;\n}\n\nfunction stringifyWithCache(value: unknown): string {\n  if (value !== null && typeof value === \"object\") {\n    const cached = STRINGIFY_CACHE.get(value as object);\n    if (cached !== undefined) return cached;\n    if (canCacheRoot(value)) {\n      const s = safeStableStringify(value);\n      STRINGIFY_CACHE.set(value as object, s);\n      return s;\n    }\n  }\n  return safeStableStringify(value);\n}\n\n/* ========================= Runtime Guards for messages ========================= */\n\nfunction isSignedMessage(d: unknown): d is SignedResponse {\n  if (d === undefined || d === null || typeof d !== \"object\") return false;\n  if (!(\"type\" in d)) return false;\n  const message = d as { readonly [key: string]: unknown };\n  if (message[\"type\"] !== \"signed\" || typeof message[\"signature\"] !== \"string\")\n    return false;\n  try {\n    const bytes = base64ToBytes(message[\"signature\"]);\n    return bytes.length === 32; // HMAC-SHA256 raw length\n  } catch {\n    return false;\n  }\n}\n\nfunction isErrorResponse(d: unknown): d is ErrorResponse {\n  if (d === undefined || d === null || typeof d !== \"object\") return false;\n  if (!(\"type\" in d)) return false;\n  const message = d as { readonly [key: string]: unknown };\n  return message[\"type\"] === \"error\" && typeof message[\"reason\"] === \"string\";\n}\n\nfunction isInitResponse(d: unknown): d is { readonly type: \"initialized\" } {\n  if (d === undefined || d === null || typeof d !== \"object\") return false;\n  if (!(\"type\" in d)) return false;\n  const message = d as { readonly [key: string]: unknown };\n  return message[\"type\"] === \"initialized\";\n}\n\nfunction isDestroyedResponse(d: unknown): d is { readonly type: \"destroyed\" } {\n  if (d === undefined || d === null || typeof d !== \"object\") return false;\n  if (!(\"type\" in d)) return false;\n  const message = d as { readonly [key: string]: unknown };\n  return message[\"type\"] === \"destroyed\";\n}\n\nfunction isHandshakeResponse(\n  d: unknown,\n): d is { readonly type: \"handshake\"; readonly signature: string } {\n  if (d === undefined || d === null || typeof d !== \"object\") return false;\n  if (!(\"type\" in d)) return false;\n  const message = d as { readonly [key: string]: unknown };\n  return (\n    message[\"type\"] === \"handshake\" && typeof message[\"signature\"] === \"string\"\n  );\n}\n\n/* ========================= Worker URL validation ========================= */\n\nfunction normalizeAndValidateWorkerUrl(\n  raw: string | URL,\n  allowCrossOriginWorkerOrigins?: readonly string[],\n): URL {\n  const url = new URL(String(raw), location.href);\n  // Only allow http(s) schemes for worker URLs\n  if (url.protocol !== \"http:\" && url.protocol !== \"https:\") {\n    throw new InvalidParameterError(\n      `workerUrl must use http(s) scheme, got ${url.protocol}`,\n    );\n  }\n  // In production, require HTTPS to avoid mixed content and downgrade risks\n  if (environment.isProduction && url.protocol !== \"https:\") {\n    throw new InvalidParameterError(\n      `In production, workerUrl must use https:, got ${url.protocol}`,\n    );\n  }\n  const sameOrigin =\n    url.protocol === location.protocol &&\n    url.hostname === location.hostname &&\n    url.port === location.port;\n  if (!sameOrigin) {\n    if (!allowCrossOriginWorkerOrigins?.includes(url.origin)) {\n      throw new InvalidParameterError(\n        `workerUrl must be same-origin by default. To allow cross-origin workers, pass allowCrossOriginWorkerOrigins including \"${url.origin}\".`,\n      );\n    }\n  }\n  return url;\n}\n\n/* ========================= Transfer buffer preparation ========================= */\n\nfunction prepareTransferBuffer(\n  secret: ArrayBuffer | Uint8Array,\n  wipeProvidedSecret = true,\n): ArrayBuffer {\n  const inputView =\n    secret instanceof ArrayBuffer ? new Uint8Array(secret) : secret;\n\n  const transfer = new Uint8Array(inputView.length);\n  transfer.set(inputView);\n\n  if (wipeProvidedSecret) {\n    try {\n      secureWipeWrapper(inputView);\n    } catch {\n      // best-effort only\n    }\n  }\n\n  return transfer.buffer;\n}\n\n/* ========================= SecureApiSigner Class ========================= */\n\nexport class SecureApiSigner {\n  readonly #worker: Worker;\n  readonly #ready: Promise<void>;\n  readonly #requestTimeoutMs: number;\n  readonly #maxPendingRequests: number;\n  readonly #kid: string | undefined;\n  readonly #handshakeTimeoutMs: number;\n  readonly #destroyAckTimeoutMs: number;\n  readonly #computedWorkerHash: string | undefined;\n\n  // NEW: Store rate limiting configuration for observability\n  readonly #rateLimitPerMinute: number;\n  readonly #maxConcurrentSigning: number;\n\n  // eslint-disable-next-line functional/prefer-readonly-type -- These fields are intentionally mutable for state management\n  #state: SignerState = {\n    destroyed: false,\n    activePorts: new Map(),\n    circuitBreaker: {\n      state: \"closed\",\n      failureCount: 0,\n      lastFailureTime: 0,\n      successCount: 0,\n    },\n  };\n  // Reservation tokens to synchronously reserve pending slots before async work\n  // eslint-disable-next-line functional/prefer-readonly-type -- These fields are intentionally mutable for state management\n  #pendingReservations = 0;\n  readonly #reservationTokens = new Set<number>();\n  // eslint-disable-next-line functional/prefer-readonly-type -- These fields are intentionally mutable for state management\n  #nextReservationId = 1;\n  // Track created blob URLs for cleanup to avoid leaking object URLs\n  // Legacy compatibility Set (kept for external expectations); do not mutate directly\n  // eslint-disable-next-line functional/prefer-readonly-type\n  readonly _createdBlobUrls: Set<string> = new Set();\n  // Preferred immutable list for internal tracking\n  // eslint-disable-next-line functional/prefer-readonly-type\n  #blobUrls: readonly string[] = [];\n  // #pendingReservations provides synchronous slot reservation to prevent races under concurrent sign() calls.\n  // Concurrency is enforced via the size of #state.activePorts after reservation is converted into an active port.\n  // eslint-disable-next-line functional/prefer-readonly-type -- These fields are intentionally mutable for state management\n  #resolveReady!: () => void;\n  // eslint-disable-next-line functional/prefer-readonly-type -- These fields are intentionally mutable for state management\n  #rejectReady!: (reason: unknown) => void;\n\n  private constructor(\n    worker: Worker,\n    options: SecureApiSignerInit,\n    computedHash?: string,\n  ) {\n    this.#worker = worker;\n    this.#kid = options.kid;\n\n    // Initialize basic configuration first\n    this.#requestTimeoutMs =\n      options.requestTimeoutMs ?? DEFAULT_REQUEST_TIMEOUT_MS;\n    this.#maxPendingRequests =\n      options.maxPendingRequests ?? DEFAULT_MAX_PENDING_REQUESTS;\n    this.#destroyAckTimeoutMs =\n      options.destroyAckTimeoutMs ?? DEFAULT_DESTROY_ACK_TIMEOUT_MS;\n    this.#computedWorkerHash = computedHash;\n    this.#handshakeTimeoutMs =\n      options.requestHandshakeTimeoutMs ?? HANDSHAKE_TIMEOUT_MS;\n\n    // Compute and store rate limiting configuration\n    const cfg = getLoggingConfig();\n    this.#rateLimitPerMinute =\n      typeof options.rateLimitPerMinute === \"number\"\n        ? Math.max(0, Math.floor(options.rateLimitPerMinute))\n        : Math.max(0, Math.floor(cfg.rateLimitTokensPerMinute ?? 0));\n\n    this.#maxConcurrentSigning =\n      typeof options.maxConcurrentSigning === \"number\"\n        ? Math.min(Math.max(1, Math.floor(options.maxConcurrentSigning)), 1000)\n        : Math.min(this.#maxPendingRequests, 1000);\n\n    this.#ready = new Promise<void>((resolve, reject) => {\n      this.#resolveReady = resolve;\n      this.#rejectReady = reject;\n    });\n\n    this.#worker.addEventListener(\"message\", this.#handleWorkerMessage);\n    this.#worker.addEventListener(\"error\", this.#handleWorkerError);\n    this.#worker.addEventListener(\"messageerror\", this.#handleWorkerError);\n  }\n\n  /**\n   * Create signer factory. Integrity defaults to 'require' for maximum security.\n   * For production deployments, always provide expectedWorkerScriptHash and use integrity: 'require'.\n   */\n  public static async create(\n    init: SecureApiSignerInit & { readonly integrity?: IntegrityMode },\n  ): Promise<SecureApiSigner> {\n    // Change default: require strict integrity unless explicitly overridden.\n    const integrity: IntegrityMode = init.integrity ?? \"require\";\n    if (environment.isProduction && integrity === \"none\") {\n      throw new SecurityKitError(\n        \"Integrity mode 'none' is forbidden in production. Use 'require' with an expectedWorkerScriptHash.\",\n        \"E_INTEGRITY_REQUIRED\",\n      );\n    }\n\n    // Refuse 'compute' in production by default unless explicitly allowed via both\n    // the init option and the runtime policy. Perform this check early so tests and\n    // callers receive a SecurityKitError rather than a URL validation error.\n    if (\n      integrity === \"compute\" &&\n      environment.isProduction &&\n      !(\n        init.allowComputeIntegrityInProduction &&\n        getRuntimePolicy().allowComputeIntegrityInProductionDefault\n      )\n    ) {\n      throw new SecurityKitError(\n        \"Integrity mode 'compute' is not allowed in production. Provide expectedWorkerScriptHash and use integrity: 'require', or explicitly allow 'compute' in production via BOTH init.allowComputeIntegrityInProduction AND setRuntimePolicy({ allowComputeIntegrityInProductionDefault: true }).\",\n        \"E_INTEGRITY_REQUIRED\",\n      );\n    }\n\n    const url = normalizeAndValidateWorkerUrl(\n      init.workerUrl,\n      init.allowCrossOriginWorkerOrigins,\n    );\n\n    // Validate/fetch script per chosen integrity mode\n    const computedHash = await SecureApiSigner.#validateAndFetchWorkerScript(\n      url,\n      init,\n      integrity,\n    );\n\n    const signer = SecureApiSigner.#initializeWorkerAndSigner(\n      url,\n      init,\n      computedHash,\n      integrity,\n    );\n\n    await signer.#transferSecretAndHandshake(init);\n\n    return signer;\n  }\n\n  /** Convenience factory for base64 secret */\n  public static async createFromBase64(\n    init: Omit<SecureApiSignerInit, \"secret\"> & {\n      readonly secret: string;\n      readonly integrity?: IntegrityMode;\n    },\n  ) {\n    if (!isLikelyBase64(init.secret))\n      throw new InvalidParameterError(\"secret must be base64\");\n    const bytes = base64ToBytes(init.secret);\n    try {\n      return await SecureApiSigner.create({ ...init, secret: bytes });\n    } finally {\n      try {\n        secureWipeWrapper(bytes);\n      } catch {\n        /* ignore */\n      }\n    }\n  }\n\n  /** Public sign method */\n  public async sign(\n    payload: unknown,\n    context?: SignContext,\n  ): Promise<SignedPayload> {\n    if (this.#state.destroyed)\n      throw new InvalidParameterError(\"Signer destroyed\");\n    this.#checkCircuitBreaker();\n    // Reserve a pending slot synchronously to avoid races when many callers invoke\n    // sign() concurrently. The reservation will be converted to an active port\n    // when #postSignRequest calls #addActivePort, which drains one token.\n    const reservationId = this.#reservePendingSlot();\n    try {\n      await this.#ready;\n    } catch (error) {\n      // release reservation if readiness failed\n      this.#releaseReservationIfPresent(reservationId);\n      throw error;\n    }\n\n    // Generate a base64 nonce (server expects standard base64 encoding)\n    const nonceBytes = getSecureRandomBytesSync(HANDSHAKE_NONCE_BYTES);\n    const nonce = bytesToBase64(nonceBytes);\n    const timestamp = Date.now();\n    const canonical = await this.#computeCanonical(\n      payload,\n      context,\n      timestamp,\n      nonce,\n    );\n\n    try {\n      try {\n        const signature = await this.#postSignRequest(canonical);\n        this.#recordSuccess();\n        return {\n          signature,\n          nonce,\n          timestamp,\n          kid: this.#kid ?? undefined,\n          algorithm: \"HMAC-SHA256\",\n        } as SignedPayload;\n      } catch (error) {\n        this.#recordFailure();\n        throw error;\n      }\n    } finally {\n      // Best-effort wipe of nonce bytes to avoid leaving entropy in memory\n      try {\n        secureWipeWrapper(nonceBytes);\n      } catch {\n        /* ignore wipe failures */\n      }\n      // If our reservation was never converted to an active port, release it now.\n      this.#releaseReservationIfPresent(reservationId);\n    }\n  }\n\n  /** Destroy: graceful with ack, always cleans up listeners (fixed race) */\n  public async destroy(): Promise<void> {\n    if (this.#state.destroyed) return;\n    // eslint-disable-next-line functional/immutable-data -- controlled state transition\n    this.#state = this.#withDestroyed(true);\n\n    // eslint-disable-next-line functional/no-let -- temporary variables for cleanup\n    let destroyTimer: ReturnType<typeof setTimeout> | undefined;\n    // eslint-disable-next-line functional/no-let -- temporary variables for cleanup\n    let onDestroyed: ((event: MessageEvent) => void) | undefined;\n    // eslint-disable-next-line functional/no-let -- temporary variables for cleanup\n    let onError: ((event: Event) => void) | undefined;\n\n    const cleanupListeners = () => {\n      try {\n        if (onDestroyed)\n          this.#worker.removeEventListener(\"message\", onDestroyed);\n      } catch {\n        /* empty */\n      }\n      try {\n        if (onError) this.#worker.removeEventListener(\"error\", onError);\n      } catch {\n        /* empty */\n      }\n    };\n\n    const destroyPromise = new Promise<void>((resolve) => {\n      onDestroyed = (event: MessageEvent) => {\n        try {\n          const data: unknown = event.data;\n          if (isDestroyedResponse(data)) {\n            cleanupListeners();\n            resolve();\n          }\n        } catch {\n          cleanupListeners();\n          resolve();\n        }\n      };\n\n      onError = () => {\n        cleanupListeners();\n        resolve();\n      };\n      this.#worker.addEventListener(\"message\", onDestroyed);\n      this.#worker.addEventListener(\"error\", onError);\n      try {\n        this.#worker.postMessage({ type: \"destroy\" });\n      } catch {\n        /* ignore */\n      }\n    });\n\n    const timeoutMs = this.#destroyAckTimeoutMs;\n    await Promise.race([\n      destroyPromise,\n      new Promise<void>((resolve) => {\n        destroyTimer = setTimeout(() => {\n          cleanupListeners();\n          resolve();\n        }, timeoutMs);\n      }),\n    ]).finally(() => {\n      if (destroyTimer) clearTimeout(destroyTimer);\n      try {\n        this.#worker.terminate();\n      } catch {\n        /* empty */\n      }\n      try {\n        for (const u of this.#blobUrls) {\n          try {\n            URL.revokeObjectURL(String(u));\n          } catch {\n            /* ignore */\n          }\n        }\n      } catch {\n        /* ignore */\n      }\n      this.#cleanup();\n    });\n  }\n\n  /* ========================= Pure state transitions ========================= */\n\n  /** Create new state with updated active ports (immutable) */\n  #withActivePorts(\n    activePorts: ReadonlyMap<MessagePort, ActivePortMeta>,\n  ): SignerState {\n    return { ...this.#state, activePorts };\n  }\n\n  /** Create new state with updated circuit breaker (immutable) */\n  #withCircuitBreaker(circuitBreaker: CircuitBreakerStatus): SignerState {\n    return { ...this.#state, circuitBreaker };\n  }\n\n  /** Create new state with destroyed flag (immutable) */\n  #withDestroyed(destroyed: boolean): SignerState {\n    return { ...this.#state, destroyed };\n  }\n\n  /* ========================= Private helpers ========================= */\n\n  // Track blob URLs immutably and mirror to legacy Set for external read-only use\n  #trackBlobUrl(url: string): void {\n    // Replace the internal list reference immutably\n    // eslint-disable-next-line functional/immutable-data -- controlled append to internal list reference\n    this.#blobUrls = [...this.#blobUrls, url];\n    try {\n      // eslint-disable-next-line functional/immutable-data\n      this._createdBlobUrls.add(url);\n    } catch {\n      /* ignore */\n    }\n  }\n\n  static async #validateAndFetchWorkerScript(\n    url: URL,\n    init: SecureApiSignerInit,\n    integrity: IntegrityMode,\n  ): Promise<string | undefined> {\n    const policy = getRuntimePolicy();\n    // 'require' demands expected hash\n    if (\n      integrity === \"require\" &&\n      typeof init.expectedWorkerScriptHash !== \"string\"\n    ) {\n      throw new SecurityKitError(\n        \"Integrity mode 'require' demands expectedWorkerScriptHash (base64 SHA-256).\",\n        \"E_INTEGRITY_REQUIRED\",\n      );\n    }\n\n    // Fail early if 'compute' is attempted in production without explicit OK\n    if (\n      integrity === \"compute\" &&\n      environment.isProduction &&\n      !(\n        init.allowComputeIntegrityInProduction &&\n        policy.allowComputeIntegrityInProductionDefault\n      )\n    ) {\n      throw new SecurityKitError(\n        \"Integrity mode 'compute' is not allowed in production. Provide expectedWorkerScriptHash and use integrity: 'require', or explicitly allow 'compute' in production via BOTH init.allowComputeIntegrityInProduction AND setRuntimePolicy({ allowComputeIntegrityInProductionDefault: true }).\",\n        \"E_INTEGRITY_REQUIRED\",\n      );\n    }\n\n    // Fetch script bytes when 'compute' or when we want to verify expected hash\n    const needFetch =\n      integrity === \"compute\" ||\n      typeof init.expectedWorkerScriptHash === \"string\" ||\n      (integrity === \"require\" && getRuntimePolicy().allowBlobWorkers);\n\n    if (!needFetch) return undefined;\n\n    const bytes = await fetchAndValidateScript(url);\n    const hash = await sha256Base64(bytes);\n\n    if (typeof init.expectedWorkerScriptHash === \"string\") {\n      if (!secureCompare(hash, init.expectedWorkerScriptHash)) {\n        throw new SecurityKitError(\n          \"Worker script integrity mismatch.\",\n          \"E_SIGNATURE_MISMATCH\",\n        );\n      }\n    }\n\n    // Store verified bytes for Blob worker creation if Blob workers are allowed\n    if (\n      (integrity === \"compute\" || integrity === \"require\") &&\n      policy.allowBlobWorkers &&\n      policy.enableWorkerByteCache\n    ) {\n      VerifiedByteCache.set(url.href, new Uint8Array(bytes));\n    }\n\n    return hash;\n  }\n\n  // eslint-disable-next-line sonarjs/cognitive-complexity -- Security-critical branching kept explicit and small; further refactor would obscure error handling\n  static #initializeWorkerAndSigner(\n    url: URL,\n    init: SecureApiSignerInit,\n    computedHash?: string,\n    integrity?: IntegrityMode,\n  ): SecureApiSigner {\n    const policy = getRuntimePolicy();\n    const canBlob =\n      (integrity === \"compute\" || integrity === \"require\") &&\n      policy.allowBlobWorkers &&\n      policy.allowBlobUrls;\n\n    if (canBlob) {\n      const cachedBytes = VerifiedByteCache.get(url.href);\n      if (cachedBytes) {\n        // Ensure any created blob URL is revoked on failure to avoid leaks\n        // eslint-disable-next-line functional/no-let -- temporary holder for cleanup\n        let blobUrl: string | undefined;\n        try {\n          const copied = new Uint8Array(cachedBytes);\n          const blob = new Blob([copied.buffer], { type: \"text/javascript\" });\n          blobUrl = URL.createObjectURL(blob);\n          const worker = new Worker(blobUrl, {\n            type: init.useModuleWorker ? \"module\" : \"classic\",\n          });\n          const signer = new SecureApiSigner(worker, init, computedHash);\n          signer.#trackBlobUrl(blobUrl);\n          return signer;\n        } catch {\n          // Best-effort revoke if blobUrl was created prior to failure\n          try {\n            if (blobUrl) URL.revokeObjectURL(blobUrl);\n          } catch (error) {\n            // Log at debug level in development only; continue with secure failure.\n            try {\n              secureDevelopmentLog(\n                \"debug\",\n                \"secure-api-signer\",\n                \"revokeObjectURL failed during CSP cleanup\",\n                { error: String(error) },\n              );\n            } catch {\n              /* ignore secondary log failures */\n            }\n          }\n          // Fail closed for CSP violations regardless of environment to enforce\n          // strict policy and surface misconfiguration early (ASVS L3 posture).\n          throw new SecurityKitError(\n            \"Blob worker creation blocked (likely by CSP).\",\n            \"E_CSP_BLOCKED\",\n          );\n        }\n      }\n      // In production + 'require' + Blob allowed, if we do not have verified bytes\n      // available (e.g., cache disabled), do NOT fall back to URL worker — fail loud.\n      if (environment.isProduction && integrity === \"require\") {\n        throw new SecurityKitError(\n          \"Verified worker bytes unavailable for Blob instantiation; enable worker byte cache or disable Blob workers.\",\n          \"E_CONFIG\",\n        );\n      }\n    }\n\n    // Fallback to URL worker\n    const worker = new Worker(String(url), {\n      type: init.useModuleWorker ? \"module\" : \"classic\",\n    });\n    return new SecureApiSigner(worker, init, computedHash);\n  }\n\n  async #transferSecretAndHandshake(init: SecureApiSignerInit): Promise<void> {\n    const handshakeTimer = setTimeout(() => {\n      this.#rejectReady(new WorkerError(\"Worker initialization timed out.\"));\n    }, this.#handshakeTimeoutMs);\n    void this.#ready.finally(() => clearTimeout(handshakeTimer));\n\n    try {\n      // Accept ArrayBuffer or any ArrayBuffer view (Uint8Array, Buffer, DataView, etc.)\n      if (\n        !(init.secret instanceof ArrayBuffer || ArrayBuffer.isView(init.secret))\n      ) {\n        throw new InvalidParameterError(\n          \"secret must be ArrayBuffer or an ArrayBuffer view (e.g. Uint8Array)\",\n        );\n      }\n      const wipeProvided = init.wipeProvidedSecret !== false;\n      const transferBuffer = prepareTransferBuffer(init.secret, wipeProvided);\n\n      // Build worker options object with proper typing\n      const baseWorkerOptions = {\n        rateLimitPerMinute: this.#rateLimitPerMinute,\n        maxConcurrentSigning: this.#maxConcurrentSigning,\n        dev: environment.isDevelopment,\n      };\n\n      // Add handshake overrides if provided to prevent config drift\n      const workerOptions = {\n        ...baseWorkerOptions,\n        ...(init.handshakeMaxNonceLength !== undefined && {\n          handshakeMaxNonceLength: Math.max(\n            1,\n            Math.floor(init.handshakeMaxNonceLength),\n          ),\n        }),\n        ...(init.allowedNonceFormats !== undefined && {\n          allowedNonceFormats: init.allowedNonceFormats,\n        }),\n      };\n\n      const initMessage: InitMessage = {\n        type: \"init\",\n        secretBuffer: transferBuffer,\n        workerOptions,\n        ...(init.kid && { kid: init.kid }),\n      };\n      this.#worker.postMessage(initMessage, [transferBuffer]);\n    } catch (error) {\n      try {\n        await this.destroy();\n      } catch {\n        /* ignore */\n      }\n      const error_ =\n        error instanceof Error ? error : new WorkerError(String(error));\n      throw new WorkerError(\n        `Failed to post secret to worker: ${error_.message}`,\n      );\n    }\n\n    try {\n      await this.#performHandshake();\n    } catch (error) {\n      try {\n        await this.destroy();\n      } catch {\n        /* ignore */\n      }\n      throw error;\n    }\n  }\n\n  readonly #performHandshake = async (): Promise<void> => {\n    const channel = new MessageChannel();\n    const { port1: localPort, port2: workerPort } = channel;\n\n    const timerMs = this.#handshakeTimeoutMs;\n    const nonceBuf = getSecureRandomBytesSync(HANDSHAKE_NONCE_BYTES);\n    const nonceB64 = bytesToBase64(nonceBuf);\n\n    const handshakeRequest = { type: \"handshake\", nonce: nonceB64 };\n\n    // Local timer id so we can clear timeout in finally\n    // eslint-disable-next-line functional/no-let -- timerId is reassigned in finally\n    let timerId: ReturnType<typeof setTimeout> | undefined;\n\n    const handshakePromise = new Promise<void>((resolve, reject) => {\n      // idempotent cleanup helper for handler\n      const cleanupHandler = () => {\n        try {\n          // eslint-disable-next-line -- Clearing event handler\n          localPort.onmessage = null;\n        } catch {\n          /* ignore */\n        }\n        try {\n          localPort.close();\n        } catch {\n          /* ignore */\n        }\n      };\n\n      // assign handler\n      // eslint-disable-next-line functional/immutable-data -- Controlled assignment for lifecycle\n      localPort.onmessage = (event: MessageEvent) => {\n        const data: unknown = event.data;\n        try {\n          if (isHandshakeResponse(data)) {\n            if (!isLikelyBase64(data.signature)) {\n              reject(new WorkerError(\"Handshake response signature malformed\"));\n            } else {\n              resolve();\n            }\n          } else if (isErrorResponse(data)) {\n            reject(new WorkerError(`Worker handshake error: ${data.reason}`));\n          } else {\n            reject(\n              new WorkerError(\"Worker handshake returned unexpected message\"),\n            );\n          }\n        } catch (error) {\n          reject(\n            error instanceof Error ? error : new WorkerError(String(error)),\n          );\n        } finally {\n          cleanupHandler();\n        }\n      };\n    });\n\n    const timeoutPromise = new Promise<void>((_resolve, reject) => {\n      timerId = setTimeout(() => {\n        try {\n          // eslint-disable-next-line -- Clearing event handler\n          localPort.onmessage = null;\n        } catch {\n          /* ignore */\n        }\n        try {\n          localPort.close();\n        } catch {\n          /* ignore */\n        }\n        reject(new WorkerError(\"Handshake timed out\"));\n      }, timerMs);\n    });\n\n    try {\n      this.#worker.postMessage(handshakeRequest, [workerPort]);\n      await Promise.race([handshakePromise, timeoutPromise]);\n      this.#resolveReady();\n    } catch (error) {\n      this.#rejectReady(\n        error instanceof Error ? error : new WorkerError(String(error)),\n      );\n      throw error;\n    } finally {\n      if (timerId) clearTimeout(timerId);\n    }\n  };\n\n  readonly #postSignRequest = (canonical: string): Promise<string> => {\n    return new Promise<string>((resolve, reject) => {\n      const channel = new MessageChannel();\n      const { port1: localPort, port2: workerPort } = channel;\n\n      const timer = setTimeout(() => {\n        this.#removeActivePort(localPort);\n        try {\n          localPort.close();\n        } catch {\n          /* empty */\n        }\n        reject(new WorkerError(\"Sign request timed out\"));\n      }, this.#requestTimeoutMs);\n\n      // eslint-disable-next-line functional/immutable-data -- Controlled assignment of event handler for request lifecycle. Performance-critical path.\n      localPort.onmessage = (event: MessageEvent) => {\n        clearTimeout(timer);\n        const data: unknown = event.data;\n        try {\n          if (isSignedMessage(data)) {\n            resolve(data.signature);\n          } else if (isErrorResponse(data)) {\n            const reason =\n              typeof data.reason === \"string\" ? data.reason : \"Worker error\";\n            reject(new WorkerError(reason));\n          } else {\n            reject(new WorkerError(\"Worker returned malformed response\"));\n          }\n        } finally {\n          this.#removeActivePort(localPort);\n          try {\n            localPort.close();\n          } catch {\n            /* empty */\n          }\n        }\n      };\n\n      // When converting the reservation to an active port, consume one reserved slot\n      // if available. This keeps the synchronous reservation count and activePorts\n      // in balance under concurrent load.\n      // If no reservation exists, allow adding the active port as fallback.\n      const consumed = this.#consumeReservationIfAvailable();\n      if (\n        !consumed &&\n        this.#state.activePorts.size >= this.#maxPendingRequests\n      ) {\n        // No reservation and we've hit the max; reject immediately.\n        clearTimeout(timer);\n        try {\n          localPort.close();\n        } catch {\n          /* ignore */\n        }\n        reject(\n          new RateLimitError(\n            \"too-many-pending-sign-requests: Maximum pending sign requests reached\",\n          ),\n        );\n        return;\n      }\n      this.#addActivePort(localPort, { port: localPort, reject, timer });\n\n      const requestId = generateRequestId();\n      const request: SignRequest = { type: \"sign\", requestId, canonical };\n      try {\n        this.#worker.postMessage(request, [workerPort]);\n      } catch (error) {\n        clearTimeout(timer);\n        this.#removeActivePort(localPort);\n        try {\n          localPort.close();\n        } catch {\n          /* empty */\n        }\n        reject(error instanceof Error ? error : new WorkerError(String(error)));\n      }\n    });\n  };\n\n  async #computeCanonical(\n    payload: unknown,\n    context: SignContext | undefined,\n    timestamp: number,\n    nonce: string,\n  ): Promise<string> {\n    const payloadString = stringifyWithCache(payload);\n    const hasBody = context?.body !== undefined;\n    const bodyString = stringifyWithCache(context?.body ?? undefined);\n    const bodyHash = hasBody\n      ? await sha256Base64(SHARED_ENCODER.encode(bodyString))\n      : \"\";\n    const canonical = [\n      timestamp,\n      nonce,\n      (context?.method ?? \"\").toUpperCase(),\n      context?.path ?? \"\",\n      bodyHash,\n      payloadString,\n      this.#kid ?? \"\",\n    ].join(\".\");\n\n    // Enforce max canonical length to prevent DoS\n    if (canonical.length > DEFAULT_MAX_CANONICAL_LENGTH) {\n      throw new SecurityKitError(\n        `Canonical string exceeds max length ${DEFAULT_MAX_CANONICAL_LENGTH}`,\n        \"E_PAYLOAD_SIZE\",\n      );\n    }\n\n    return canonical;\n  }\n\n  /* ========================= Event handlers ========================= */\n\n  readonly #handleWorkerMessage = (event: MessageEvent): void => {\n    const data = event.data as WorkerMessage;\n    try {\n      if (isInitResponse(data)) {\n        this.#safeResolveReady();\n      } else if (isErrorResponse(data)) {\n        const error = new WorkerError(data.reason ?? \"Worker error\");\n        // Reject ready in case handshake was pending\n        this.#safeRejectReady(error);\n        // Reject currently pending requests but keep signer alive for circuit-breaker\n        try {\n          this.#rejectAllPending(error);\n        } catch {\n          /* ignore */\n        }\n      } else if (isDestroyedResponse(data)) {\n        this.#cleanup();\n      } else {\n        // ignore unknown top-level message\n      }\n    } catch (error) {\n      const error_ =\n        error instanceof Error ? error : new WorkerError(String(error));\n      this.#safeRejectReady(error_);\n      this.#rejectAllPending(error_);\n      this.#cleanup();\n    }\n  };\n\n  readonly #handleWorkerError = (event: Event | MessageEvent): void => {\n    const message = (event as ErrorEvent).message ?? \"Worker error\";\n    const error = new WorkerError(message);\n    this.#safeRejectReady(error);\n    try {\n      this.#rejectAllPending(error);\n    } catch {\n      /* ignore */\n    }\n    // Do not fully cleanup/destroy here; allow circuit breaker to open and tests to recover\n  };\n\n  readonly #cleanup = (): void => {\n    try {\n      this.#worker.removeEventListener(\"message\", this.#handleWorkerMessage);\n      this.#worker.removeEventListener(\"error\", this.#handleWorkerError);\n      this.#worker.removeEventListener(\"messageerror\", this.#handleWorkerError);\n    } catch {\n      /* ignore */\n    }\n    this.#rejectAllPending(new WorkerError(\"Signer destroyed\"));\n  };\n\n  readonly #rejectAllPending = (error: Error): void => {\n    this.#state.activePorts.forEach((meta) => {\n      try {\n        clearTimeout(meta.timer);\n        meta.reject(error);\n        try {\n          meta.port.close();\n        } catch {\n          /* empty */\n        }\n      } catch {\n        /* ignore */\n      }\n    });\n    // eslint-disable-next-line functional/immutable-data -- controlled state transition\n    this.#state = this.#withActivePorts(new Map());\n  };\n\n  // Safe wrappers to avoid unhandled rejections if promise already settled\n  readonly #safeRejectReady = (reason: unknown): void => {\n    try {\n      this.#rejectReady(reason);\n    } catch {\n      /* ignore */\n    }\n  };\n  readonly #safeResolveReady = (): void => {\n    try {\n      this.#resolveReady();\n    } catch {\n      /* ignore */\n    }\n  };\n\n  readonly #addActivePort = (port: MessagePort, meta: ActivePortMeta): void => {\n    // create a new Map to keep an immutable transition\n\n    const newActivePorts = new Map([\n      ...this.#state.activePorts.entries(),\n      [port, meta],\n    ]);\n    // eslint-disable-next-line functional/immutable-data -- Controlled state transition for O(1) port addition. Encapsulated within private method.\n    this.#state = this.#withActivePorts(newActivePorts);\n  };\n\n  // Reserve a pending slot synchronously. Returns reservation id.\n  #reservePendingSlot(): number {\n    if (\n      this.#state.activePorts.size + this.#pendingReservations >=\n      this.#maxPendingRequests\n    ) {\n      throw new RateLimitError(\n        \"too-many-pending-sign-requests: Maximum pending sign requests reached\",\n      );\n    }\n    // eslint-disable-next-line functional/immutable-data -- controlled reservation counter\n    const id = this.#nextReservationId++;\n    // eslint-disable-next-line functional/immutable-data -- controlled reservation state update\n    this.#pendingReservations++;\n    // eslint-disable-next-line functional/immutable-data -- controlled reservation state update\n    this.#reservationTokens.add(id);\n    return id;\n  }\n\n  // Consume one reservation if available. Returns true if consumed.\n  #consumeReservationIfAvailable(): boolean {\n    if (this.#pendingReservations <= 0 || this.#reservationTokens.size === 0) {\n      return false;\n    }\n    // consume the first available token\n    const iterator = this.#reservationTokens.values();\n    const first = iterator.next();\n    if (first.done) return false;\n\n    const id = first.value;\n    // eslint-disable-next-line functional/immutable-data -- controlled token removal\n    this.#reservationTokens.delete(id);\n    // eslint-disable-next-line functional/immutable-data -- controlled reservation state update\n    this.#pendingReservations = Math.max(0, this.#pendingReservations - 1);\n    return true;\n  }\n\n  // Release a reservation if it exists (called when sign() fails before conversion)\n  #releaseReservationIfPresent(id: number | undefined): void {\n    if (id === undefined || !this.#reservationTokens.has(id)) {\n      return;\n    }\n    // eslint-disable-next-line functional/immutable-data -- controlled token removal\n    this.#reservationTokens.delete(id);\n    // eslint-disable-next-line functional/immutable-data -- controlled reservation state update\n    this.#pendingReservations = Math.max(0, this.#pendingReservations - 1);\n  }\n\n  readonly #removeActivePort = (port: MessagePort): void => {\n    if (this.#state.activePorts.has(port)) {\n      const currentMeta = this.#state.activePorts.get(port);\n      if (currentMeta) {\n        try {\n          clearTimeout(currentMeta.timer);\n        } catch {\n          /* ignore */\n        }\n      }\n\n      // More efficient immutable update: filter out the port\n      const newActivePorts = new Map(\n        Array.from(this.#state.activePorts.entries()).filter(\n          ([p]) => p !== port,\n        ),\n      );\n\n      // eslint-disable-next-line functional/immutable-data -- controlled state transition\n      this.#state = this.#withActivePorts(newActivePorts);\n    }\n  };\n\n  /* ========================= Circuit breaker logic ========================= */\n\n  readonly #checkCircuitBreaker = (): void => {\n    if (this.#state.circuitBreaker.state === \"open\") {\n      if (\n        Date.now() - this.#state.circuitBreaker.lastFailureTime >\n        CIRCUIT_BREAKER_TIMEOUT_MS\n      ) {\n        const newCircuitBreaker = {\n          state: \"half-open\" as const,\n          failureCount: this.#state.circuitBreaker.failureCount,\n          lastFailureTime: this.#state.circuitBreaker.lastFailureTime,\n          successCount: 0,\n        };\n        // eslint-disable-next-line functional/immutable-data -- controlled state transition\n        this.#state = this.#withCircuitBreaker(newCircuitBreaker);\n      } else {\n        throw new CircuitBreakerError();\n      }\n    }\n  };\n\n  readonly #recordSuccess = (): void => {\n    if (this.#state.circuitBreaker.state === \"half-open\") {\n      const newSuccessCount = this.#state.circuitBreaker.successCount + 1;\n      if (newSuccessCount >= CIRCUIT_BREAKER_SUCCESS_THRESHOLD) {\n        const newCircuitBreaker = {\n          state: \"closed\" as const,\n          failureCount: 0,\n          lastFailureTime: 0,\n          successCount: 0,\n        };\n        // eslint-disable-next-line functional/immutable-data -- controlled state transition\n        this.#state = this.#withCircuitBreaker(newCircuitBreaker);\n      } else {\n        const newCircuitBreaker = {\n          state: this.#state.circuitBreaker.state,\n          failureCount: this.#state.circuitBreaker.failureCount,\n          lastFailureTime: this.#state.circuitBreaker.lastFailureTime,\n          successCount: newSuccessCount,\n        };\n        // eslint-disable-next-line functional/immutable-data -- controlled state transition\n        this.#state = this.#withCircuitBreaker(newCircuitBreaker);\n      }\n    } else {\n      const newFailureCount = Math.max(\n        0,\n        this.#state.circuitBreaker.failureCount - 1,\n      );\n      const newCircuitBreaker = {\n        state: this.#state.circuitBreaker.state,\n        failureCount: newFailureCount,\n        lastFailureTime: this.#state.circuitBreaker.lastFailureTime,\n        successCount: this.#state.circuitBreaker.successCount,\n      };\n      // eslint-disable-next-line functional/immutable-data -- controlled state transition\n      this.#state = this.#withCircuitBreaker(newCircuitBreaker);\n    }\n  };\n\n  readonly #recordFailure = (): void => {\n    const newFailureCount = this.#state.circuitBreaker.failureCount + 1;\n    if (\n      this.#state.circuitBreaker.state === \"half-open\" ||\n      newFailureCount >= CIRCUIT_BREAKER_FAILURE_THRESHOLD\n    ) {\n      const newCircuitBreaker = {\n        state: \"open\" as const,\n        failureCount: newFailureCount,\n        lastFailureTime: Date.now(),\n        successCount: this.#state.circuitBreaker.successCount,\n      };\n      // eslint-disable-next-line functional/immutable-data -- controlled state transition\n      this.#state = this.#withCircuitBreaker(newCircuitBreaker);\n    } else {\n      const newCircuitBreaker = {\n        state: this.#state.circuitBreaker.state,\n        failureCount: newFailureCount,\n        lastFailureTime: this.#state.circuitBreaker.lastFailureTime,\n        successCount: this.#state.circuitBreaker.successCount,\n      };\n      // eslint-disable-next-line functional/immutable-data -- controlled state transition\n      this.#state = this.#withCircuitBreaker(newCircuitBreaker);\n    }\n  };\n\n  /* ========================= Observability ========================= */\n\n  public getCircuitBreakerStatus(): CircuitBreakerStatus {\n    return { ...this.#state.circuitBreaker };\n  }\n  public getPendingRequestCount(): number {\n    // Include synchronous reservations to reflect the total number of pending\n    // requests (active ports + reserved slots). This makes rate-limit state\n    // observable and avoids a TOCTOU where many callers reserve slots\n    // concurrently but the public count only reports active ports.\n    return this.#state.activePorts.size + this.#pendingReservations;\n  }\n  public isDestroyed(): boolean {\n    return this.#state.destroyed;\n  }\n  /** If integrity === 'compute', consumers can read this (useful for telemetry / debugging). */\n  public getComputedWorkerHash(): string | undefined {\n    return this.#computedWorkerHash;\n  }\n  /** Get the configured rate limiting parameters for observability and debugging. */\n  public getRateLimitConfig(): {\n    readonly rateLimitPerMinute: number;\n    readonly maxConcurrentSigning: number;\n  } {\n    return {\n      rateLimitPerMinute: this.#rateLimitPerMinute,\n      maxConcurrentSigning: this.#maxConcurrentSigning,\n    };\n  }\n}\n\n/* ========================= Helper: fetch and validate script ========================= */\n\n/** Fetches the worker script at `url`, asserts no redirects, and returns ArrayBuffer. */\nasync function fetchAndValidateScript(url: URL): Promise<ArrayBuffer> {\n  // eslint-disable-next-line functional/no-let -- response reassignment needed for error handling\n  let response: Response;\n  try {\n    // redirect: \"error\" causes fetch to throw on redirect in modern browsers.\n    response = await fetch(String(url), {\n      cache: \"no-store\",\n      credentials: \"same-origin\",\n      redirect: \"error\",\n    });\n  } catch (error) {\n    throw error instanceof Error ? error : new WorkerError(String(error));\n  }\n  if (!response.ok)\n    throw new WorkerError(\n      `Failed to fetch worker script: ${response.status} ${response.statusText}`,\n    );\n  // defensive: ensure no redirect occurred\n  const redirected = \"redirected\" in response && response.redirected === true;\n  if (redirected || response.url !== String(url)) {\n    throw new WorkerError(\n      \"Worker script fetch was redirected; refusing to proceed.\",\n    );\n  }\n  return await response.arrayBuffer();\n}\n",
    "usedDeprecatedRules": [
      {
        "ruleId": "functional/prefer-readonly-type",
        "replacedBy": [
          "functional/prefer-immutable-types",
          "functional/type-declaration-immutability"
        ]
      }
    ]
  },
  {
    "filePath": "/home/david/Security-kit/src/secure-cache.ts",
    "messages": [],
    "suppressedMessages": [
      {
        "ruleId": "@typescript-eslint/no-floating-promises",
        "severity": 2,
        "message": "Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.",
        "line": 197,
        "column": 5,
        "nodeType": "ExpressionStatement",
        "messageId": "floatingVoid",
        "endLine": 197,
        "endColumn": 38,
        "suggestions": [
          {
            "messageId": "floatingFixVoid",
            "fix": { "range": [8448, 8448], "text": "void " },
            "desc": "Add void operator to ignore."
          },
          {
            "messageId": "floatingFixAwait",
            "fix": { "range": [8448, 8448], "text": "await " },
            "desc": "Add await operator."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "functional/prefer-readonly-type",
        "severity": 2,
        "message": "A readonly modifier is required.",
        "line": 280,
        "column": 3,
        "nodeType": "PropertyDefinition",
        "messageId": "property",
        "endLine": 280,
        "endColumn": 13,
        "fix": { "range": [11865, 11865], "text": "readonly " },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "functional/prefer-readonly-type",
        "severity": 2,
        "message": "A readonly modifier is required.",
        "line": 281,
        "column": 3,
        "nodeType": "PropertyDefinition",
        "messageId": "property",
        "endLine": 281,
        "endColumn": 15,
        "fix": { "range": [11878, 11878], "text": "readonly " },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "functional/prefer-readonly-type",
        "severity": 2,
        "message": "A readonly modifier is required.",
        "line": 282,
        "column": 3,
        "nodeType": "PropertyDefinition",
        "messageId": "property",
        "endLine": 282,
        "endColumn": 18,
        "fix": { "range": [11893, 11893], "text": "readonly " },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "functional/prefer-readonly-type",
        "severity": 2,
        "message": "A readonly modifier is required.",
        "line": 283,
        "column": 3,
        "nodeType": "PropertyDefinition",
        "messageId": "property",
        "endLine": 283,
        "endColumn": 16,
        "fix": { "range": [11911, 11911], "text": "readonly " },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "functional/prefer-readonly-type",
        "severity": 2,
        "message": "A readonly modifier is required.",
        "line": 284,
        "column": 3,
        "nodeType": "PropertyDefinition",
        "messageId": "property",
        "endLine": 284,
        "endColumn": 15,
        "fix": { "range": [11927, 11927], "text": "readonly " },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "functional/prefer-readonly-type",
        "severity": 2,
        "message": "A readonly modifier is required.",
        "line": 285,
        "column": 3,
        "nodeType": "PropertyDefinition",
        "messageId": "property",
        "endLine": 285,
        "endColumn": 15,
        "fix": { "range": [11942, 11942], "text": "readonly " },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "functional/prefer-readonly-type",
        "severity": 2,
        "message": "A readonly modifier is required.",
        "line": 287,
        "column": 3,
        "nodeType": "PropertyDefinition",
        "messageId": "property",
        "endLine": 287,
        "endColumn": 19,
        "fix": { "range": [11980, 11980], "text": "readonly " },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "functional/prefer-readonly-type",
        "severity": 2,
        "message": "A readonly modifier is required.",
        "line": 288,
        "column": 3,
        "nodeType": "PropertyDefinition",
        "messageId": "property",
        "endLine": 288,
        "endColumn": 23,
        "fix": { "range": [11999, 11999], "text": "readonly " },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "functional/prefer-readonly-type",
        "severity": 2,
        "message": "A readonly modifier is required.",
        "line": 291,
        "column": 3,
        "nodeType": "PropertyDefinition",
        "messageId": "property",
        "endLine": 291,
        "endColumn": 13,
        "fix": { "range": [12044, 12044], "text": "readonly " },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "functional/prefer-readonly-type",
        "severity": 2,
        "message": "A readonly modifier is required.",
        "line": 292,
        "column": 3,
        "nodeType": "PropertyDefinition",
        "messageId": "property",
        "endLine": 292,
        "endColumn": 19,
        "fix": { "range": [12057, 12057], "text": "readonly " },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "functional/prefer-readonly-type",
        "severity": 2,
        "message": "Only readonly types allowed.",
        "line": 293,
        "column": 21,
        "nodeType": "TSTypeReference",
        "messageId": "type",
        "endLine": 293,
        "endColumn": 35,
        "fix": { "range": [12094, 12097], "text": "ReadonlyMap" },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "functional/prefer-readonly-type",
        "severity": 2,
        "message": "A readonly modifier is required.",
        "line": 294,
        "column": 3,
        "nodeType": "PropertyDefinition",
        "messageId": "property",
        "endLine": 294,
        "endColumn": 31,
        "fix": { "range": [12112, 12112], "text": "readonly " },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "functional/prefer-readonly-type",
        "severity": 2,
        "message": "Only readonly arrays allowed.",
        "line": 294,
        "column": 13,
        "nodeType": "TSArrayType",
        "messageId": "array",
        "endLine": 294,
        "endColumn": 30,
        "fix": { "range": [12122, 12122], "text": "readonly " },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "functional/prefer-readonly-type",
        "severity": 2,
        "message": "A readonly modifier is required.",
        "line": 295,
        "column": 3,
        "nodeType": "PropertyDefinition",
        "messageId": "property",
        "endLine": 295,
        "endColumn": 31,
        "fix": { "range": [12143, 12143], "text": "readonly " },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "functional/prefer-readonly-type",
        "severity": 2,
        "message": "Only readonly arrays allowed.",
        "line": 295,
        "column": 13,
        "nodeType": "TSArrayType",
        "messageId": "array",
        "endLine": 295,
        "endColumn": 30,
        "fix": { "range": [12153, 12153], "text": "readonly " },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "functional/prefer-readonly-type",
        "severity": 2,
        "message": "A readonly modifier is required.",
        "line": 296,
        "column": 3,
        "nodeType": "PropertyDefinition",
        "messageId": "property",
        "endLine": 296,
        "endColumn": 19,
        "fix": { "range": [12174, 12174], "text": "readonly " },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "functional/prefer-readonly-type",
        "severity": 2,
        "message": "Only readonly arrays allowed.",
        "line": 296,
        "column": 10,
        "nodeType": "TSArrayType",
        "messageId": "array",
        "endLine": 296,
        "endColumn": 18,
        "fix": { "range": [12181, 12181], "text": "readonly " },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "functional/prefer-readonly-type",
        "severity": 2,
        "message": "A readonly modifier is required.",
        "line": 297,
        "column": 3,
        "nodeType": "PropertyDefinition",
        "messageId": "property",
        "endLine": 297,
        "endColumn": 19,
        "fix": { "range": [12193, 12193], "text": "readonly " },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "functional/prefer-readonly-type",
        "severity": 2,
        "message": "Only readonly arrays allowed.",
        "line": 297,
        "column": 10,
        "nodeType": "TSArrayType",
        "messageId": "array",
        "endLine": 297,
        "endColumn": 18,
        "fix": { "range": [12200, 12200], "text": "readonly " },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "functional/prefer-readonly-type",
        "severity": 2,
        "message": "A readonly modifier is required.",
        "line": 298,
        "column": 3,
        "nodeType": "PropertyDefinition",
        "messageId": "property",
        "endLine": 298,
        "endColumn": 17,
        "fix": { "range": [12212, 12212], "text": "readonly " },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "functional/prefer-readonly-type",
        "severity": 2,
        "message": "A readonly modifier is required.",
        "line": 299,
        "column": 3,
        "nodeType": "PropertyDefinition",
        "messageId": "property",
        "endLine": 299,
        "endColumn": 17,
        "fix": { "range": [12229, 12229], "text": "readonly " },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "functional/prefer-readonly-type",
        "severity": 2,
        "message": "Only readonly arrays allowed.",
        "line": 300,
        "column": 19,
        "nodeType": "TSArrayType",
        "messageId": "array",
        "endLine": 300,
        "endColumn": 27,
        "fix": { "range": [12262, 12262], "text": "readonly " },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "functional/prefer-readonly-type",
        "severity": 2,
        "message": "A readonly modifier is required.",
        "line": 303,
        "column": 3,
        "nodeType": "PropertyDefinition",
        "messageId": "property",
        "endLine": 303,
        "endColumn": 19,
        "fix": { "range": [12293, 12293], "text": "readonly " },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "functional/prefer-readonly-type",
        "severity": 2,
        "message": "Only readonly arrays allowed.",
        "line": 303,
        "column": 10,
        "nodeType": "TSArrayType",
        "messageId": "array",
        "endLine": 303,
        "endColumn": 18,
        "fix": { "range": [12300, 12300], "text": "readonly " },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "functional/prefer-readonly-type",
        "severity": 2,
        "message": "A readonly modifier is required.",
        "line": 304,
        "column": 3,
        "nodeType": "PropertyDefinition",
        "messageId": "property",
        "endLine": 304,
        "endColumn": 21,
        "fix": { "range": [12312, 12312], "text": "readonly " },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "functional/prefer-readonly-type",
        "severity": 2,
        "message": "Only readonly arrays allowed.",
        "line": 304,
        "column": 12,
        "nodeType": "TSArrayType",
        "messageId": "array",
        "endLine": 304,
        "endColumn": 20,
        "fix": { "range": [12321, 12321], "text": "readonly " },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "functional/prefer-readonly-type",
        "severity": 2,
        "message": "A readonly modifier is required.",
        "line": 307,
        "column": 3,
        "nodeType": "PropertyDefinition",
        "messageId": "property",
        "endLine": 307,
        "endColumn": 18,
        "fix": { "range": [12392, 12392], "text": "readonly " },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "functional/prefer-readonly-type",
        "severity": 2,
        "message": "Only readonly arrays allowed.",
        "line": 307,
        "column": 9,
        "nodeType": "TSArrayType",
        "messageId": "array",
        "endLine": 307,
        "endColumn": 17,
        "fix": { "range": [12398, 12398], "text": "readonly " },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "functional/prefer-readonly-type",
        "severity": 2,
        "message": "A readonly modifier is required.",
        "line": 308,
        "column": 3,
        "nodeType": "PropertyDefinition",
        "messageId": "property",
        "endLine": 308,
        "endColumn": 19,
        "fix": { "range": [12410, 12410], "text": "readonly " },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "functional/prefer-readonly-type",
        "severity": 2,
        "message": "A readonly modifier is required.",
        "line": 309,
        "column": 3,
        "nodeType": "PropertyDefinition",
        "messageId": "property",
        "endLine": 309,
        "endColumn": 25,
        "fix": { "range": [12429, 12429], "text": "readonly " },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "functional/prefer-readonly-type",
        "severity": 2,
        "message": "A readonly modifier is required.",
        "line": 310,
        "column": 3,
        "nodeType": "PropertyDefinition",
        "messageId": "property",
        "endLine": 310,
        "endColumn": 33,
        "fix": { "range": [12454, 12454], "text": "readonly " },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "functional/prefer-readonly-type",
        "severity": 2,
        "message": "Only readonly arrays allowed.",
        "line": 313,
        "column": 24,
        "nodeType": "TSArrayType",
        "messageId": "array",
        "endLine": 313,
        "endColumn": 27,
        "fix": { "range": [12530, 12530], "text": "readonly " },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "functional/prefer-readonly-type",
        "severity": 2,
        "message": "A readonly modifier is required.",
        "line": 314,
        "column": 3,
        "nodeType": "PropertyDefinition",
        "messageId": "property",
        "endLine": 314,
        "endColumn": 26,
        "fix": { "range": [12542, 12542], "text": "readonly " },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "functional/prefer-readonly-type",
        "severity": 2,
        "message": "A readonly modifier is required.",
        "line": 315,
        "column": 3,
        "nodeType": "PropertyDefinition",
        "messageId": "property",
        "endLine": 315,
        "endColumn": 23,
        "fix": { "range": [12568, 12568], "text": "readonly " },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "functional/prefer-readonly-type",
        "severity": 2,
        "message": "A readonly modifier is required.",
        "line": 316,
        "column": 3,
        "nodeType": "PropertyDefinition",
        "messageId": "property",
        "endLine": 316,
        "endColumn": 57,
        "fix": { "range": [12591, 12591], "text": "readonly " },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "functional/prefer-readonly-type",
        "severity": 2,
        "message": "A readonly modifier is required.",
        "line": 318,
        "column": 3,
        "nodeType": "PropertyDefinition",
        "messageId": "property",
        "endLine": 318,
        "endColumn": 31,
        "fix": { "range": [12716, 12716], "text": "readonly " },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "functional/prefer-readonly-type",
        "severity": 2,
        "message": "A readonly modifier is required.",
        "line": 319,
        "column": 3,
        "nodeType": "PropertyDefinition",
        "messageId": "property",
        "endLine": 319,
        "endColumn": 37,
        "fix": { "range": [12747, 12747], "text": "readonly " },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "functional/prefer-readonly-type",
        "severity": 2,
        "message": "A readonly modifier is required.",
        "line": 322,
        "column": 3,
        "nodeType": "PropertyDefinition",
        "messageId": "property",
        "endLine": 322,
        "endColumn": 42,
        "fix": { "range": [12812, 12812], "text": "readonly " },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "functional/prefer-readonly-type",
        "severity": 2,
        "message": "A readonly modifier is required.",
        "line": 323,
        "column": 3,
        "nodeType": "PropertyDefinition",
        "messageId": "property",
        "endLine": 323,
        "endColumn": 59,
        "fix": { "range": [12854, 12854], "text": "readonly " },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "functional/prefer-readonly-type",
        "severity": 2,
        "message": "A readonly modifier is required.",
        "line": 324,
        "column": 3,
        "nodeType": "PropertyDefinition",
        "messageId": "property",
        "endLine": 324,
        "endColumn": 16,
        "fix": { "range": [12913, 12913], "text": "readonly " },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "functional/prefer-readonly-type",
        "severity": 2,
        "message": "A readonly modifier is required.",
        "line": 325,
        "column": 3,
        "nodeType": "PropertyDefinition",
        "messageId": "property",
        "endLine": 325,
        "endColumn": 16,
        "fix": { "range": [12929, 12929], "text": "readonly " },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "sonarjs/cognitive-complexity",
        "severity": 2,
        "message": "Refactor this function to reduce its Cognitive Complexity from 36 to the 18 allowed.",
        "line": 454,
        "column": 10,
        "nodeType": null,
        "messageId": "refactorFunction",
        "endLine": 454,
        "endColumn": 13,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "functional/immutable-data",
        "severity": 2,
        "message": "Modifying an existing object/array is not allowed.",
        "line": 455,
        "column": 5,
        "nodeType": "UpdateExpression",
        "messageId": "generic",
        "endLine": 455,
        "endColumn": 19,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "functional/immutable-data",
        "severity": 2,
        "message": "Modifying an existing object/array is not allowed.",
        "line": 485,
        "column": 7,
        "nodeType": "AssignmentExpression",
        "messageId": "generic",
        "endLine": 485,
        "endColumn": 73,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "functional/immutable-data",
        "severity": 2,
        "message": "Modifying an existing object/array is not allowed.",
        "line": 487,
        "column": 7,
        "nodeType": "AssignmentExpression",
        "messageId": "generic",
        "endLine": 487,
        "endColumn": 50,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "functional/immutable-data",
        "severity": 2,
        "message": "Modifying an existing object/array is not allowed.",
        "line": 488,
        "column": 7,
        "nodeType": "AssignmentExpression",
        "messageId": "generic",
        "endLine": 488,
        "endColumn": 46,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "functional/immutable-data",
        "severity": 2,
        "message": "Modifying an existing object/array is not allowed.",
        "line": 489,
        "column": 7,
        "nodeType": "AssignmentExpression",
        "messageId": "generic",
        "endLine": 489,
        "endColumn": 38,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "functional/immutable-data",
        "severity": 2,
        "message": "Modifying an existing object/array is not allowed.",
        "line": 490,
        "column": 7,
        "nodeType": "AssignmentExpression",
        "messageId": "generic",
        "endLine": 490,
        "endColumn": 66,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "functional/immutable-data",
        "severity": 2,
        "message": "Modifying an existing object/array is not allowed.",
        "line": 496,
        "column": 11,
        "nodeType": "AssignmentExpression",
        "messageId": "generic",
        "endLine": 496,
        "endColumn": 54,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "functional/immutable-data",
        "severity": 2,
        "message": "Modifying an existing object/array is not allowed.",
        "line": 501,
        "column": 13,
        "nodeType": "AssignmentExpression",
        "messageId": "generic",
        "endLine": 501,
        "endColumn": 46,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "functional/no-let",
        "severity": 2,
        "message": "Unexpected let, use const instead.",
        "line": 513,
        "column": 5,
        "nodeType": "VariableDeclaration",
        "messageId": "generic",
        "endLine": 513,
        "endColumn": 23,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "functional/immutable-data",
        "severity": 2,
        "message": "Modifying an array is not allowed.",
        "line": 528,
        "column": 32,
        "nodeType": "CallExpression",
        "messageId": "array",
        "endLine": 528,
        "endColumn": 48,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "functional/immutable-data",
        "severity": 2,
        "message": "Modifying an existing object/array is not allowed.",
        "line": 529,
        "column": 5,
        "nodeType": "AssignmentExpression",
        "messageId": "generic",
        "endLine": 529,
        "endColumn": 31,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "functional/immutable-data",
        "severity": 2,
        "message": "Modifying an existing object/array is not allowed.",
        "line": 530,
        "column": 5,
        "nodeType": "AssignmentExpression",
        "messageId": "generic",
        "endLine": 530,
        "endColumn": 40,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "functional/immutable-data",
        "severity": 2,
        "message": "Modifying a map is not allowed.",
        "line": 531,
        "column": 5,
        "nodeType": "CallExpression",
        "messageId": "map",
        "endLine": 531,
        "endColumn": 33,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "functional/immutable-data",
        "severity": 2,
        "message": "Modifying an existing object/array is not allowed.",
        "line": 532,
        "column": 5,
        "nodeType": "AssignmentExpression",
        "messageId": "generic",
        "endLine": 532,
        "endColumn": 44,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "functional/immutable-data",
        "severity": 2,
        "message": "Modifying an existing object/array is not allowed.",
        "line": 533,
        "column": 5,
        "nodeType": "AssignmentExpression",
        "messageId": "generic",
        "endLine": 533,
        "endColumn": 28,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "functional/immutable-data",
        "severity": 2,
        "message": "Modifying an existing object/array is not allowed.",
        "line": 534,
        "column": 5,
        "nodeType": "AssignmentExpression",
        "messageId": "generic",
        "endLine": 534,
        "endColumn": 56,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "functional/immutable-data",
        "severity": 2,
        "message": "Modifying an existing object/array is not allowed.",
        "line": 537,
        "column": 9,
        "nodeType": "AssignmentExpression",
        "messageId": "generic",
        "endLine": 537,
        "endColumn": 44,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "functional/immutable-data",
        "severity": 2,
        "message": "Modifying an existing object/array is not allowed.",
        "line": 542,
        "column": 42,
        "nodeType": "AssignmentExpression",
        "messageId": "generic",
        "endLine": 542,
        "endColumn": 67,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "functional/immutable-data",
        "severity": 2,
        "message": "Modifying an existing object/array is not allowed.",
        "line": 549,
        "column": 7,
        "nodeType": "AssignmentExpression",
        "messageId": "generic",
        "endLine": 549,
        "endColumn": 38,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "functional/immutable-data",
        "severity": 2,
        "message": "Modifying an existing object/array is not allowed.",
        "line": 549,
        "column": 20,
        "nodeType": "AssignmentExpression",
        "messageId": "generic",
        "endLine": 549,
        "endColumn": 38,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "functional/immutable-data",
        "severity": 2,
        "message": "Modifying an existing object/array is not allowed.",
        "line": 551,
        "column": 7,
        "nodeType": "AssignmentExpression",
        "messageId": "generic",
        "endLine": 551,
        "endColumn": 37,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "functional/immutable-data",
        "severity": 2,
        "message": "Modifying an existing object/array is not allowed.",
        "line": 552,
        "column": 7,
        "nodeType": "AssignmentExpression",
        "messageId": "generic",
        "endLine": 552,
        "endColumn": 37,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "functional/immutable-data",
        "severity": 2,
        "message": "Modifying an existing object/array is not allowed.",
        "line": 553,
        "column": 7,
        "nodeType": "AssignmentExpression",
        "messageId": "generic",
        "endLine": 553,
        "endColumn": 25,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "functional/immutable-data",
        "severity": 2,
        "message": "Modifying an existing object/array is not allowed.",
        "line": 555,
        "column": 5,
        "nodeType": "UpdateExpression",
        "messageId": "generic",
        "endLine": 555,
        "endColumn": 17,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "functional/immutable-data",
        "severity": 2,
        "message": "Modifying an existing object/array is not allowed.",
        "line": 583,
        "column": 5,
        "nodeType": "UpdateExpression",
        "messageId": "generic",
        "endLine": 583,
        "endColumn": 19,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "functional/immutable-data",
        "severity": 2,
        "message": "Modifying an existing object/array is not allowed.",
        "line": 585,
        "column": 7,
        "nodeType": "UpdateExpression",
        "messageId": "generic",
        "endLine": 585,
        "endColumn": 21,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "functional/immutable-data",
        "severity": 2,
        "message": "Modifying an existing object/array is not allowed.",
        "line": 595,
        "column": 7,
        "nodeType": "UpdateExpression",
        "messageId": "generic",
        "endLine": 595,
        "endColumn": 21,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "functional/immutable-data",
        "severity": 2,
        "message": "Modifying an existing object/array is not allowed.",
        "line": 600,
        "column": 7,
        "nodeType": "UpdateExpression",
        "messageId": "generic",
        "endLine": 600,
        "endColumn": 21,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "functional/immutable-data",
        "severity": 2,
        "message": "Modifying an existing object/array is not allowed.",
        "line": 605,
        "column": 5,
        "nodeType": "UpdateExpression",
        "messageId": "generic",
        "endLine": 605,
        "endColumn": 17,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "functional/immutable-data",
        "severity": 2,
        "message": "Modifying an existing object/array is not allowed.",
        "line": 616,
        "column": 9,
        "nodeType": "AssignmentExpression",
        "messageId": "generic",
        "endLine": 616,
        "endColumn": 44,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "functional/immutable-data",
        "severity": 2,
        "message": "Modifying an existing object/array is not allowed.",
        "line": 618,
        "column": 11,
        "nodeType": "UpdateExpression",
        "messageId": "generic",
        "endLine": 618,
        "endColumn": 29,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "functional/immutable-data",
        "severity": 2,
        "message": "Modifying an existing object/array is not allowed.",
        "line": 624,
        "column": 42,
        "nodeType": "AssignmentExpression",
        "messageId": "generic",
        "endLine": 624,
        "endColumn": 67,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "functional/no-let",
        "severity": 2,
        "message": "Unexpected let, use const instead.",
        "line": 627,
        "column": 5,
        "nodeType": "VariableDeclaration",
        "messageId": "generic",
        "endLine": 627,
        "endColumn": 43,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "sonarjs/cognitive-complexity",
        "severity": 2,
        "message": "Refactor this function to reduce its Cognitive Complexity from 39 to the 18 allowed.",
        "line": 663,
        "column": 16,
        "nodeType": null,
        "messageId": "refactorFunction",
        "endLine": 663,
        "endColumn": 24,
        "suppressions": [
          {
            "kind": "directive",
            "justification": "Intentional: cooperative eviction with bounded sync budget and microtask yields; safe refactor will split helpers without changing semantics."
          }
        ]
      },
      {
        "ruleId": "functional/immutable-data",
        "severity": 2,
        "message": "Modifying an existing object/array is not allowed.",
        "line": 668,
        "column": 5,
        "nodeType": "UpdateExpression",
        "messageId": "generic",
        "endLine": 668,
        "endColumn": 19,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "functional/immutable-data",
        "severity": 2,
        "message": "Modifying an existing object/array is not allowed.",
        "line": 698,
        "column": 7,
        "nodeType": "AssignmentExpression",
        "messageId": "generic",
        "endLine": 698,
        "endColumn": 73,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "functional/immutable-data",
        "severity": 2,
        "message": "Modifying an existing object/array is not allowed.",
        "line": 700,
        "column": 7,
        "nodeType": "AssignmentExpression",
        "messageId": "generic",
        "endLine": 700,
        "endColumn": 50,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "functional/immutable-data",
        "severity": 2,
        "message": "Modifying an existing object/array is not allowed.",
        "line": 701,
        "column": 7,
        "nodeType": "AssignmentExpression",
        "messageId": "generic",
        "endLine": 701,
        "endColumn": 46,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "functional/immutable-data",
        "severity": 2,
        "message": "Modifying an existing object/array is not allowed.",
        "line": 702,
        "column": 7,
        "nodeType": "AssignmentExpression",
        "messageId": "generic",
        "endLine": 702,
        "endColumn": 38,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "functional/immutable-data",
        "severity": 2,
        "message": "Modifying an existing object/array is not allowed.",
        "line": 703,
        "column": 7,
        "nodeType": "AssignmentExpression",
        "messageId": "generic",
        "endLine": 703,
        "endColumn": 66,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "functional/immutable-data",
        "severity": 2,
        "message": "Modifying an existing object/array is not allowed.",
        "line": 709,
        "column": 11,
        "nodeType": "AssignmentExpression",
        "messageId": "generic",
        "endLine": 709,
        "endColumn": 54,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "functional/immutable-data",
        "severity": 2,
        "message": "Modifying an existing object/array is not allowed.",
        "line": 714,
        "column": 13,
        "nodeType": "AssignmentExpression",
        "messageId": "generic",
        "endLine": 714,
        "endColumn": 46,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "functional/no-let",
        "severity": 2,
        "message": "Unexpected let, use const instead.",
        "line": 734,
        "column": 7,
        "nodeType": "VariableDeclaration",
        "messageId": "generic",
        "endLine": 734,
        "endColumn": 43,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "functional/immutable-data",
        "severity": 2,
        "message": "Modifying an array is not allowed.",
        "line": 744,
        "column": 32,
        "nodeType": "CallExpression",
        "messageId": "array",
        "endLine": 744,
        "endColumn": 48,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "functional/immutable-data",
        "severity": 2,
        "message": "Modifying an existing object/array is not allowed.",
        "line": 745,
        "column": 5,
        "nodeType": "AssignmentExpression",
        "messageId": "generic",
        "endLine": 745,
        "endColumn": 31,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "functional/immutable-data",
        "severity": 2,
        "message": "Modifying an existing object/array is not allowed.",
        "line": 746,
        "column": 5,
        "nodeType": "AssignmentExpression",
        "messageId": "generic",
        "endLine": 746,
        "endColumn": 40,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "functional/immutable-data",
        "severity": 2,
        "message": "Modifying a map is not allowed.",
        "line": 747,
        "column": 5,
        "nodeType": "CallExpression",
        "messageId": "map",
        "endLine": 747,
        "endColumn": 33,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "functional/immutable-data",
        "severity": 2,
        "message": "Modifying an existing object/array is not allowed.",
        "line": 748,
        "column": 5,
        "nodeType": "AssignmentExpression",
        "messageId": "generic",
        "endLine": 748,
        "endColumn": 44,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "functional/immutable-data",
        "severity": 2,
        "message": "Modifying an existing object/array is not allowed.",
        "line": 749,
        "column": 5,
        "nodeType": "AssignmentExpression",
        "messageId": "generic",
        "endLine": 749,
        "endColumn": 28,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "functional/immutable-data",
        "severity": 2,
        "message": "Modifying an existing object/array is not allowed.",
        "line": 750,
        "column": 5,
        "nodeType": "AssignmentExpression",
        "messageId": "generic",
        "endLine": 750,
        "endColumn": 56,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "functional/immutable-data",
        "severity": 2,
        "message": "Modifying an existing object/array is not allowed.",
        "line": 753,
        "column": 9,
        "nodeType": "AssignmentExpression",
        "messageId": "generic",
        "endLine": 753,
        "endColumn": 44,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "functional/immutable-data",
        "severity": 2,
        "message": "Modifying an existing object/array is not allowed.",
        "line": 757,
        "column": 42,
        "nodeType": "AssignmentExpression",
        "messageId": "generic",
        "endLine": 757,
        "endColumn": 67,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "functional/immutable-data",
        "severity": 2,
        "message": "Modifying an existing object/array is not allowed.",
        "line": 764,
        "column": 7,
        "nodeType": "AssignmentExpression",
        "messageId": "generic",
        "endLine": 764,
        "endColumn": 38,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "functional/immutable-data",
        "severity": 2,
        "message": "Modifying an existing object/array is not allowed.",
        "line": 764,
        "column": 20,
        "nodeType": "AssignmentExpression",
        "messageId": "generic",
        "endLine": 764,
        "endColumn": 38,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "functional/immutable-data",
        "severity": 2,
        "message": "Modifying an existing object/array is not allowed.",
        "line": 766,
        "column": 7,
        "nodeType": "AssignmentExpression",
        "messageId": "generic",
        "endLine": 766,
        "endColumn": 37,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "functional/immutable-data",
        "severity": 2,
        "message": "Modifying an existing object/array is not allowed.",
        "line": 767,
        "column": 7,
        "nodeType": "AssignmentExpression",
        "messageId": "generic",
        "endLine": 767,
        "endColumn": 37,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "functional/immutable-data",
        "severity": 2,
        "message": "Modifying an existing object/array is not allowed.",
        "line": 768,
        "column": 7,
        "nodeType": "AssignmentExpression",
        "messageId": "generic",
        "endLine": 768,
        "endColumn": 25,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "functional/immutable-data",
        "severity": 2,
        "message": "Modifying an existing object/array is not allowed.",
        "line": 770,
        "column": 5,
        "nodeType": "UpdateExpression",
        "messageId": "generic",
        "endLine": 770,
        "endColumn": 17,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "functional/immutable-data",
        "severity": 2,
        "message": "Modifying an existing object/array is not allowed.",
        "line": 804,
        "column": 5,
        "nodeType": "AssignmentExpression",
        "messageId": "generic",
        "endLine": 804,
        "endColumn": 31,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "functional/immutable-data",
        "severity": 2,
        "message": "Modifying an existing object/array is not allowed.",
        "line": 856,
        "column": 7,
        "nodeType": "AssignmentExpression",
        "messageId": "generic",
        "endLine": 856,
        "endColumn": 21,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "functional/immutable-data",
        "severity": 2,
        "message": "Modifying an existing object/array is not allowed.",
        "line": 857,
        "column": 27,
        "nodeType": "AssignmentExpression",
        "messageId": "generic",
        "endLine": 857,
        "endColumn": 51,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "functional/immutable-data",
        "severity": 2,
        "message": "Modifying an existing object/array is not allowed.",
        "line": 859,
        "column": 27,
        "nodeType": "AssignmentExpression",
        "messageId": "generic",
        "endLine": 859,
        "endColumn": 44,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "functional/immutable-data",
        "severity": 2,
        "message": "Modifying an existing object/array is not allowed.",
        "line": 860,
        "column": 27,
        "nodeType": "AssignmentExpression",
        "messageId": "generic",
        "endLine": 860,
        "endColumn": 44,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "functional/immutable-data",
        "severity": 2,
        "message": "Modifying an existing object/array is not allowed.",
        "line": 862,
        "column": 5,
        "nodeType": "AssignmentExpression",
        "messageId": "generic",
        "endLine": 862,
        "endColumn": 35,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "functional/immutable-data",
        "severity": 2,
        "message": "Modifying an existing object/array is not allowed.",
        "line": 863,
        "column": 5,
        "nodeType": "AssignmentExpression",
        "messageId": "generic",
        "endLine": 863,
        "endColumn": 35,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "functional/immutable-data",
        "severity": 2,
        "message": "Modifying an existing object/array is not allowed.",
        "line": 864,
        "column": 5,
        "nodeType": "AssignmentExpression",
        "messageId": "generic",
        "endLine": 864,
        "endColumn": 33,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "functional/immutable-data",
        "severity": 2,
        "message": "Modifying an existing object/array is not allowed.",
        "line": 865,
        "column": 5,
        "nodeType": "AssignmentExpression",
        "messageId": "generic",
        "endLine": 865,
        "endColumn": 23,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "sonarjs/cognitive-complexity",
        "severity": 2,
        "message": "Refactor this function to reduce its Cognitive Complexity from 36 to the 18 allowed.",
        "line": 869,
        "column": 3,
        "nodeType": null,
        "messageId": "refactorFunction",
        "endLine": 869,
        "endColumn": 8,
        "suppressions": [
          {
            "kind": "directive",
            "justification": "Intentional: wipe path balances caps, fallback sync wipes, and coalesced logging; defer refactor to keep semantics stable."
          }
        ]
      },
      {
        "ruleId": "functional/immutable-data",
        "severity": 2,
        "message": "Modifying an array is not allowed.",
        "line": 905,
        "column": 9,
        "nodeType": "CallExpression",
        "messageId": "array",
        "endLine": 905,
        "endColumn": 36,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "functional/immutable-data",
        "severity": 2,
        "message": "Modifying an existing object/array is not allowed.",
        "line": 906,
        "column": 9,
        "nodeType": "AssignmentExpression",
        "messageId": "generic",
        "endLine": 906,
        "endColumn": 45,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "functional/immutable-data",
        "severity": 2,
        "message": "Modifying an existing object/array is not allowed.",
        "line": 908,
        "column": 11,
        "nodeType": "AssignmentExpression",
        "messageId": "generic",
        "endLine": 908,
        "endColumn": 37,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "functional/immutable-data",
        "severity": 2,
        "message": "Modifying an existing object/array is not allowed.",
        "line": 940,
        "column": 7,
        "nodeType": "UpdateExpression",
        "messageId": "generic",
        "endLine": 940,
        "endColumn": 37,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "functional/immutable-data",
        "severity": 2,
        "message": "Modifying an existing object/array is not allowed.",
        "line": 942,
        "column": 9,
        "nodeType": "AssignmentExpression",
        "messageId": "generic",
        "endLine": 942,
        "endColumn": 46,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "functional/immutable-data",
        "severity": 2,
        "message": "Modifying an existing object/array is not allowed.",
        "line": 946,
        "column": 13,
        "nodeType": "AssignmentExpression",
        "messageId": "generic",
        "endLine": 946,
        "endColumn": 45,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "functional/immutable-data",
        "severity": 2,
        "message": "Modifying an existing object/array is not allowed.",
        "line": 947,
        "column": 13,
        "nodeType": "AssignmentExpression",
        "messageId": "generic",
        "endLine": 947,
        "endColumn": 51,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "functional/immutable-data",
        "severity": 2,
        "message": "Modifying an array is not allowed.",
        "line": 969,
        "column": 5,
        "nodeType": "CallExpression",
        "messageId": "array",
        "endLine": 969,
        "endColumn": 32,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "functional/immutable-data",
        "severity": 2,
        "message": "Modifying an existing object/array is not allowed.",
        "line": 970,
        "column": 5,
        "nodeType": "AssignmentExpression",
        "messageId": "generic",
        "endLine": 970,
        "endColumn": 41,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "functional/immutable-data",
        "severity": 2,
        "message": "Modifying an existing object/array is not allowed.",
        "line": 972,
        "column": 7,
        "nodeType": "AssignmentExpression",
        "messageId": "generic",
        "endLine": 972,
        "endColumn": 33,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "sonarjs/cognitive-complexity",
        "severity": 2,
        "message": "Refactor this function to reduce its Cognitive Complexity from 29 to the 18 allowed.",
        "line": 985,
        "column": 3,
        "nodeType": null,
        "messageId": "refactorFunction",
        "endLine": 985,
        "endColumn": 9,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "functional/no-let",
        "severity": 2,
        "message": "Unexpected let, use const instead.",
        "line": 989,
        "column": 9,
        "nodeType": "VariableDeclaration",
        "messageId": "generic",
        "endLine": 989,
        "endColumn": 33,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "functional/no-let",
        "severity": 2,
        "message": "Unexpected let, use const instead.",
        "line": 990,
        "column": 9,
        "nodeType": "VariableDeclaration",
        "messageId": "generic",
        "endLine": 990,
        "endColumn": 33,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "functional/no-let",
        "severity": 2,
        "message": "Unexpected let, use const instead.",
        "line": 991,
        "column": 9,
        "nodeType": "VariableDeclaration",
        "messageId": "generic",
        "endLine": 991,
        "endColumn": 25,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "functional/immutable-data",
        "severity": 2,
        "message": "Modifying an existing object/array is not allowed.",
        "line": 1003,
        "column": 9,
        "nodeType": "UpdateExpression",
        "messageId": "generic",
        "endLine": 1003,
        "endColumn": 26,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "functional/no-let",
        "severity": 2,
        "message": "Unexpected let, use const instead.",
        "line": 1008,
        "column": 9,
        "nodeType": "VariableDeclaration",
        "messageId": "generic",
        "endLine": 1008,
        "endColumn": 33,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "functional/no-let",
        "severity": 2,
        "message": "Unexpected let, use const instead.",
        "line": 1009,
        "column": 9,
        "nodeType": "VariableDeclaration",
        "messageId": "generic",
        "endLine": 1009,
        "endColumn": 25,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "functional/no-let",
        "severity": 2,
        "message": "Unexpected let, use const instead.",
        "line": 1010,
        "column": 9,
        "nodeType": "VariableDeclaration",
        "messageId": "generic",
        "endLine": 1010,
        "endColumn": 27,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "functional/immutable-data",
        "severity": 2,
        "message": "Modifying an existing object/array is not allowed.",
        "line": 1012,
        "column": 11,
        "nodeType": "UpdateExpression",
        "messageId": "generic",
        "endLine": 1012,
        "endColumn": 29,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "functional/immutable-data",
        "severity": 2,
        "message": "Modifying an existing object/array is not allowed.",
        "line": 1016,
        "column": 13,
        "nodeType": "UpdateExpression",
        "messageId": "generic",
        "endLine": 1016,
        "endColumn": 30,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "functional/immutable-data",
        "severity": 2,
        "message": "Modifying an existing object/array is not allowed.",
        "line": 1021,
        "column": 13,
        "nodeType": "AssignmentExpression",
        "messageId": "generic",
        "endLine": 1021,
        "endColumn": 39,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "functional/immutable-data",
        "severity": 2,
        "message": "Modifying an existing object/array is not allowed.",
        "line": 1023,
        "column": 13,
        "nodeType": "UpdateExpression",
        "messageId": "generic",
        "endLine": 1023,
        "endColumn": 35,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "functional/immutable-data",
        "severity": 2,
        "message": "Modifying an existing object/array is not allowed.",
        "line": 1032,
        "column": 9,
        "nodeType": "UpdateExpression",
        "messageId": "generic",
        "endLine": 1032,
        "endColumn": 26,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "functional/immutable-data",
        "severity": 2,
        "message": "Modifying an existing object/array is not allowed.",
        "line": 1038,
        "column": 43,
        "nodeType": "AssignmentExpression",
        "messageId": "generic",
        "endLine": 1038,
        "endColumn": 71,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "functional/no-let",
        "severity": 2,
        "message": "Unexpected let, use const instead.",
        "line": 1039,
        "column": 9,
        "nodeType": "VariableDeclaration",
        "messageId": "generic",
        "endLine": 1039,
        "endColumn": 25,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "functional/no-let",
        "severity": 2,
        "message": "Unexpected let, use const instead.",
        "line": 1040,
        "column": 9,
        "nodeType": "VariableDeclaration",
        "messageId": "generic",
        "endLine": 1040,
        "endColumn": 36,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "functional/immutable-data",
        "severity": 2,
        "message": "Modifying an existing object/array is not allowed.",
        "line": 1042,
        "column": 11,
        "nodeType": "UpdateExpression",
        "messageId": "generic",
        "endLine": 1042,
        "endColumn": 29,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "functional/immutable-data",
        "severity": 2,
        "message": "Modifying an existing object/array is not allowed.",
        "line": 1047,
        "column": 13,
        "nodeType": "UpdateExpression",
        "messageId": "generic",
        "endLine": 1047,
        "endColumn": 30,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "functional/immutable-data",
        "severity": 2,
        "message": "Modifying an existing object/array is not allowed.",
        "line": 1049,
        "column": 13,
        "nodeType": "AssignmentExpression",
        "messageId": "generic",
        "endLine": 1049,
        "endColumn": 44,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "functional/immutable-data",
        "severity": 2,
        "message": "Modifying an existing object/array is not allowed.",
        "line": 1054,
        "column": 43,
        "nodeType": "AssignmentExpression",
        "messageId": "generic",
        "endLine": 1054,
        "endColumn": 67,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "functional/immutable-data",
        "severity": 2,
        "message": "Modifying an existing object/array is not allowed.",
        "line": 1061,
        "column": 9,
        "nodeType": "UpdateExpression",
        "messageId": "generic",
        "endLine": 1061,
        "endColumn": 26,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "functional/immutable-data",
        "severity": 2,
        "message": "Modifying an existing object/array is not allowed.",
        "line": 1067,
        "column": 9,
        "nodeType": "UpdateExpression",
        "messageId": "generic",
        "endLine": 1067,
        "endColumn": 26,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "functional/immutable-data",
        "severity": 2,
        "message": "Modifying an existing object/array is not allowed.",
        "line": 1081,
        "column": 5,
        "nodeType": "AssignmentExpression",
        "messageId": "generic",
        "endLine": 1081,
        "endColumn": 68,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "functional/immutable-data",
        "severity": 2,
        "message": "Modifying an existing object/array is not allowed.",
        "line": 1082,
        "column": 27,
        "nodeType": "UpdateExpression",
        "messageId": "generic",
        "endLine": 1082,
        "endColumn": 42,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "functional/immutable-data",
        "severity": 2,
        "message": "Modifying an existing object/array is not allowed.",
        "line": 1089,
        "column": 9,
        "nodeType": "AssignmentExpression",
        "messageId": "generic",
        "endLine": 1089,
        "endColumn": 56,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "functional/immutable-data",
        "severity": 2,
        "message": "Modifying a map is not allowed.",
        "line": 1093,
        "column": 5,
        "nodeType": "CallExpression",
        "messageId": "map",
        "endLine": 1093,
        "endColumn": 29,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "functional/immutable-data",
        "severity": 2,
        "message": "Modifying an existing object/array is not allowed.",
        "line": 1094,
        "column": 5,
        "nodeType": "AssignmentExpression",
        "messageId": "generic",
        "endLine": 1094,
        "endColumn": 37,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "functional/immutable-data",
        "severity": 2,
        "message": "Modifying an existing object/array is not allowed.",
        "line": 1095,
        "column": 5,
        "nodeType": "AssignmentExpression",
        "messageId": "generic",
        "endLine": 1095,
        "endColumn": 37,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "functional/immutable-data",
        "severity": 2,
        "message": "Modifying an existing object/array is not allowed.",
        "line": 1099,
        "column": 31,
        "nodeType": "AssignmentExpression",
        "messageId": "generic",
        "endLine": 1099,
        "endColumn": 52,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "functional/immutable-data",
        "severity": 2,
        "message": "Modifying an existing object/array is not allowed.",
        "line": 1100,
        "column": 31,
        "nodeType": "AssignmentExpression",
        "messageId": "generic",
        "endLine": 1100,
        "endColumn": 48,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "functional/immutable-data",
        "severity": 2,
        "message": "Modifying an existing object/array is not allowed.",
        "line": 1101,
        "column": 32,
        "nodeType": "AssignmentExpression",
        "messageId": "generic",
        "endLine": 1101,
        "endColumn": 59,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "functional/immutable-data",
        "severity": 2,
        "message": "Modifying an existing object/array is not allowed.",
        "line": 1102,
        "column": 28,
        "nodeType": "AssignmentExpression",
        "messageId": "generic",
        "endLine": 1102,
        "endColumn": 55,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "functional/immutable-data",
        "severity": 2,
        "message": "Modifying an existing object/array is not allowed.",
        "line": 1104,
        "column": 5,
        "nodeType": "AssignmentExpression",
        "messageId": "generic",
        "endLine": 1104,
        "endColumn": 33,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "functional/immutable-data",
        "severity": 2,
        "message": "Modifying an existing object/array is not allowed.",
        "line": 1105,
        "column": 5,
        "nodeType": "AssignmentExpression",
        "messageId": "generic",
        "endLine": 1105,
        "endColumn": 33,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "functional/immutable-data",
        "severity": 2,
        "message": "Modifying an existing object/array is not allowed.",
        "line": 1106,
        "column": 5,
        "nodeType": "UpdateExpression",
        "messageId": "generic",
        "endLine": 1106,
        "endColumn": 17,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "functional/immutable-data",
        "severity": 2,
        "message": "Modifying an array is not allowed.",
        "line": 1107,
        "column": 5,
        "nodeType": "CallExpression",
        "messageId": "array",
        "endLine": 1107,
        "endColumn": 27,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "functional/immutable-data",
        "severity": 2,
        "message": "Modifying an existing object/array is not allowed.",
        "line": 1112,
        "column": 7,
        "nodeType": "AssignmentExpression",
        "messageId": "generic",
        "endLine": 1112,
        "endColumn": 32,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "functional/no-let",
        "severity": 2,
        "message": "Unexpected let, use const instead.",
        "line": 1118,
        "column": 9,
        "nodeType": "VariableDeclaration",
        "messageId": "generic",
        "endLine": 1118,
        "endColumn": 38,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "functional/no-let",
        "severity": 2,
        "message": "Unexpected let, use const instead.",
        "line": 1165,
        "column": 5,
        "nodeType": "VariableDeclaration",
        "messageId": "generic",
        "endLine": 1165,
        "endColumn": 30,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "functional/no-let",
        "severity": 2,
        "message": "Unexpected let, use const instead.",
        "line": 1166,
        "column": 5,
        "nodeType": "VariableDeclaration",
        "messageId": "generic",
        "endLine": 1166,
        "endColumn": 21,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "functional/immutable-data",
        "severity": 2,
        "message": "Modifying an existing object/array is not allowed.",
        "line": 1179,
        "column": 5,
        "nodeType": "AssignmentExpression",
        "messageId": "generic",
        "endLine": 1179,
        "endColumn": 32,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "functional/immutable-data",
        "severity": 2,
        "message": "Modifying an existing object/array is not allowed.",
        "line": 1182,
        "column": 7,
        "nodeType": "AssignmentExpression",
        "messageId": "generic",
        "endLine": 1182,
        "endColumn": 34,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "functional/no-let",
        "severity": 2,
        "message": "Unexpected let, use const instead.",
        "line": 1185,
        "column": 5,
        "nodeType": "VariableDeclaration",
        "messageId": "generic",
        "endLine": 1185,
        "endColumn": 23,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "functional/immutable-data",
        "severity": 2,
        "message": "Modifying an array is not allowed.",
        "line": 1187,
        "column": 19,
        "nodeType": "CallExpression",
        "messageId": "array",
        "endLine": 1187,
        "endColumn": 42,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "functional/immutable-data",
        "severity": 2,
        "message": "Modifying an existing object/array is not allowed.",
        "line": 1199,
        "column": 7,
        "nodeType": "AssignmentExpression",
        "messageId": "generic",
        "endLine": 1199,
        "endColumn": 76,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "functional/immutable-data",
        "severity": 2,
        "message": "Modifying an existing object/array is not allowed.",
        "line": 1203,
        "column": 7,
        "nodeType": "AssignmentExpression",
        "messageId": "generic",
        "endLine": 1203,
        "endColumn": 33,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "functional/immutable-data",
        "severity": 2,
        "message": "Modifying an existing object/array is not allowed.",
        "line": 1220,
        "column": 7,
        "nodeType": "AssignmentExpression",
        "messageId": "generic",
        "endLine": 1223,
        "endColumn": 8,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "functional/immutable-data",
        "severity": 2,
        "message": "Modifying an existing object/array is not allowed.",
        "line": 1248,
        "column": 7,
        "nodeType": "AssignmentExpression",
        "messageId": "generic",
        "endLine": 1248,
        "endColumn": 24,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "functional/immutable-data",
        "severity": 2,
        "message": "Modifying an existing object/array is not allowed.",
        "line": 1249,
        "column": 7,
        "nodeType": "AssignmentExpression",
        "messageId": "generic",
        "endLine": 1249,
        "endColumn": 24,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "functional/immutable-data",
        "severity": 2,
        "message": "Modifying an existing object/array is not allowed.",
        "line": 1257,
        "column": 5,
        "nodeType": "AssignmentExpression",
        "messageId": "generic",
        "endLine": 1257,
        "endColumn": 30,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "functional/immutable-data",
        "severity": 2,
        "message": "Modifying an existing object/array is not allowed.",
        "line": 1265,
        "column": 7,
        "nodeType": "AssignmentExpression",
        "messageId": "generic",
        "endLine": 1265,
        "endColumn": 36,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "functional/immutable-data",
        "severity": 2,
        "message": "Modifying an existing object/array is not allowed.",
        "line": 1268,
        "column": 5,
        "nodeType": "AssignmentExpression",
        "messageId": "generic",
        "endLine": 1270,
        "endColumn": 14,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "functional/no-let",
        "severity": 2,
        "message": "Unexpected let, use const instead.",
        "line": 1311,
        "column": 5,
        "nodeType": "VariableDeclaration",
        "messageId": "generic",
        "endLine": 1311,
        "endColumn": 43,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "functional/no-let",
        "severity": 2,
        "message": "Unexpected let, use const instead.",
        "line": 1334,
        "column": 5,
        "nodeType": "VariableDeclaration",
        "messageId": "generic",
        "endLine": 1334,
        "endColumn": 20,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "functional/no-let",
        "severity": 2,
        "message": "Unexpected let, use const instead.",
        "line": 1335,
        "column": 5,
        "nodeType": "VariableDeclaration",
        "messageId": "generic",
        "endLine": 1335,
        "endColumn": 30,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "functional/no-let",
        "severity": 2,
        "message": "Unexpected let, use const instead.",
        "line": 1375,
        "column": 5,
        "nodeType": "VariableDeclaration",
        "messageId": "generic",
        "endLine": 1375,
        "endColumn": 28,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "functional/no-let",
        "severity": 2,
        "message": "Unexpected let, use const instead.",
        "line": 1407,
        "column": 5,
        "nodeType": "VariableDeclaration",
        "messageId": "generic",
        "endLine": 1407,
        "endColumn": 20,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "functional/no-let",
        "severity": 2,
        "message": "Unexpected let, use const instead.",
        "line": 1408,
        "column": 5,
        "nodeType": "VariableDeclaration",
        "messageId": "generic",
        "endLine": 1408,
        "endColumn": 30,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "functional/no-let",
        "severity": 2,
        "message": "Unexpected let, use const instead.",
        "line": 1409,
        "column": 5,
        "nodeType": "VariableDeclaration",
        "messageId": "generic",
        "endLine": 1409,
        "endColumn": 48,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "functional/immutable-data",
        "severity": 2,
        "message": "Modifying an existing object/array is not allowed.",
        "line": 1426,
        "column": 5,
        "nodeType": "AssignmentExpression",
        "messageId": "generic",
        "endLine": 1426,
        "endColumn": 35,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      }
    ],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "functional/prefer-readonly-type",
        "replacedBy": [
          "functional/prefer-immutable-types",
          "functional/type-declaration-immutability"
        ]
      }
    ]
  },
  {
    "filePath": "/home/david/Security-kit/src/secure-lru-cache.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "functional/prefer-readonly-type",
        "replacedBy": [
          "functional/prefer-immutable-types",
          "functional/type-declaration-immutability"
        ]
      }
    ]
  },
  {
    "filePath": "/home/david/Security-kit/src/state.ts",
    "messages": [],
    "suppressedMessages": [
      {
        "ruleId": "functional/no-let",
        "severity": 2,
        "message": "Unexpected let, use const instead.",
        "line": 130,
        "column": 1,
        "nodeType": "VariableDeclaration",
        "messageId": "generic",
        "endLine": 130,
        "endColumn": 51,
        "suppressions": [
          {
            "kind": "directive",
            "justification": "deliberate mutable lifecycle state"
          }
        ]
      },
      {
        "ruleId": "functional/no-let",
        "severity": 2,
        "message": "Unexpected let, use const instead.",
        "line": 131,
        "column": 1,
        "nodeType": "VariableDeclaration",
        "messageId": "generic",
        "endLine": 131,
        "endColumn": 61,
        "suppressions": [
          {
            "kind": "directive",
            "justification": "deliberate mutable lifecycle state"
          }
        ]
      },
      {
        "ruleId": "functional/no-let",
        "severity": 2,
        "message": "Unexpected let, use const instead.",
        "line": 132,
        "column": 1,
        "nodeType": "VariableDeclaration",
        "messageId": "generic",
        "endLine": 132,
        "endColumn": 58,
        "suppressions": [
          {
            "kind": "directive",
            "justification": "deliberate mutable lifecycle state"
          }
        ]
      },
      {
        "ruleId": "functional/no-let",
        "severity": 2,
        "message": "Unexpected let, use const instead.",
        "line": 133,
        "column": 1,
        "nodeType": "VariableDeclaration",
        "messageId": "generic",
        "endLine": 133,
        "endColumn": 31,
        "suppressions": [
          {
            "kind": "directive",
            "justification": "deliberate mutable lifecycle state"
          }
        ]
      },
      {
        "ruleId": "unicorn/prevent-abbreviations",
        "severity": 1,
        "message": "The variable `getInternalTestUtils` should be named `getInternalTestUtilities_`. A more descriptive name will do too.",
        "line": 464,
        "column": 17,
        "nodeType": "Identifier",
        "messageId": "replace",
        "endLine": 464,
        "endColumn": 37,
        "suppressions": [
          {
            "kind": "directive",
            "justification": "stable public test helper name; descriptive alias exported below"
          }
        ]
      }
    ],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "functional/prefer-readonly-type",
        "replacedBy": [
          "functional/prefer-immutable-types",
          "functional/type-declaration-immutability"
        ]
      }
    ]
  },
  {
    "filePath": "/home/david/Security-kit/src/test-internals.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 14,
        "column": 40,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 14,
        "endColumn": 43,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [629, 632], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [629, 632], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-member-access",
        "severity": 2,
        "message": "Unsafe member access .__SECURITY_KIT_ALLOW_TEST_APIS on an `any` value.",
        "line": 14,
        "column": 45,
        "nodeType": "Identifier",
        "messageId": "unsafeMemberExpression",
        "endLine": 14,
        "endColumn": 75
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-assignment",
        "severity": 2,
        "message": "Unsafe assignment of an `any` value.",
        "line": 28,
        "column": 9,
        "nodeType": "VariableDeclarator",
        "messageId": "anyAssignment",
        "endLine": 28,
        "endColumn": 38
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 28,
        "column": 35,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 28,
        "endColumn": 38,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1057, 1060], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1057, 1060], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-assignment",
        "severity": 2,
        "message": "Unsafe assignment of an `any` value.",
        "line": 29,
        "column": 9,
        "nodeType": "VariableDeclarator",
        "messageId": "anyAssignment",
        "endLine": 30,
        "endColumn": 80
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-member-access",
        "severity": 2,
        "message": "Unsafe member access .__test_internals on an `any` value.",
        "line": 30,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unsafeMemberExpression",
        "endLine": 30,
        "endColumn": 24
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-member-access",
        "severity": 2,
        "message": "Unsafe member access .__test_toNullProto on an `any` value.",
        "line": 30,
        "column": 44,
        "nodeType": "Identifier",
        "messageId": "unsafeMemberExpression",
        "endLine": 30,
        "endColumn": 62
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-member-access",
        "severity": 2,
        "message": "Unsafe member access .toNullProto on an `any` value.",
        "line": 30,
        "column": 69,
        "nodeType": "Identifier",
        "messageId": "unsafeMemberExpression",
        "endLine": 30,
        "endColumn": 80
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-call",
        "severity": 2,
        "message": "Unsafe call of a(n) `any` typed value.",
        "line": 35,
        "column": 10,
        "nodeType": "Identifier",
        "messageId": "unsafeCall",
        "endLine": 35,
        "endColumn": 19
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-assignment",
        "severity": 2,
        "message": "Unsafe assignment of an `any` value.",
        "line": 40,
        "column": 9,
        "nodeType": "VariableDeclarator",
        "messageId": "anyAssignment",
        "endLine": 40,
        "endColumn": 38
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 40,
        "column": 35,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 40,
        "endColumn": 38,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1488, 1491], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1488, 1491], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-assignment",
        "severity": 2,
        "message": "Unsafe assignment of an `any` value.",
        "line": 41,
        "column": 9,
        "nodeType": "VariableDeclarator",
        "messageId": "anyAssignment",
        "endLine": 44,
        "endColumn": 29
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-member-access",
        "severity": 2,
        "message": "Unsafe member access .__test_internals on an `any` value.",
        "line": 42,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unsafeMemberExpression",
        "endLine": 42,
        "endColumn": 24
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-member-access",
        "severity": 2,
        "message": "Unsafe member access .__test_getPayloadFingerprint on an `any` value.",
        "line": 43,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unsafeMemberExpression",
        "endLine": 43,
        "endColumn": 36
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-member-access",
        "severity": 2,
        "message": "Unsafe member access .getPayloadFingerprint on an `any` value.",
        "line": 44,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unsafeMemberExpression",
        "endLine": 44,
        "endColumn": 29
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-return",
        "severity": 2,
        "message": "Unsafe return of a value of type `any`.",
        "line": 49,
        "column": 3,
        "nodeType": "ReturnStatement",
        "messageId": "unsafeReturn",
        "endLine": 49,
        "endColumn": 33
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-call",
        "severity": 2,
        "message": "Unsafe call of a(n) `any` typed value.",
        "line": 49,
        "column": 10,
        "nodeType": "Identifier",
        "messageId": "unsafeCall",
        "endLine": 49,
        "endColumn": 19
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 49,
        "column": 28,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 49,
        "endColumn": 31,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1803, 1806], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1803, 1806], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-assignment",
        "severity": 2,
        "message": "Unsafe assignment of an `any` value.",
        "line": 54,
        "column": 9,
        "nodeType": "VariableDeclarator",
        "messageId": "anyAssignment",
        "endLine": 54,
        "endColumn": 38
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 54,
        "column": 35,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 54,
        "endColumn": 38,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1936, 1939], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1936, 1939], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-assignment",
        "severity": 2,
        "message": "Unsafe assignment of an `any` value.",
        "line": 55,
        "column": 9,
        "nodeType": "VariableDeclarator",
        "messageId": "anyAssignment",
        "endLine": 58,
        "endColumn": 29
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-member-access",
        "severity": 2,
        "message": "Unsafe member access .__test_internals on an `any` value.",
        "line": 56,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unsafeMemberExpression",
        "endLine": 56,
        "endColumn": 24
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-member-access",
        "severity": 2,
        "message": "Unsafe member access .__test_ensureFingerprintSalt on an `any` value.",
        "line": 57,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unsafeMemberExpression",
        "endLine": 57,
        "endColumn": 36
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-member-access",
        "severity": 2,
        "message": "Unsafe member access .ensureFingerprintSalt on an `any` value.",
        "line": 58,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unsafeMemberExpression",
        "endLine": 58,
        "endColumn": 29
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-return",
        "severity": 2,
        "message": "Unsafe return of a value of type `any`.",
        "line": 63,
        "column": 3,
        "nodeType": "ReturnStatement",
        "messageId": "unsafeReturn",
        "endLine": 63,
        "endColumn": 22
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-call",
        "severity": 2,
        "message": "Unsafe call of a(n) `any` typed value.",
        "line": 63,
        "column": 10,
        "nodeType": "Identifier",
        "messageId": "unsafeCall",
        "endLine": 63,
        "endColumn": 19
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-assignment",
        "severity": 2,
        "message": "Unsafe assignment of an `any` value.",
        "line": 68,
        "column": 9,
        "nodeType": "VariableDeclarator",
        "messageId": "anyAssignment",
        "endLine": 68,
        "endColumn": 38
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 68,
        "column": 35,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 68,
        "endColumn": 38,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [2356, 2359], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [2356, 2359], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-assignment",
        "severity": 2,
        "message": "Unsafe assignment of an `any` value.",
        "line": 69,
        "column": 9,
        "nodeType": "VariableDeclarator",
        "messageId": "anyAssignment",
        "endLine": 70,
        "endColumn": 77
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-member-access",
        "severity": 2,
        "message": "Unsafe member access .__test_internals on an `any` value.",
        "line": 70,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unsafeMemberExpression",
        "endLine": 70,
        "endColumn": 24
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-member-access",
        "severity": 2,
        "message": "Unsafe member access .__test_deepFreeze on an `any` value.",
        "line": 70,
        "column": 43,
        "nodeType": "Identifier",
        "messageId": "unsafeMemberExpression",
        "endLine": 70,
        "endColumn": 60
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-member-access",
        "severity": 2,
        "message": "Unsafe member access .deepFreeze on an `any` value.",
        "line": 70,
        "column": 67,
        "nodeType": "Identifier",
        "messageId": "unsafeMemberExpression",
        "endLine": 70,
        "endColumn": 77
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-return",
        "severity": 2,
        "message": "Unsafe return of a value of type `any`.",
        "line": 73,
        "column": 3,
        "nodeType": "ReturnStatement",
        "messageId": "unsafeReturn",
        "endLine": 73,
        "endColumn": 28
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-call",
        "severity": 2,
        "message": "Unsafe call of a(n) `any` typed value.",
        "line": 73,
        "column": 10,
        "nodeType": "Identifier",
        "messageId": "unsafeCall",
        "endLine": 73,
        "endColumn": 19
      }
    ],
    "suppressedMessages": [],
    "errorCount": 34,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "// SPDX-License-Identifier: MIT\n// Re-export a small, guarded surface of test-only helpers for consumers who need\n// to run tests against the package. This file is intended for dev/test usage\n// and is guarded at runtime by the same dev-guards used elsewhere in the repo.\n\nimport { environment } from \"./environment\";\nimport { InvalidConfigurationError } from \"./errors\";\nimport * as postMessageModule from \"./postMessage\";\n\nfunction assertTestAllowed(): void {\n  const environmentAllow =\n    typeof process !== \"undefined\" &&\n    process?.env?.[\"SECURITY_KIT_ALLOW_TEST_APIS\"] === \"true\";\n  const globalAllow = !!(globalThis as any).__SECURITY_KIT_ALLOW_TEST_APIS;\n  if (environment.isProduction && !environmentAllow && !globalAllow) {\n    throw new InvalidConfigurationError(\n      \"Test internals not allowed in production. Set SECURITY_KIT_ALLOW_TEST_APIS or set global flag.\",\n    );\n  }\n}\n\nexport function toNullProtoTest(\n  object: unknown,\n  depth?: number,\n  maxDepth?: number,\n): unknown {\n  assertTestAllowed();\n  const pm = postMessageModule as any;\n  const function_ =\n    pm.__test_internals?.toNullProto ?? pm.__test_toNullProto ?? pm.toNullProto;\n  if (typeof function_ !== \"function\")\n    throw new InvalidConfigurationError(\n      \"toNullProto test export not available\",\n    );\n  return function_(object, depth ?? 0, maxDepth ?? 8);\n}\n\nexport function getPayloadFingerprintTest(data: unknown): Promise<string> {\n  assertTestAllowed();\n  const pm = postMessageModule as any;\n  const function_ =\n    pm.__test_internals?.getPayloadFingerprint ??\n    pm.__test_getPayloadFingerprint ??\n    pm.getPayloadFingerprint;\n  if (typeof function_ !== \"function\")\n    throw new InvalidConfigurationError(\n      \"getPayloadFingerprint test export not available\",\n    );\n  return function_(data as any);\n}\n\nexport function ensureFingerprintSaltTest(): Promise<Uint8Array> {\n  assertTestAllowed();\n  const pm = postMessageModule as any;\n  const function_ =\n    pm.__test_internals?.ensureFingerprintSalt ??\n    pm.__test_ensureFingerprintSalt ??\n    pm.ensureFingerprintSalt;\n  if (typeof function_ !== \"function\")\n    throw new InvalidConfigurationError(\n      \"ensureFingerprintSalt test export not available\",\n    );\n  return function_();\n}\n\nexport function deepFreezeTest<T>(object: T): T {\n  assertTestAllowed();\n  const pm = postMessageModule as any;\n  const function_ =\n    pm.__test_internals?.deepFreeze ?? pm.__test_deepFreeze ?? pm.deepFreeze;\n  if (typeof function_ !== \"function\")\n    throw new InvalidConfigurationError(\"deepFreeze test export not available\");\n  return function_(object);\n}\n",
    "usedDeprecatedRules": [
      {
        "ruleId": "functional/prefer-readonly-type",
        "replacedBy": [
          "functional/prefer-immutable-types",
          "functional/type-declaration-immutability"
        ]
      }
    ]
  },
  {
    "filePath": "/home/david/Security-kit/src/url-policy.ts",
    "messages": [],
    "suppressedMessages": [
      {
        "ruleId": "functional/no-let",
        "severity": 2,
        "message": "Unexpected let, use const instead.",
        "line": 27,
        "column": 1,
        "nodeType": "VariableDeclaration",
        "messageId": "generic",
        "endLine": 27,
        "endColumn": 50,
        "suppressions": [
          {
            "kind": "directive",
            "justification": "Policy state must be assignable for configuration"
          }
        ]
      }
    ],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "functional/prefer-readonly-type",
        "replacedBy": [
          "functional/prefer-immutable-types",
          "functional/type-declaration-immutability"
        ]
      }
    ]
  },
  {
    "filePath": "/home/david/Security-kit/src/url.ts",
    "messages": [],
    "suppressedMessages": [
      {
        "ruleId": "sonarjs/cognitive-complexity",
        "severity": 2,
        "message": "Refactor this function to reduce its Cognitive Complexity from 29 to the 18 allowed.",
        "line": 174,
        "column": 10,
        "nodeType": null,
        "messageId": "refactorFunction",
        "endLine": 174,
        "endColumn": 32,
        "suppressions": [
          {
            "kind": "directive",
            "justification": "deliberate policy-heavy branching"
          }
        ]
      },
      {
        "ruleId": "functional/immutable-data",
        "severity": 2,
        "message": "Modifying an existing object/array is not allowed.",
        "line": 394,
        "column": 38,
        "nodeType": "AssignmentExpression",
        "messageId": "generic",
        "endLine": 394,
        "endColumn": 57,
        "suppressions": [
          {
            "kind": "directive",
            "justification": "deliberate in-place update of URL object"
          }
        ]
      },
      {
        "ruleId": "functional/immutable-data",
        "severity": 2,
        "message": "Modifying an existing object/array is not allowed.",
        "line": 396,
        "column": 5,
        "nodeType": "AssignmentExpression",
        "messageId": "generic",
        "endLine": 396,
        "endColumn": 28,
        "suppressions": [
          {
            "kind": "directive",
            "justification": "deliberate in-place update of URL object"
          }
        ]
      },
      {
        "ruleId": "functional/immutable-data",
        "severity": 2,
        "message": "Modifying an existing object/array is not allowed.",
        "line": 482,
        "column": 7,
        "nodeType": "AssignmentExpression",
        "messageId": "generic",
        "endLine": 482,
        "endColumn": 26,
        "suppressions": [
          {
            "kind": "directive",
            "justification": "deliberate in-place mutation of URL"
          }
        ]
      },
      {
        "ruleId": "unicorn/prevent-abbreviations",
        "severity": 1,
        "message": "The variable `updateURLParams` should be named `updateURLParameters_`. A more descriptive name will do too.",
        "line": 495,
        "column": 17,
        "nodeType": "Identifier",
        "messageId": "replace",
        "endLine": 495,
        "endColumn": 32,
        "suppressions": [
          {
            "kind": "directive",
            "justification": "stable public API name; descriptive alias exported below"
          }
        ]
      },
      {
        "ruleId": "unicorn/prevent-abbreviations",
        "severity": 1,
        "message": "The variable `parseURLParams` should be named `parseURLParameters_`. A more descriptive name will do too.",
        "line": 662,
        "column": 17,
        "nodeType": "Identifier",
        "messageId": "replace",
        "endLine": 662,
        "endColumn": 31,
        "suppressions": [
          {
            "kind": "directive",
            "justification": "stable public API name; descriptive alias exported below"
          }
        ]
      },
      {
        "ruleId": "functional/immutable-data",
        "severity": 2,
        "message": "Modifying an existing object/array is not allowed.",
        "line": 704,
        "column": 48,
        "nodeType": "AssignmentExpression",
        "messageId": "generic",
        "endLine": 704,
        "endColumn": 61,
        "suppressions": [
          {
            "kind": "directive",
            "justification": "creating return POJO from map"
          }
        ]
      }
    ],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "functional/prefer-readonly-type",
        "replacedBy": [
          "functional/prefer-immutable-types",
          "functional/type-declaration-immutability"
        ]
      }
    ]
  },
  {
    "filePath": "/home/david/Security-kit/src/utils.ts",
    "messages": [],
    "suppressedMessages": [
      {
        "ruleId": "unicorn/prevent-abbreviations",
        "severity": 1,
        "message": "The filename `utils.ts` should be named `utilities.ts`. A more descriptive name will do too.",
        "line": 29,
        "column": 1,
        "nodeType": "Program",
        "messageId": "replace",
        "endLine": 1358,
        "endColumn": 1,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "unicorn/prevent-abbreviations",
        "severity": 1,
        "message": "The variable `obj` should be named `object`. A more descriptive name will do too.",
        "line": 44,
        "column": 25,
        "nodeType": "Identifier",
        "messageId": "replace",
        "endLine": 44,
        "endColumn": 37,
        "fix": { "range": [1781, 1801], "text": "object: unknown) => object" },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "functional/no-let",
        "severity": 2,
        "message": "Unexpected let, use const instead.",
        "line": 93,
        "column": 1,
        "nodeType": "VariableDeclaration",
        "messageId": "generic",
        "endLine": 93,
        "endColumn": 46,
        "suppressions": [
          {
            "kind": "directive",
            "justification": "telemetry hook must be mutable for register/unregister"
          }
        ]
      },
      {
        "ruleId": "unicorn/prevent-abbreviations",
        "severity": 1,
        "message": "The variable `obj` should be named `object`. A more descriptive name will do too.",
        "line": 103,
        "column": 9,
        "nodeType": "Identifier",
        "messageId": "replace",
        "endLine": 103,
        "endColumn": 12,
        "fix": {
          "range": [3333, 3581],
          "text": "object = Object.entries(tags).reduce(\n    (acc, [k, v]) => {\n      if (!METRIC_TAG_ALLOW.has(k)) return acc;\n      return { ...acc, [k]: String(v).slice(0, 64) };\n    },\n    {} as Record<string, string>,\n  );\n  return Object.keys(object).length > 0 ? object"
        },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "unicorn/prevent-abbreviations",
        "severity": 1,
        "message": "The variable `acc` should be named `accumulator`. A more descriptive name will do too.",
        "line": 104,
        "column": 6,
        "nodeType": "Identifier",
        "messageId": "replace",
        "endLine": 104,
        "endColumn": 9,
        "fix": {
          "range": [3373, 3460],
          "text": "accumulator, [k, v]) => {\n      if (!METRIC_TAG_ALLOW.has(k)) return accumulator;\n      return { ...accumulator"
        },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "unicorn/prevent-abbreviations",
        "severity": 1,
        "message": "The variable `env` should be named `environment_`. A more descriptive name will do too.",
        "line": 186,
        "column": 11,
        "nodeType": "Identifier",
        "messageId": "replace",
        "endLine": 186,
        "endColumn": 14,
        "fix": {
          "range": [5705, 5776],
          "text": "environment_ = process.env as Record<string, string> | undefined;\n    return environment_"
        },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "unicorn/prevent-abbreviations",
        "severity": 1,
        "message": "The variable `validateNumericParam` should be named `validateNumericParameter`. A more descriptive name will do too.",
        "line": 203,
        "column": 17,
        "nodeType": "Identifier",
        "messageId": "replace",
        "endLine": 203,
        "endColumn": 37,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "unicorn/prevent-abbreviations",
        "severity": 1,
        "message": "The variable `err` should be named `error`. A more descriptive name will do too.",
        "line": 296,
        "column": 12,
        "nodeType": "Identifier",
        "messageId": "replace",
        "endLine": 296,
        "endColumn": 15,
        "fix": {
          "range": [8900, 9032],
          "text": "error) {\n    if (isDevelopment()) {\n      secureDevLog(\"error\", \"secureWipe\", \"Wipe failed\", {\n        error: sanitizeErrorForLogs(error"
        },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "unicorn/prevent-abbreviations",
        "severity": 1,
        "message": "The variable `obj` should be named `object`. A more descriptive name will do too.",
        "line": 339,
        "column": 5,
        "nodeType": "Identifier",
        "messageId": "replace",
        "endLine": 339,
        "endColumn": 17,
        "fix": {
          "range": [10432, 10728],
          "text": "object: unknown,\n  ): object is { readonly fill?: (v: number) => unknown } {\n    try {\n      const g = globalThis as GlobalWithBuffer;\n      return (\n        typeof g.Buffer !== \"undefined\" &&\n        typeof g.Buffer.isBuffer === \"function\" &&\n        (g.Buffer.isBuffer as (o: unknown) => boolean)(object"
        },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "functional/no-let",
        "severity": 2,
        "message": "Unexpected let, use const instead.",
        "line": 376,
        "column": 5,
        "nodeType": "VariableDeclaration",
        "messageId": "generic",
        "endLine": 376,
        "endColumn": 15,
        "suppressions": [
          {
            "kind": "directive",
            "justification": "loop counter required for chunked wipe"
          }
        ]
      },
      {
        "ruleId": "unicorn/prevent-abbreviations",
        "severity": 1,
        "message": "The variable `i` should be named `index`. A more descriptive name will do too.",
        "line": 376,
        "column": 9,
        "nodeType": "Identifier",
        "messageId": "replace",
        "endLine": 376,
        "endColumn": 10,
        "fix": {
          "range": [11532, 11699],
          "text": "index = 0;\n    const n = view.byteLength;\n    const STEP32 = 4;\n    for (; index + STEP32 <= n; index += STEP32) view.setUint32(index, 0, true);\n    for (; index < n; index++) view.setUint8(index"
        },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "functional/no-let",
        "severity": 2,
        "message": "Unexpected let, use const instead.",
        "line": 421,
        "column": 10,
        "nodeType": "VariableDeclaration",
        "messageId": "generic",
        "endLine": 421,
        "endColumn": 19,
        "suppressions": [
          {
            "kind": "directive",
            "justification": "loop counter required for BigInt wipe"
          }
        ]
      },
      {
        "ruleId": "unicorn/prevent-abbreviations",
        "severity": 1,
        "message": "The variable `i` should be named `index`. A more descriptive name will do too.",
        "line": 421,
        "column": 14,
        "nodeType": "Identifier",
        "messageId": "replace",
        "endLine": 421,
        "endColumn": 15,
        "fix": {
          "range": [13102, 13341],
          "text": "index = 0; index < ta.length; index++) {\n      // eslint-disable-next-line functional/immutable-data,functional/prefer-readonly-type -- intentional in-place wipe of BigInt typed array for security\n      (ta as unknown as { [index: number]: bigint })[index"
        },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "functional/immutable-data",
        "severity": 2,
        "message": "Modifying an existing object/array is not allowed.",
        "line": 423,
        "column": 7,
        "nodeType": "AssignmentExpression",
        "messageId": "generic",
        "endLine": 423,
        "endColumn": 61,
        "suppressions": [
          {
            "kind": "directive",
            "justification": "intentional in-place wipe of BigInt typed array for security"
          }
        ]
      },
      {
        "ruleId": "functional/prefer-readonly-type",
        "severity": 2,
        "message": "A readonly modifier is required.",
        "line": 423,
        "column": 27,
        "nodeType": "TSIndexSignature",
        "messageId": "property",
        "endLine": 423,
        "endColumn": 50,
        "fix": { "range": [13313, 13313], "text": "readonly " },
        "suppressions": [
          {
            "kind": "directive",
            "justification": "intentional in-place wipe of BigInt typed array for security"
          }
        ]
      },
      {
        "ruleId": "functional/no-let",
        "severity": 2,
        "message": "Unexpected let, use const instead.",
        "line": 455,
        "column": 8,
        "nodeType": "VariableDeclaration",
        "messageId": "generic",
        "endLine": 455,
        "endColumn": 17,
        "suppressions": [
          {
            "kind": "directive",
            "justification": "loop counter and in-place wipe required for secure zeroing"
          }
        ]
      },
      {
        "ruleId": "unicorn/prevent-abbreviations",
        "severity": 1,
        "message": "The variable `i` should be named `index`. A more descriptive name will do too.",
        "line": 455,
        "column": 12,
        "nodeType": "Identifier",
        "messageId": "replace",
        "endLine": 455,
        "endColumn": 13,
        "fix": {
          "range": [14219, 14250],
          "text": "index = 0; index < u8.length; index++) u8[index"
        },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "functional/immutable-data",
        "severity": 2,
        "message": "Modifying an existing object/array is not allowed.",
        "line": 455,
        "column": 39,
        "nodeType": "AssignmentExpression",
        "messageId": "generic",
        "endLine": 455,
        "endColumn": 48,
        "suppressions": [
          {
            "kind": "directive",
            "justification": "loop counter and in-place wipe required for secure zeroing"
          }
        ]
      },
      {
        "ruleId": "unicorn/prevent-abbreviations",
        "severity": 1,
        "message": "The variable `fn` should be named `function_`. A more descriptive name will do too.",
        "line": 481,
        "column": 3,
        "nodeType": "Identifier",
        "messageId": "replace",
        "endLine": 481,
        "endColumn": 29,
        "fix": {
          "range": [15051, 15196],
          "text": "function_: (buf: Uint8Array) => T,\n): T {\n  validateNumericParam(length, \"length\", 1, 4096);\n  const buf = new Uint8Array(length);\n  try {\n    return function_"
        },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "functional/no-let",
        "severity": 2,
        "message": "Unexpected let, use const instead.",
        "line": 522,
        "column": 3,
        "nodeType": "VariableDeclaration",
        "messageId": "generic",
        "endLine": 522,
        "endColumn": 21,
        "suppressions": [
          {
            "kind": "directive",
            "justification": "mutable lifecycle flag for secure buffer"
          }
        ]
      },
      {
        "ruleId": "unicorn/prevent-abbreviations",
        "severity": 1,
        "message": "The variable `aStr` should be named `aString`. A more descriptive name will do too.",
        "line": 561,
        "column": 9,
        "nodeType": "Identifier",
        "messageId": "replace",
        "endLine": 561,
        "endColumn": 13,
        "fix": {
          "range": [17214, 17499],
          "text": "aString = String(a);\n  const bStr = String(b);\n\n  if (\n    aString.length > MAX_RAW_INPUT_LENGTH ||\n    bStr.length > MAX_RAW_INPUT_LENGTH\n  ) {\n    throw new InvalidParameterError(\n      `Input length cannot exceed ${MAX_RAW_INPUT_LENGTH} characters.`,\n    );\n  }\n\n  const sa: string = aString"
        },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "unicorn/prevent-abbreviations",
        "severity": 1,
        "message": "The variable `bStr` should be named `bString`. A more descriptive name will do too.",
        "line": 562,
        "column": 9,
        "nodeType": "Identifier",
        "messageId": "replace",
        "endLine": 562,
        "endColumn": 13,
        "fix": {
          "range": [17240, 17543],
          "text": "bString = String(b);\n\n  if (\n    aStr.length > MAX_RAW_INPUT_LENGTH ||\n    bString.length > MAX_RAW_INPUT_LENGTH\n  ) {\n    throw new InvalidParameterError(\n      `Input length cannot exceed ${MAX_RAW_INPUT_LENGTH} characters.`,\n    );\n  }\n\n  const sa: string = aStr.normalize(\"NFC\");\n  const sb: string = bString"
        },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "functional/no-let",
        "severity": 2,
        "message": "Unexpected let, use const instead.",
        "line": 607,
        "column": 3,
        "nodeType": "VariableDeclaration",
        "messageId": "generic",
        "endLine": 607,
        "endColumn": 16,
        "suppressions": [
          {
            "kind": "directive",
            "justification": "accumulator for constant-time compare"
          }
        ]
      },
      {
        "ruleId": "functional/no-let",
        "severity": 2,
        "message": "Unexpected let, use const instead.",
        "line": 610,
        "column": 8,
        "nodeType": "VariableDeclaration",
        "messageId": "generic",
        "endLine": 610,
        "endColumn": 21,
        "suppressions": [
          {
            "kind": "directive",
            "justification": "loop counter for fixed-length compare"
          }
        ]
      },
      {
        "ruleId": "unicorn/prevent-abbreviations",
        "severity": 1,
        "message": "The variable `cb` should be named `callback`. A more descriptive name will do too.",
        "line": 612,
        "column": 11,
        "nodeType": "Identifier",
        "messageId": "replace",
        "endLine": 612,
        "endColumn": 13,
        "fix": {
          "range": [18910, 18961],
          "text": "callback = sb.charCodeAt(index) || 0;\n    diff |= ca ^ callback"
        },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "functional/no-let",
        "severity": 2,
        "message": "Unexpected let, use const instead.",
        "line": 654,
        "column": 3,
        "nodeType": "VariableDeclaration",
        "messageId": "generic",
        "endLine": 654,
        "endColumn": 16,
        "suppressions": [
          {
            "kind": "directive",
            "justification": "accumulator for constant-time array compare"
          }
        ]
      },
      {
        "ruleId": "unicorn/prevent-abbreviations",
        "severity": 1,
        "message": "The variable `len` should be named `length`. A more descriptive name will do too.",
        "line": 655,
        "column": 9,
        "nodeType": "Identifier",
        "messageId": "replace",
        "endLine": 655,
        "endColumn": 12,
        "fix": {
          "range": [20191, 20358],
          "text": "length = Math.max(ua.length, ub.length, MIN_COMPARE_BYTES);\n  // eslint-disable-next-line functional/no-let -- loop counter for array comparison\n  for (let i = 0; i < length"
        },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "functional/no-let",
        "severity": 2,
        "message": "Unexpected let, use const instead.",
        "line": 657,
        "column": 8,
        "nodeType": "VariableDeclaration",
        "messageId": "generic",
        "endLine": 657,
        "endColumn": 17,
        "suppressions": [
          {
            "kind": "directive",
            "justification": "loop counter for array comparison"
          }
        ]
      },
      {
        "ruleId": "unicorn/prevent-abbreviations",
        "severity": 1,
        "message": "The variable `i` should be named `index`. A more descriptive name will do too.",
        "line": 657,
        "column": 12,
        "nodeType": "Identifier",
        "messageId": "replace",
        "endLine": 657,
        "endColumn": 13,
        "fix": {
          "range": [20344, 20413],
          "text": "index = 0; index < len; index++) {\n    const ca = ua[index] ?? 0;\n    const cb = ub[index"
        },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "unicorn/prevent-abbreviations",
        "severity": 1,
        "message": "The variable `cb` should be named `callback`. A more descriptive name will do too.",
        "line": 659,
        "column": 11,
        "nodeType": "Identifier",
        "messageId": "replace",
        "endLine": 659,
        "endColumn": 13,
        "fix": {
          "range": [20404, 20440],
          "text": "callback = ub[i] ?? 0;\n    diff |= ca ^ callback"
        },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "functional/no-let",
        "severity": 2,
        "message": "Unexpected let, use const instead.",
        "line": 715,
        "column": 3,
        "nodeType": "VariableDeclaration",
        "messageId": "generic",
        "endLine": 715,
        "endColumn": 34,
        "suppressions": [
          {
            "kind": "directive",
            "justification": "temporary buffers created and wiped in finally"
          }
        ]
      },
      {
        "ruleId": "functional/no-let",
        "severity": 2,
        "message": "Unexpected let, use const instead.",
        "line": 717,
        "column": 3,
        "nodeType": "VariableDeclaration",
        "messageId": "generic",
        "endLine": 717,
        "endColumn": 34,
        "suppressions": [
          {
            "kind": "directive",
            "justification": "temporary buffers created and wiped in finally"
          }
        ]
      },
      {
        "ruleId": "unicorn/prevent-abbreviations",
        "severity": 1,
        "message": "The variable `db` should be named `database`. A more descriptive name will do too.",
        "line": 720,
        "column": 16,
        "nodeType": "Identifier",
        "messageId": "replace",
        "endLine": 720,
        "endColumn": 18,
        "fix": {
          "range": [22616, 22823],
          "text": "database] = await Promise.all([\n      subtle.digest(\"SHA-256\", SHARED_ENCODER.encode(sa)),\n      subtle.digest(\"SHA-256\", SHARED_ENCODER.encode(sb)),\n    ]);\n    ua = new Uint8Array(da);\n    ub = new Uint8Array(database"
        },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "functional/no-let",
        "severity": 2,
        "message": "Unexpected let, use const instead.",
        "line": 858,
        "column": 3,
        "nodeType": "VariableDeclaration",
        "messageId": "generic",
        "endLine": 858,
        "endColumn": 23,
        "suppressions": [
          {
            "kind": "directive",
            "justification": "intentional mutable counter for unsafe key count"
          }
        ]
      },
      {
        "ruleId": "functional/no-let",
        "severity": 2,
        "message": "Unexpected let, use const instead.",
        "line": 866,
        "column": 3,
        "nodeType": "VariableDeclaration",
        "messageId": "generic",
        "endLine": 866,
        "endColumn": 44,
        "suppressions": [
          {
            "kind": "directive",
            "justification": "collecting dev-only hashes in a local mutable"
          }
        ]
      },
      {
        "ruleId": "unicorn/prevent-abbreviations",
        "severity": 1,
        "message": "The variable `acc` should be named `accumulator`. A more descriptive name will do too.",
        "line": 868,
        "column": 6,
        "nodeType": "Identifier",
        "messageId": "replace",
        "endLine": 868,
        "endColumn": 9,
        "fix": {
          "range": [27021, 29038],
          "text": "accumulator, [key, rawValue]) => {\n      if (!SAFE_KEY_REGEX.test(key)) {\n        unsafeCount += 1;\n        if (includeHashes) {\n          try {\n            // Non-blocking best-effort: compute a SHA-256 hex digest of\n            // the key + optional salt. Use the synchronous JS-only hasher\n            // as a fallback to avoid introducing runtime crypto failures.\n            const salt = loggingCfg.unsafeKeyHashSalt ?? \"\";\n            const input = `${salt}:${key}`;\n            // Use builtin subtle if available; otherwise fallback to a\n            // simple JS-based hash (not cryptographically strong) to\n            // maintain deterministic debug output in development.\n            // Compute a deterministic, synchronous, non-crypto hash (DJB2)\n            // for development-only debugging. This avoids any possibility\n            // of emitting raw key names or relying on async subtle.digest\n            // inside a sync code path.\n            // eslint-disable-next-line functional/no-let -- intentional local loop counter for DJB2\n            let h = 5381;\n            // eslint-disable-next-line functional/no-let -- loop counter\n            for (let i = 0; i < input.length; i++) {\n              /* intentional bitwise ops for DJB2 */\n              h = ((h << 5) + h) ^ input.charCodeAt(i);\n            }\n            // Normalize to hex string; append immutably to avoid mutating shared\n            // arrays while still keeping this local, development-only collection.\n            unsafeHashes = [...unsafeHashes, (h >>> 0).toString(16)];\n          } catch {\n            /* ignore hashing failures in dev */\n          }\n        }\n        return accumulator;\n      }\n\n      if (isSensitiveKey(key)) return { ...accumulator, [key]: REDACTED_VALUE };\n\n      const v: unknown = (() => {\n        if (typeof rawValue === \"string\") return _redactPrimitive(rawValue);\n        if (rawValue && typeof rawValue === \"object\")\n          return _redact(rawValue, depth + 1);\n        return rawValue;\n      })();\n\n      return { ...accumulator"
        },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "functional/no-let",
        "severity": 2,
        "message": "Unexpected let, use const instead.",
        "line": 886,
        "column": 13,
        "nodeType": "VariableDeclaration",
        "messageId": "generic",
        "endLine": 886,
        "endColumn": 26,
        "suppressions": [
          {
            "kind": "directive",
            "justification": "intentional local loop counter for DJB2"
          }
        ]
      },
      {
        "ruleId": "functional/no-let",
        "severity": 2,
        "message": "Unexpected let, use const instead.",
        "line": 888,
        "column": 18,
        "nodeType": "VariableDeclaration",
        "messageId": "generic",
        "endLine": 888,
        "endColumn": 27,
        "suppressions": [
          { "kind": "directive", "justification": "loop counter" }
        ]
      },
      {
        "ruleId": "unicorn/prevent-abbreviations",
        "severity": 1,
        "message": "The variable `i` should be named `index`. A more descriptive name will do too.",
        "line": 888,
        "column": 22,
        "nodeType": "Identifier",
        "messageId": "replace",
        "endLine": 888,
        "endColumn": 23,
        "fix": {
          "range": [28183, 28321],
          "text": "index = 0; index < input.length; index++) {\n              /* intentional bitwise ops for DJB2 */\n              h = ((h << 5) + h) ^ input.charCodeAt(index"
        },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "functional/prefer-readonly-type",
        "severity": 2,
        "message": "Only readonly arrays allowed.",
        "line": 1026,
        "column": 14,
        "nodeType": "TSArrayType",
        "messageId": "array",
        "endLine": 1026,
        "endColumn": 23,
        "fix": { "range": [31912, 31912], "text": "readonly " },
        "suppressions": [
          {
            "kind": "directive",
            "justification": "mutable array for building result"
          }
        ]
      },
      {
        "ruleId": "functional/no-let",
        "severity": 2,
        "message": "Unexpected let, use const instead.",
        "line": 1029,
        "column": 8,
        "nodeType": "VariableDeclaration",
        "messageId": "generic",
        "endLine": 1029,
        "endColumn": 17,
        "suppressions": [
          {
            "kind": "directive",
            "justification": "intentional loop counter for array breadth processing"
          }
        ]
      },
      {
        "ruleId": "unicorn/prevent-abbreviations",
        "severity": 1,
        "message": "The variable `i` should be named `index`. A more descriptive name will do too.",
        "line": 1029,
        "column": 12,
        "nodeType": "Identifier",
        "messageId": "replace",
        "endLine": 1029,
        "endColumn": 13,
        "fix": {
          "range": [32098, 32257],
          "text": "index = 0; index < limit; index++) {\n    /* eslint-disable functional/immutable-data -- intentional push to build array */\n    out.push(_cloneAndNormalizeForLogging(data[index"
        },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "functional/immutable-data",
        "severity": 2,
        "message": "Modifying an array is not allowed.",
        "line": 1031,
        "column": 5,
        "nodeType": "CallExpression",
        "messageId": "array",
        "endLine": 1031,
        "endColumn": 72,
        "suppressions": [
          {
            "kind": "directive",
            "justification": "intentional push to build array"
          }
        ]
      },
      {
        "ruleId": "functional/immutable-data",
        "severity": 2,
        "message": "Modifying an array is not allowed.",
        "line": 1036,
        "column": 5,
        "nodeType": "CallExpression",
        "messageId": "array",
        "endLine": 1040,
        "endColumn": 7,
        "suppressions": [
          {
            "kind": "directive",
            "justification": "intentional push for truncation summary"
          }
        ]
      },
      {
        "ruleId": "functional/immutable-data",
        "severity": 2,
        "message": "Modifying an existing object/array is not allowed.",
        "line": 1062,
        "column": 7,
        "nodeType": "AssignmentExpression",
        "messageId": "generic",
        "endLine": 1062,
        "endColumn": 48,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "functional/no-let",
        "severity": 2,
        "message": "Unexpected let, use const instead.",
        "line": 1074,
        "column": 8,
        "nodeType": "VariableDeclaration",
        "messageId": "generic",
        "endLine": 1074,
        "endColumn": 17,
        "suppressions": [
          {
            "kind": "directive",
            "justification": "loop counter for key processing"
          }
        ]
      },
      {
        "ruleId": "unicorn/prevent-abbreviations",
        "severity": 1,
        "message": "The variable `i` should be named `index`. A more descriptive name will do too.",
        "line": 1074,
        "column": 12,
        "nodeType": "Identifier",
        "messageId": "replace",
        "endLine": 1074,
        "endColumn": 13,
        "fix": {
          "range": [33483, 33533],
          "text": "index = 0; index < limit; index++) {\n    const key = allKeys[index"
        },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "functional/immutable-data",
        "severity": 2,
        "message": "Modifying an existing object/array is not allowed.",
        "line": 1078,
        "column": 7,
        "nodeType": "AssignmentExpression",
        "messageId": "generic",
        "endLine": 1082,
        "endColumn": 8,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "functional/immutable-data",
        "severity": 2,
        "message": "Modifying an existing object/array is not allowed.",
        "line": 1085,
        "column": 7,
        "nodeType": "AssignmentExpression",
        "messageId": "generic",
        "endLine": 1085,
        "endColumn": 65,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "functional/immutable-data",
        "severity": 2,
        "message": "Modifying an existing object/array is not allowed.",
        "line": 1091,
        "column": 5,
        "nodeType": "AssignmentExpression",
        "messageId": "generic",
        "endLine": 1095,
        "endColumn": 6,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "unicorn/prevent-abbreviations",
        "severity": 1,
        "message": "The variable `devLogState` should be named `developmentLogState`. A more descriptive name will do too.",
        "line": 1168,
        "column": 7,
        "nodeType": "Identifier",
        "messageId": "replace",
        "endLine": 1173,
        "endColumn": 2,
        "fix": {
          "range": [36852, 39388],
          "text": "developmentLogState: {\n  bucket: number;\n  lastRefill: number;\n  dropped: number;\n  lastDropReport: number;\n} = {\n  bucket: DEV_LOG_TOKENS,\n  lastRefill: Date.now(),\n  dropped: 0,\n  lastDropReport: 0,\n};\n/* eslint-enable functional/prefer-readonly-type */\n\nfunction devLogAllow(): boolean {\n  if (environment.isProduction) return false;\n  const now = Date.now();\n  const loggingCfg = getLoggingConfig();\n  const tokensPerMinute = loggingCfg.rateLimitTokensPerMinute ?? DEV_LOG_TOKENS;\n\n  // If the configured tokens-per-minute is lower than the current bucket,\n  // clamp the bucket immediately so tests or runtime config changes take\n  // effect without waiting for the next refill window.\n  // This keeps the behaviour simple and auditable.\n  if (developmentLogState.bucket > Math.max(0, Math.trunc(tokensPerMinute))) {\n    // eslint-disable-next-line functional/immutable-data -- audited mutation of local state\n    developmentLogState.bucket = Math.max(0, Math.trunc(tokensPerMinute));\n  }\n\n  // Refill bucket once per minute using configured tokens\n  if (now - developmentLogState.lastRefill >= 60_000) {\n    // eslint-disable-next-line functional/immutable-data -- audited mutation of local state\n    developmentLogState.bucket = Math.max(1, Math.trunc(tokensPerMinute));\n    // eslint-disable-next-line functional/immutable-data -- audited mutation of local state\n    developmentLogState.lastRefill = now;\n  }\n  if (developmentLogState.bucket > 0) {\n    // eslint-disable-next-line functional/immutable-data -- audited mutation of local state\n    developmentLogState.bucket--;\n    return true;\n  }\n\n  // Track dropped and occasionally emit a summary (no recursion into our logger)\n  // eslint-disable-next-line functional/immutable-data -- audited mutation of local state\n  developmentLogState.dropped++;\n  if (now - developmentLogState.lastDropReport > 5_000) {\n    // eslint-disable-next-line functional/immutable-data -- audited mutation of local state\n    developmentLogState.lastDropReport = now;\n    try {\n      // Do NOT call secureDevLog here; go straight to console\n      // Avoid including user context; share only counts\n\n      console.warn(\n        \"[security-kit] dev log rate-limit: dropping\",\n        developmentLogState.dropped,\n        \"messages in the last 5s window\",\n      );\n      // Emit telemetry for rate hits\n      try {\n        safeEmitMetric(\"logRateLimit.hit\", developmentLogState.dropped, {\n          reason: \"dev\",\n        });\n      } catch {\n        /* ignore telemetry failures */\n      }\n      // eslint-disable-next-line functional/immutable-data -- audited mutation of local state\n      developmentLogState"
        },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "functional/prefer-readonly-type",
        "severity": 2,
        "message": "A readonly modifier is required.",
        "line": 1169,
        "column": 3,
        "nodeType": "TSPropertySignature",
        "messageId": "property",
        "endLine": 1169,
        "endColumn": 18,
        "fix": { "range": [36869, 36869], "text": "readonly " },
        "suppressions": [
          {
            "kind": "directive",
            "justification": "audited mutable state for rate limiting"
          }
        ]
      },
      {
        "ruleId": "functional/prefer-readonly-type",
        "severity": 2,
        "message": "A readonly modifier is required.",
        "line": 1170,
        "column": 3,
        "nodeType": "TSPropertySignature",
        "messageId": "property",
        "endLine": 1170,
        "endColumn": 22,
        "fix": { "range": [36887, 36887], "text": "readonly " },
        "suppressions": [
          {
            "kind": "directive",
            "justification": "audited mutable state for rate limiting"
          }
        ]
      },
      {
        "ruleId": "functional/prefer-readonly-type",
        "severity": 2,
        "message": "A readonly modifier is required.",
        "line": 1171,
        "column": 3,
        "nodeType": "TSPropertySignature",
        "messageId": "property",
        "endLine": 1171,
        "endColumn": 19,
        "fix": { "range": [36909, 36909], "text": "readonly " },
        "suppressions": [
          {
            "kind": "directive",
            "justification": "audited mutable state for rate limiting"
          }
        ]
      },
      {
        "ruleId": "functional/prefer-readonly-type",
        "severity": 2,
        "message": "A readonly modifier is required.",
        "line": 1172,
        "column": 3,
        "nodeType": "TSPropertySignature",
        "messageId": "property",
        "endLine": 1172,
        "endColumn": 26,
        "fix": { "range": [36928, 36928], "text": "readonly " },
        "suppressions": [
          {
            "kind": "directive",
            "justification": "audited mutable state for rate limiting"
          }
        ]
      },
      {
        "ruleId": "unicorn/prevent-abbreviations",
        "severity": 1,
        "message": "The variable `devLogAllow` should be named `developmentLogAllow`. A more descriptive name will do too.",
        "line": 1181,
        "column": 10,
        "nodeType": "Identifier",
        "messageId": "replace",
        "endLine": 1181,
        "endColumn": 21,
        "fix": {
          "range": [37110, 41795],
          "text": "developmentLogAllow(): boolean {\n  if (environment.isProduction) return false;\n  const now = Date.now();\n  const loggingCfg = getLoggingConfig();\n  const tokensPerMinute = loggingCfg.rateLimitTokensPerMinute ?? DEV_LOG_TOKENS;\n\n  // If the configured tokens-per-minute is lower than the current bucket,\n  // clamp the bucket immediately so tests or runtime config changes take\n  // effect without waiting for the next refill window.\n  // This keeps the behaviour simple and auditable.\n  if (devLogState.bucket > Math.max(0, Math.trunc(tokensPerMinute))) {\n    // eslint-disable-next-line functional/immutable-data -- audited mutation of local state\n    devLogState.bucket = Math.max(0, Math.trunc(tokensPerMinute));\n  }\n\n  // Refill bucket once per minute using configured tokens\n  if (now - devLogState.lastRefill >= 60_000) {\n    // eslint-disable-next-line functional/immutable-data -- audited mutation of local state\n    devLogState.bucket = Math.max(1, Math.trunc(tokensPerMinute));\n    // eslint-disable-next-line functional/immutable-data -- audited mutation of local state\n    devLogState.lastRefill = now;\n  }\n  if (devLogState.bucket > 0) {\n    // eslint-disable-next-line functional/immutable-data -- audited mutation of local state\n    devLogState.bucket--;\n    return true;\n  }\n\n  // Track dropped and occasionally emit a summary (no recursion into our logger)\n  // eslint-disable-next-line functional/immutable-data -- audited mutation of local state\n  devLogState.dropped++;\n  if (now - devLogState.lastDropReport > 5_000) {\n    // eslint-disable-next-line functional/immutable-data -- audited mutation of local state\n    devLogState.lastDropReport = now;\n    try {\n      // Do NOT call secureDevLog here; go straight to console\n      // Avoid including user context; share only counts\n\n      console.warn(\n        \"[security-kit] dev log rate-limit: dropping\",\n        devLogState.dropped,\n        \"messages in the last 5s window\",\n      );\n      // Emit telemetry for rate hits\n      try {\n        safeEmitMetric(\"logRateLimit.hit\", devLogState.dropped, {\n          reason: \"dev\",\n        });\n      } catch {\n        /* ignore telemetry failures */\n      }\n      // eslint-disable-next-line functional/immutable-data -- audited mutation of local state\n      devLogState.dropped = 0;\n    } catch {\n      // ignore console errors in exotic environments\n    }\n  }\n  return false;\n}\n\ntype LogLevel = \"debug\" | \"info\" | \"warn\" | \"error\";\n\n/**\n * Internal console wrapper for development-only logging.\n * @internal\n */\nexport function _devConsole(\n  level: LogLevel,\n  message: string,\n  safeContext: unknown,\n): void {\n  if (environment.isProduction) return;\n  // Serialize a string-safe representation of the context to avoid leaking structured data\n  const ctxString = ((): string => {\n    try {\n      // Use an untyped JS replacer to avoid explicit `any` annotations while\n      // keeping a simple length truncation for string values. This local\n      // function is intentionally narrow and used only for serializing\n      // dev-only log context.\n      /**\n       * JSON replacer used only for dev logging string truncation.\n       * @param _k The key (ignored).\n       * @param v The value to process.\n       */\n      function replacer(_k: string, v: unknown): unknown {\n        return typeof v === \"string\" && v.length > 1024\n          ? `${v.slice(0, 1024)}...[TRUNC]`\n          : v;\n      }\n      return JSON.stringify(safeContext, replacer);\n    } catch {\n      return String(safeContext);\n    }\n  })();\n  // DEFENSE-IN-DEPTH: sanitize message at the sink, even if caller already sanitized.\n  const safeMessage = sanitizeLogMessage(message);\n\n  const out = ctxString ? `${safeMessage} | context=${ctxString}` : safeMessage;\n  switch (level) {\n    case \"debug\":\n      console.debug(out);\n      break;\n    case \"info\":\n      console.info(out);\n      break;\n    case \"warn\":\n      console.warn(out);\n      break;\n    case \"error\":\n      console.error(out);\n      break;\n    default:\n      console.info(out);\n  }\n}\n\n/**\n * Logs a message and a context object in development environments ONLY.\n * The context object is automatically redacted to prevent accidental leakage\n * of sensitive information.\n * @param level The log level.\n * @param component The name of the component or module logging the message.\n * @param message The log message.\n * @param context An optional object containing additional context.\n */\nexport function secureDevLog(\n  level: LogLevel,\n  component: string,\n  message: string,\n  context: unknown = {},\n): void {\n  if (environment.isProduction) return;\n  // Apply rate limit before any work (redaction, event dispatch, stringify)\n  if (!developmentLogAllow"
        },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "functional/immutable-data",
        "severity": 2,
        "message": "Modifying an existing object/array is not allowed.",
        "line": 1193,
        "column": 5,
        "nodeType": "AssignmentExpression",
        "messageId": "generic",
        "endLine": 1193,
        "endColumn": 66,
        "suppressions": [
          {
            "kind": "directive",
            "justification": "audited mutation of local state"
          }
        ]
      },
      {
        "ruleId": "functional/immutable-data",
        "severity": 2,
        "message": "Modifying an existing object/array is not allowed.",
        "line": 1199,
        "column": 5,
        "nodeType": "AssignmentExpression",
        "messageId": "generic",
        "endLine": 1199,
        "endColumn": 66,
        "suppressions": [
          {
            "kind": "directive",
            "justification": "audited mutation of local state"
          }
        ]
      },
      {
        "ruleId": "functional/immutable-data",
        "severity": 2,
        "message": "Modifying an existing object/array is not allowed.",
        "line": 1201,
        "column": 5,
        "nodeType": "AssignmentExpression",
        "messageId": "generic",
        "endLine": 1201,
        "endColumn": 33,
        "suppressions": [
          {
            "kind": "directive",
            "justification": "audited mutation of local state"
          }
        ]
      },
      {
        "ruleId": "functional/immutable-data",
        "severity": 2,
        "message": "Modifying an existing object/array is not allowed.",
        "line": 1205,
        "column": 5,
        "nodeType": "UpdateExpression",
        "messageId": "generic",
        "endLine": 1205,
        "endColumn": 25,
        "suppressions": [
          {
            "kind": "directive",
            "justification": "audited mutation of local state"
          }
        ]
      },
      {
        "ruleId": "functional/immutable-data",
        "severity": 2,
        "message": "Modifying an existing object/array is not allowed.",
        "line": 1211,
        "column": 3,
        "nodeType": "UpdateExpression",
        "messageId": "generic",
        "endLine": 1211,
        "endColumn": 24,
        "suppressions": [
          {
            "kind": "directive",
            "justification": "audited mutation of local state"
          }
        ]
      },
      {
        "ruleId": "functional/immutable-data",
        "severity": 2,
        "message": "Modifying an existing object/array is not allowed.",
        "line": 1214,
        "column": 5,
        "nodeType": "AssignmentExpression",
        "messageId": "generic",
        "endLine": 1214,
        "endColumn": 37,
        "suppressions": [
          {
            "kind": "directive",
            "justification": "audited mutation of local state"
          }
        ]
      },
      {
        "ruleId": "functional/immutable-data",
        "severity": 2,
        "message": "Modifying an existing object/array is not allowed.",
        "line": 1233,
        "column": 7,
        "nodeType": "AssignmentExpression",
        "messageId": "generic",
        "endLine": 1233,
        "endColumn": 30,
        "suppressions": [
          {
            "kind": "directive",
            "justification": "audited mutation of local state"
          }
        ]
      },
      {
        "ruleId": "unicorn/prevent-abbreviations",
        "severity": 1,
        "message": "The variable `_devConsole` should be named `_developmentConsole`. A more descriptive name will do too.",
        "line": 1247,
        "column": 17,
        "nodeType": "Identifier",
        "messageId": "replace",
        "endLine": 1247,
        "endColumn": 28,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "unicorn/prevent-abbreviations",
        "severity": 1,
        "message": "The variable `ctxString` should be named `contextString`. A more descriptive name will do too.",
        "line": 1254,
        "column": 9,
        "nodeType": "Identifier",
        "messageId": "replace",
        "endLine": 1254,
        "endColumn": 18,
        "fix": {
          "range": [39873, 40831],
          "text": "contextString = ((): string => {\n    try {\n      // Use an untyped JS replacer to avoid explicit `any` annotations while\n      // keeping a simple length truncation for string values. This local\n      // function is intentionally narrow and used only for serializing\n      // dev-only log context.\n      /**\n       * JSON replacer used only for dev logging string truncation.\n       * @param _k The key (ignored).\n       * @param v The value to process.\n       */\n      function replacer(_k: string, v: unknown): unknown {\n        return typeof v === \"string\" && v.length > 1024\n          ? `${v.slice(0, 1024)}...[TRUNC]`\n          : v;\n      }\n      return JSON.stringify(safeContext, replacer);\n    } catch {\n      return String(safeContext);\n    }\n  })();\n  // DEFENSE-IN-DEPTH: sanitize message at the sink, even if caller already sanitized.\n  const safeMessage = sanitizeLogMessage(message);\n\n  const out = contextString ? `${safeMessage} | context=${contextString"
        },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "unicorn/prevent-abbreviations",
        "severity": 1,
        "message": "The variable `secureDevLog` should be named `secureDevelopmentLog_`. A more descriptive name will do too.",
        "line": 1306,
        "column": 17,
        "nodeType": "Identifier",
        "messageId": "replace",
        "endLine": 1306,
        "endColumn": 29,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      }
    ],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "functional/prefer-readonly-type",
        "replacedBy": [
          "functional/prefer-immutable-types",
          "functional/type-declaration-immutability"
        ]
      }
    ]
  },
  {
    "filePath": "/home/david/Security-kit/src/worker/signing-worker.ts",
    "messages": [],
    "suppressedMessages": [
      {
        "ruleId": "functional/no-let",
        "severity": 2,
        "message": "Unexpected let, use const instead.",
        "line": 73,
        "column": 3,
        "nodeType": "VariableDeclaration",
        "messageId": "generic",
        "endLine": 73,
        "endColumn": 28,
        "suppressions": [
          {
            "kind": "directive",
            "justification": "intentional mutable state in closure for state management"
          }
        ]
      }
    ],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "functional/prefer-readonly-type",
        "replacedBy": [
          "functional/prefer-immutable-types",
          "functional/type-declaration-immutability"
        ]
      }
    ]
  },
  {
    "filePath": "/home/david/Security-kit/test-security-fixes.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/david/Security-kit/tsup.config.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/david/Security-kit/vitest.config.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/david/Security-kit/vitest.min.config.mjs",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  }
]
