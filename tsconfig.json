{
  // === STRICTER TYPESCRIPT CONFIGURATION FOR A DISTRIBUTABLE LIBRARY ===
  // This config is designed to produce clean, correct, and type-safe
  // declaration files (.d.ts) for consumers of the npm package.
  "compilerOptions": {
    // === EMIT (OUTPUT) CONFIGURATION ===
    "declaration": true,
    "declarationMap": true,
    "sourceMap": true,
    "outDir": "./dist",
    "removeComments": false,

    // === PROJECT STRUCTURE & MODULES (HYBRID DENO/NODE SETUP) ===
    "target": "ES2023",
    "module": "ESNext", 
    "moduleResolution": "bundler",
    "lib": ["ES2023", "DOM", "DOM.Iterable"],
    "esModuleInterop": true,
    "forceConsistentCasingInFileNames": true,
    "isolatedModules": true,
    "resolveJsonModule": true,
    "moduleDetection": "force",
    // STRICTER: Use verbatimModuleSyntax. This is the modern, stricter replacement for several older flags
    // like `importsNotUsedAsValues` and `preserveValueImports`. It makes module emit predictable:
    // what you write is what you get. It forces you to be explicit with `import type`.
    "verbatimModuleSyntax": true,

    // === TYPE CHECKING - THE STRICTEST POSSIBLE (PRESERVED & ENHANCED) ===
    "strict": true,
    "noImplicitAny": true,
    "noImplicitThis": true,
    "alwaysStrict": true,
    "strictNullChecks": true,
    "strictFunctionTypes": true,
    "strictBindCallApply": true,
    "strictPropertyInitialization": true,
    "useUnknownInCatchVariables": true,
    "exactOptionalPropertyTypes": true,
    "noImplicitReturns": true,
    "noImplicitOverride": true,
    "noFallthroughCasesInSwitch": true,
    "noUncheckedIndexedAccess": true,
    "noPropertyAccessFromIndexSignature": true,
    "allowUnreachableCode": false, // Your original setting was good, keeping it explicit.
    "allowUnusedLabels": false, // Your original setting was good, keeping it explicit.
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    // STRICTER: This is a new strictness flag in TS 5.6. It ensures that built-in iterators
    // like those for Map or Set have a more correct return type (`undefined` instead of `any`).
    "strictBuiltinIteratorReturn": true,

    // === LIBRARY-SPECIFIC CONFIGURATION ===
    "skipLibCheck": false,
    "incremental": false,

    // === ERROR REPORTING ===
    "noErrorTruncation": true,
    "pretty": true,

    // === STRICTER EMIT & INTEROP RULES ===
    // STRICTER: Disallow `import d from "cjs-module"` when there is no default export.
    // `esModuleInterop` shims this, but setting this to false forces more correct import patterns.
    // NOTE: This can be disruptive if you rely on CJS modules. Given you have zero dependencies,
    // this is a safe and strict setting to adopt. If you add a CJS dependency later, you might
    // need to revisit this or use `import * as d from "..."`.
    "allowSyntheticDefaultImports": false,

    // === STRICTER LANGUAGE & ENVIRONMENT RULES ===
    // STRICTER: This ensures class fields follow the modern ECMAScript standard for initialization,
    // which is more predictable than the legacy TypeScript behavior.
    "useDefineForClassFields": true,

    // === STRICTER PROJECT SETUP ===
    // STRICTER: By setting `noEmitOnError` to true, the build will fail completely if there are any
    // TypeScript errors. This prevents you from accidentally publishing a broken or partially-compiled
    // version of your library. It's a critical safety net.
    "noEmitOnError": false, // Allow tsup to handle build process for hybrid Deno/Node setup
    
    // === DENO HYBRID COMPATIBILITY ===
    // Allow explicit .ts extension imports (needed for Deno compatibility)
    "allowImportingTsExtensions": true,
    // Must disable emit when using allowImportingTsExtensions (tsup handles the build)
    "noEmit": true
  },
  "include": [
    "src/**/*",
    "server/**/*",
    "src/globals.d.ts",
    "tests/security/ensureFingerprintSalt.adversarial.spec.ts"
  ],
  "exclude": [
    "node_modules",
    "dist",
    "tests",
    "vitest.config.ts"
    // Note: fuzz-harness.ts now properly located in tests/fuzz/ (excluded via "tests" above)
  ]
}
