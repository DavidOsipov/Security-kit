↑ Jump to Table of Contents <#toc>← Collapse Sidebar <#toc>[theme toggle
icon] light dark auto

W3C <https://www.w3.org/>


  Trusted Types

W3C Working Draft <https://www.w3.org/standards/types/#WD>, 3 July 2025

More details about this document

This version:
    https://www.w3.org/TR/2025/WD-trusted-types-20250703/ <https://
    www.w3.org/TR/2025/WD-trusted-types-20250703/> 
Latest published version:
    https://www.w3.org/TR/trusted-types/ <https://www.w3.org/TR/trusted-
    types/> 
Editor's Draft:
    https://w3c.github.io/trusted-types/dist/spec/ <https://
    w3c.github.io/trusted-types/dist/spec/> 
Previous Versions:
    https://www.w3.org/TR/2025/WD-trusted-types-20250626/ <https://
    www.w3.org/TR/2025/WD-trusted-types-20250626/> 
History:
    https://www.w3.org/standards/history/trusted-types/ <https://
    www.w3.org/standards/history/trusted-types/> 
Feedback:
    public-webappsec@w3.org <mailto:public-webappsec@w3.org?
    subject=%5Btrusted-types%5D%20YOUR%20TOPIC%20HERE> with subject line
    “[trusted-types] /… message topic …/” (archives <https://
    lists.w3.org/Archives/Public/public-webappsec/>) 
    GitHub <https://github.com/w3c/trusted-types/issues/> 
    Inline In Spec <#issues-index> 
Editor:
    Krzysztof Kotowicz <mailto:koto@google.com> (Google LLC <https://
    google.com/>) 
Former Editor:
    Mike West <mailto:mkwst@google.com> (Google LLC <https://google.com/>) 
Test Suite:
    https://wpt.fyi/results/trusted-types/ <https://wpt.fyi/results/
    trusted-types/>

      * Chrome 139
        2016/2363
      * Firefox 142
        54/608
      * Safari 18
        52/592
      * Edge 138
        2113/2366

Copyright <https://www.w3.org/policies/#copyright> © 2025 World Wide Web
Consortium <https://www.w3.org/>. W3C^® liability <https://www.w3.org/
policies/#Legal_Disclaimer>, trademark <https://www.w3.org/policies/
#W3C_Trademarks> and permissive document license <https://www.w3.org/
copyright/software-license/> rules apply.

------------------------------------------------------------------------


    Abstract

An API that allows applications to lock down powerful APIs to only
accept non-spoofable, typed values in place of strings to prevent
vulnerabilities caused by using these APIs with attacker-controlled inputs.


    Status of this document

/This section describes the status of this document at the time of its
publication. A list of current W3C publications and the latest revision
of this technical report can be found in the W3C technical reports
index. <https://www.w3.org/TR/>/

This document was published by the Web Application Security Working
Group <https://www.w3.org/groups/wg/webappsec> as a Working Draft using
the Recommendation track <https://www.w3.org/policies/process/20231103/
#recs-and-notes>. This document is intended to become a W3C Recommendation.

The (archived <https://lists.w3.org/Archives/Public/public-webappsec/>)
public mailing list public-webappsec@w3.org <mailto:public-
webappsec@w3.org?Subject=%5Btrusted-types%5D%20PUT%20SUBJECT%20HERE>
(see instructions <https://www.w3.org/Mail/Request>) is preferred for
discussion of this specification. When sending e-mail, please put the
text “trusted-types” in the subject, preferably like this: “[trusted-
types] /…summary of comment…/”

Publication as a Working Draft does not imply endorsement by W3C and its
Members. This is a draft document and may be updated, replaced, or
obsoleted by other documents at any time. It is inappropriate to cite
this document as other than a work in progress.

This document was produced by the Web Application Security Working Group
<https://www.w3.org/groups/wg/webappsec>.

This document was produced by a group operating under the W3C Patent
Policy <https://www.w3.org/policies/patent-policy/>. W3C maintains a
public list of any patent disclosures <https://www.w3.org/groups/wg/
webappsec/ipr> made in connection with the deliverables of the group;
that page also includes instructions for disclosing a patent. An
individual who has actual knowledge of a patent that the individual
believes contains Essential Claim(s) <https://www.w3.org/policies/
patent-policy/#def-essential> must disclose the information in
accordance with section 6 of the W3C Patent Policy <https://www.w3.org/
policies/patent-policy/#sec-Disclosure>.

This document is governed by the 03 November 2023 W3C Process Document
<https://www.w3.org/policies/process/20231103/>.


    Table of Contents

 1. 1 Introduction <#introduction>
     1. 1.1 Goals <#goals>
     2. 1.2 Non-goals <#non-goals>
     3. 1.3 Use cases <#use-cases> 
 2. 2 Framework <#framework>
     1. 2.1 Injection sinks <#injection-sinks>
         1. 2.1.1 DOM XSS injection sinks <#dom-xss-injection-sinks> 
     2. 2.2 Trusted Types <#trusted-types>
         1. 2.2.1 |TrustedHTML| <#trusted-html>
         2. 2.2.2 |TrustedScript| <#trusted-script>
         3. 2.2.3 |TrustedScriptURL| <#trused-script-url> 
     3. 2.3 Policies <#policies-hdr>
         1. 2.3.1 |TrustedTypePolicyFactory| <#trusted-type-policy-factory>
         2. 2.3.2 |TrustedTypePolicy| <#trusted-type-policy>
         3. 2.3.3 |TrustedTypePolicyOptions| <#trusted-type-policy-options>
         4. 2.3.4 Default policy <#default-policy-hdr> 
     4. 2.4 Enforcement <#enforcement-hdr>
         1. 2.4.1 Content Security Policy <#content-security-policy-hdr> 
 3. 3 Algorithms <#algorithms>
     1. 3.1 Create a Trusted Type Policy <#create-trusted-type-policy-
        algorithm>
     2. 3.2 Create a Trusted Type <#create-a-trusted-type-algorithm>
     3. 3.3 Get Trusted Type policy value <#get-trusted-type-policy-
        value-algorithm>
     4. 3.4 Get Trusted Type compliant string <#get-trusted-type-
        compliant-string-algorithm>
     5. 3.5 Process value with a default policy <#process-value-with-a-
        default-policy-algorithm>
     6. 3.6 Prepare the script text <#prepare-script-text>
     7. 3.7 Get Trusted Types-compliant attribute value <#validate-
        attribute-mutation>
     8. 3.8 Get Trusted Type data for attribute <#get-trusted-type-data-
        for-attribute> 
 4. 4 Integrations <#integrations>
     1. 4.1 Integration with HTML <#integration-with-html>
         1. 4.1.1 Extensions to the WindowOrWorkerGlobalScope interface
            <#extensions-to-the-windoworworkerglobalscope-interface>
         2. 4.1.2 Enforcement for scripts <#enforcement-in-scripts>
             1. 4.1.2.1 Slots with trusted values <#slots-with-trusted-
                values>
             2. 4.1.2.2 The |innerText| IDL attribute <#the-innerText-
                idl-attribute>
             3. 4.1.2.3 The |textContent| IDL attribute <#the-
                textContent-idl-attribute>
             4. 4.1.2.4 The |text| IDL attribute <#the-text-idl-attribute>
             5. 4.1.2.5 The |src| IDL attribute <#the-src-idl-attribute>
             6. 4.1.2.6 Setting slot values from parser <#setting-slot-
                values-from-parser>
             7. 4.1.2.7 Slot value verification <#slot-value-verification> 
     2. 4.2 Integration with DOM <#integration-with-dom>
     3. 4.3 Integration with Content Security Policy <#integration-with-
        content-security-policy>
         1. 4.3.1 require-trusted-types-for directive <#require-trusted-
            types-for-csp-directive>
             1. 4.3.1.1 |require-trusted-types-for| Pre-Navigation check
                <#require-trusted-types-for-pre-navigation-check> 
         2. 4.3.2 trusted-types directive <#trusted-types-csp-directive>
         3. 4.3.3 Does sink type require trusted types? <#does-sink-
            require-trusted-types>
         4. 4.3.4 Should sink type mismatch violation be blocked by
            Content Security Policy? <#should-block-sink-type-mismatch>
         5. 4.3.5 Should Trusted Type policy creation be blocked by
            Content Security Policy? <#should-block-create-policy> 
 5. 5 Security Considerations <#security-considerations>
     1. 5.1 Cross-document vectors <#cross-document-vectors>
     2. 5.2 Deprecated features <#deprecated-features>
     3. 5.3 Script gadgets <#script-gadgets>
     4. 5.4 Best practices for policy design <#best-practices-for-
        policy-design> 
 6. 6 Privacy Considerations <#privacy-considerations>
 7. 7 Implementation Considerations <#implementation-considerations>
     1. 7.1 Vendor-specific Extensions and Addons <#vendor-specific-
        extensions-and-addons> 
 8. Conformance <#w3c-conformance>
     1. Document conventions <#w3c-conventions>
     2. Conformant Algorithms <#w3c-conformant-algorithms> 
 9. Index <#index>
     1. Terms defined by this specification <#index-defined-here>
     2. Terms defined by reference <#index-defined-elsewhere> 
10. References <#references>
     1. Normative References <#normative>
     2. Informative References <#informative> 
11. Issues Index <#issues-index> 

Tests

  * DOMParser-parseFromString-regression.html <https://wpt.fyi/results/
    trusted-types/DOMParser-parseFromString-regression.html>(live test)
    <http://wpt.live/trusted-types/DOMParser-parseFromString-
    regression.html> (source) <https://github.com/web-platform-tests/
    wpt/blob/master/trusted-types/DOMParser-parseFromString-
    regression.html>
  * DOMParser-parseFromString.html(2 tests) <https://wpt.fyi/results/
    trusted-types/DOMParser-parseFromString.html>(live test) <http://
    wpt.live/trusted-types/DOMParser-parseFromString.html> (source)
    <https://github.com/web-platform-tests/wpt/blob/master/trusted-
    types/DOMParser-parseFromString.html>
  * DedicatedWorker-block-eval-function-constructor.html(6 tests)
    <https://wpt.fyi/results/trusted-types/DedicatedWorker-block-eval-
    function-constructor.html>(live test) <http://wpt.live/trusted-
    types/DedicatedWorker-block-eval-function-constructor.html> (source)
    <https://github.com/web-platform-tests/wpt/blob/master/trusted-
    types/DedicatedWorker-block-eval-function-constructor.html>
  * DedicatedWorker-constructor-from-DedicatedWorker.html(3 tests)
    <https://wpt.fyi/results/trusted-types/DedicatedWorker-constructor-
    from-DedicatedWorker.html>(live test) <http://wpt.live/trusted-
    types/DedicatedWorker-constructor-from-DedicatedWorker.html>
    (source) <https://github.com/web-platform-tests/wpt/blob/master/
    trusted-types/DedicatedWorker-constructor-from-DedicatedWorker.html>
  * DedicatedWorker-constructor-from-SharedWorker.html(3 tests)
    <https://wpt.fyi/results/trusted-types/DedicatedWorker-constructor-
    from-SharedWorker.html>(live test) <http://wpt.live/trusted-types/
    DedicatedWorker-constructor-from-SharedWorker.html> (source)
    <https://github.com/web-platform-tests/wpt/blob/master/trusted-
    types/DedicatedWorker-constructor-from-SharedWorker.html>
  * DedicatedWorker-constructor.https.html(3 tests) <https://wpt.fyi/
    results/trusted-types/DedicatedWorker-constructor.https.html>(live
    test) <https://wpt.live/trusted-types/DedicatedWorker-
    constructor.https.html> (source) <https://github.com/web-platform-
    tests/wpt/blob/master/trusted-types/DedicatedWorker-
    constructor.https.html>
  * DedicatedWorker-eval.html(8 tests) <https://wpt.fyi/results/trusted-
    types/DedicatedWorker-eval.html>(live test) <http://wpt.live/
    trusted-types/DedicatedWorker-eval.html> (source) <https://
    github.com/web-platform-tests/wpt/blob/master/trusted-types/
    DedicatedWorker-eval.html>
  * DedicatedWorker-importScripts.html(8 tests) <https://wpt.fyi/
    results/trusted-types/DedicatedWorker-importScripts.html>(live test)
    <http://wpt.live/trusted-types/DedicatedWorker-importScripts.html>
    (source) <https://github.com/web-platform-tests/wpt/blob/master/
    trusted-types/DedicatedWorker-importScripts.html>
  * DedicatedWorker-setTimeout-setInterval.html(6 tests) <https://
    wpt.fyi/results/trusted-types/DedicatedWorker-setTimeout-
    setInterval.html>(live test) <http://wpt.live/trusted-types/
    DedicatedWorker-setTimeout-setInterval.html> (source) <https://
    github.com/web-platform-tests/wpt/blob/master/trusted-types/
    DedicatedWorker-setTimeout-setInterval.html>
  * Document-execCommand.html(2 tests) <https://wpt.fyi/results/trusted-
    types/Document-execCommand.html>(live test) <http://wpt.live/
    trusted-types/Document-execCommand.html> (source) <https://
    github.com/web-platform-tests/wpt/blob/master/trusted-types/
    Document-execCommand.html>
  * Document-write-appending-line-feed.html(6 tests) <https://wpt.fyi/
    results/trusted-types/Document-write-appending-line-feed.html>(live
    test) <http://wpt.live/trusted-types/Document-write-appending-line-
    feed.html> (source) <https://github.com/web-platform-tests/wpt/blob/
    master/trusted-types/Document-write-appending-line-feed.html>
  * Document-write-exception-order.xhtml(3 tests) <https://wpt.fyi/
    results/trusted-types/Document-write-exception-order.xhtml>(live
    test) <http://wpt.live/trusted-types/Document-write-exception-
    order.xhtml> (source) <https://github.com/web-platform-tests/wpt/
    blob/master/trusted-types/Document-write-exception-order.xhtml>
  * Document-write.html(8 tests) <https://wpt.fyi/results/trusted-types/
    Document-write.html>(live test) <http://wpt.live/trusted-types/
    Document-write.html> (source) <https://github.com/web-platform-
    tests/wpt/blob/master/trusted-types/Document-write.html>
  * Element-insertAdjacentHTML.html <https://wpt.fyi/results/trusted-
    types/Element-insertAdjacentHTML.html>(live test) <http://wpt.live/
    trusted-types/Element-insertAdjacentHTML.html> (source) <https://
    github.com/web-platform-tests/wpt/blob/master/trusted-types/Element-
    insertAdjacentHTML.html>
  * Element-outerHTML.html <https://wpt.fyi/results/trusted-types/
    Element-outerHTML.html>(live test) <http://wpt.live/trusted-types/
    Element-outerHTML.html> (source) <https://github.com/web-platform-
    tests/wpt/blob/master/trusted-types/Element-outerHTML.html>
  * Element-setAttribute-respects-Elements-node-documents-globals-CSP-
    after-adoption-from-TT-realm.html(4 tests) <https://wpt.fyi/results/
    trusted-types/Element-setAttribute-respects-Elements-node-documents-
    globals-CSP-after-adoption-from-TT-realm.html>(live test) <http://
    wpt.live/trusted-types/Element-setAttribute-respects-Elements-node-
    documents-globals-CSP-after-adoption-from-TT-realm.html> (source)
    <https://github.com/web-platform-tests/wpt/blob/master/trusted-
    types/Element-setAttribute-respects-Elements-node-documents-globals-
    CSP-after-adoption-from-TT-realm.html>
  * Element-setAttribute-respects-Elements-node-documents-globals-CSP-
    after-adoption-from-non-TT-realm.html(4 tests) <https://wpt.fyi/
    results/trusted-types/Element-setAttribute-respects-Elements-node-
    documents-globals-CSP-after-adoption-from-non-TT-realm.html>(live
    test) <http://wpt.live/trusted-types/Element-setAttribute-respects-
    Elements-node-documents-globals-CSP-after-adoption-from-non-TT-
    realm.html> (source) <https://github.com/web-platform-tests/wpt/
    blob/master/trusted-types/Element-setAttribute-respects-Elements-
    node-documents-globals-CSP-after-adoption-from-non-TT-realm.html>
  * Element-setAttribute.html(5 tests) <https://wpt.fyi/results/trusted-
    types/Element-setAttribute.html>(live test) <http://wpt.live/
    trusted-types/Element-setAttribute.html> (source) <https://
    github.com/web-platform-tests/wpt/blob/master/trusted-types/Element-
    setAttribute.html>
  * Element-setAttributeNS.html(4 tests) <https://wpt.fyi/results/
    trusted-types/Element-setAttributeNS.html>(live test) <http://
    wpt.live/trusted-types/Element-setAttributeNS.html> (source)
    <https://github.com/web-platform-tests/wpt/blob/master/trusted-
    types/Element-setAttributeNS.html>
  * Element-toggleAttribute.html(2 tests) <https://wpt.fyi/results/
    trusted-types/Element-toggleAttribute.html>(live test) <http://
    wpt.live/trusted-types/Element-toggleAttribute.html> (source)
    <https://github.com/web-platform-tests/wpt/blob/master/trusted-
    types/Element-toggleAttribute.html>
  * GlobalEventHandlers-onclick.html(3 tests) <https://wpt.fyi/results/
    trusted-types/GlobalEventHandlers-onclick.html>(live test) <http://
    wpt.live/trusted-types/GlobalEventHandlers-onclick.html> (source)
    <https://github.com/web-platform-tests/wpt/blob/master/trusted-
    types/GlobalEventHandlers-onclick.html>
  * HTMLElement-generic.html(72 tests) <https://wpt.fyi/results/trusted-
    types/HTMLElement-generic.html>(live test) <http://wpt.live/trusted-
    types/HTMLElement-generic.html> (source) <https://github.com/web-
    platform-tests/wpt/blob/master/trusted-types/HTMLElement-generic.html>
  * HTMLScriptElement-in-xhtml-document.tentative.https.xhtml <https://
    wpt.fyi/results/trusted-types/HTMLScriptElement-in-xhtml-
    document.tentative.https.xhtml>(live test) <https://wpt.live/
    trusted-types/HTMLScriptElement-in-xhtml-
    document.tentative.https.xhtml> (source) <https://github.com/web-
    platform-tests/wpt/blob/master/trusted-types/HTMLScriptElement-in-
    xhtml-document.tentative.https.xhtml>
  * HTMLScriptElement-internal-slot.html(9 tests) <https://wpt.fyi/
    results/trusted-types/HTMLScriptElement-internal-slot.html>(live
    test) <http://wpt.live/trusted-types/HTMLScriptElement-internal-
    slot.html> (source) <https://github.com/web-platform-tests/wpt/blob/
    master/trusted-types/HTMLScriptElement-internal-slot.html>
  * Node-multiple-arguments-tt-enforced.html(90 tests) <https://wpt.fyi/
    results/trusted-types/Node-multiple-arguments-tt-enforced.html>(live
    test) <http://wpt.live/trusted-types/Node-multiple-arguments-tt-
    enforced.html> (source) <https://github.com/web-platform-tests/wpt/
    blob/master/trusted-types/Node-multiple-arguments-tt-enforced.html>
  * Node-multiple-arguments.html(90 tests) <https://wpt.fyi/results/
    trusted-types/Node-multiple-arguments.html>(live test) <http://
    wpt.live/trusted-types/Node-multiple-arguments.html> (source)
    <https://github.com/web-platform-tests/wpt/blob/master/trusted-
    types/Node-multiple-arguments.html>
  * Range-createContextualFragment.html <https://wpt.fyi/results/
    trusted-types/Range-createContextualFragment.html>(live test)
    <http://wpt.live/trusted-types/Range-createContextualFragment.html>
    (source) <https://github.com/web-platform-tests/wpt/blob/master/
    trusted-types/Range-createContextualFragment.html>
  * SVGScriptElement-internal-slot.html <https://wpt.fyi/results/
    trusted-types/SVGScriptElement-internal-slot.html>(live test)
    <http://wpt.live/trusted-types/SVGScriptElement-internal-slot.html>
    (source) <https://github.com/web-platform-tests/wpt/blob/master/
    trusted-types/SVGScriptElement-internal-slot.html>
  * ServiceWorker-block-eval-function-constructor.https.html(6 tests)
    <https://wpt.fyi/results/trusted-types/ServiceWorker-block-eval-
    function-constructor.https.html>(live test) <https://wpt.live/
    trusted-types/ServiceWorker-block-eval-function-
    constructor.https.html> (source) <https://github.com/web-platform-
    tests/wpt/blob/master/trusted-types/ServiceWorker-block-eval-
    function-constructor.https.html>
  * ServiceWorker-eval.https.html(8 tests) <https://wpt.fyi/results/
    trusted-types/ServiceWorker-eval.https.html>(live test) <https://
    wpt.live/trusted-types/ServiceWorker-eval.https.html> (source)
    <https://github.com/web-platform-tests/wpt/blob/master/trusted-
    types/ServiceWorker-eval.https.html>
  * ServiceWorker-importScripts.https.html(8 tests) <https://wpt.fyi/
    results/trusted-types/ServiceWorker-importScripts.https.html>(live
    test) <https://wpt.live/trusted-types/ServiceWorker-
    importScripts.https.html> (source) <https://github.com/web-platform-
    tests/wpt/blob/master/trusted-types/ServiceWorker-
    importScripts.https.html>
  * ServiceWorkerContainer-register-from-DedicatedWorker.https.html
    <https://wpt.fyi/results/trusted-types/ServiceWorkerContainer-
    register-from-DedicatedWorker.https.html>(live test) <https://
    wpt.live/trusted-types/ServiceWorkerContainer-register-from-
    DedicatedWorker.https.html> (source) <https://github.com/web-
    platform-tests/wpt/blob/master/trusted-types/ServiceWorkerContainer-
    register-from-DedicatedWorker.https.html>
  * ServiceWorkerContainer-register-from-ServiceWorker.https.html
    <https://wpt.fyi/results/trusted-types/ServiceWorkerContainer-
    register-from-ServiceWorker.https.html>(live test) <https://
    wpt.live/trusted-types/ServiceWorkerContainer-register-from-
    ServiceWorker.https.html> (source) <https://github.com/web-platform-
    tests/wpt/blob/master/trusted-types/ServiceWorkerContainer-register-
    from-ServiceWorker.https.html>
  * ServiceWorkerContainer-register-from-SharedWorker.https.html
    <https://wpt.fyi/results/trusted-types/ServiceWorkerContainer-
    register-from-SharedWorker.https.html>(live test) <https://wpt.live/
    trusted-types/ServiceWorkerContainer-register-from-
    SharedWorker.https.html> (source) <https://github.com/web-platform-
    tests/wpt/blob/master/trusted-types/ServiceWorkerContainer-register-
    from-SharedWorker.https.html>
  * ServiceWorkerContainer-register.https.html(3 tests) <https://
    wpt.fyi/results/trusted-types/ServiceWorkerContainer-
    register.https.html>(live test) <https://wpt.live/trusted-types/
    ServiceWorkerContainer-register.https.html> (source) <https://
    github.com/web-platform-tests/wpt/blob/master/trusted-types/
    ServiceWorkerContainer-register.https.html>
  * SharedWorker-block-eval-function-constructor.html(6 tests) <https://
    wpt.fyi/results/trusted-types/SharedWorker-block-eval-function-
    constructor.html>(live test) <http://wpt.live/trusted-types/
    SharedWorker-block-eval-function-constructor.html> (source)
    <https://github.com/web-platform-tests/wpt/blob/master/trusted-
    types/SharedWorker-block-eval-function-constructor.html>
  * SharedWorker-constructor.https.html(3 tests) <https://wpt.fyi/
    results/trusted-types/SharedWorker-constructor.https.html>(live
    test) <https://wpt.live/trusted-types/SharedWorker-
    constructor.https.html> (source) <https://github.com/web-platform-
    tests/wpt/blob/master/trusted-types/SharedWorker-
    constructor.https.html>
  * SharedWorker-eval.html(8 tests) <https://wpt.fyi/results/trusted-
    types/SharedWorker-eval.html>(live test) <http://wpt.live/trusted-
    types/SharedWorker-eval.html> (source) <https://github.com/web-
    platform-tests/wpt/blob/master/trusted-types/SharedWorker-eval.html>
  * SharedWorker-importScripts.html(8 tests) <https://wpt.fyi/results/
    trusted-types/SharedWorker-importScripts.html>(live test) <http://
    wpt.live/trusted-types/SharedWorker-importScripts.html> (source)
    <https://github.com/web-platform-tests/wpt/blob/master/trusted-
    types/SharedWorker-importScripts.html>
  * SharedWorker-setTimeout-setInterval.html(6 tests) <https://wpt.fyi/
    results/trusted-types/SharedWorker-setTimeout-setInterval.html>(live
    test) <http://wpt.live/trusted-types/SharedWorker-setTimeout-
    setInterval.html> (source) <https://github.com/web-platform-tests/
    wpt/blob/master/trusted-types/SharedWorker-setTimeout-setInterval.html>
  * TrustedType-AttributeNodes.html(33 tests) <https://wpt.fyi/results/
    trusted-types/TrustedType-AttributeNodes.html>(live test) <http://
    wpt.live/trusted-types/TrustedType-AttributeNodes.html> (source)
    <https://github.com/web-platform-tests/wpt/blob/master/trusted-
    types/TrustedType-AttributeNodes.html>
  * TrustedTypePolicy-CSP-no-name.html <https://wpt.fyi/results/trusted-
    types/TrustedTypePolicy-CSP-no-name.html>(live test) <http://
    wpt.live/trusted-types/TrustedTypePolicy-CSP-no-name.html> (source)
    <https://github.com/web-platform-tests/wpt/blob/master/trusted-
    types/TrustedTypePolicy-CSP-no-name.html>
  * TrustedTypePolicy-CSP-wildcard.html <https://wpt.fyi/results/
    trusted-types/TrustedTypePolicy-CSP-wildcard.html>(live test)
    <http://wpt.live/trusted-types/TrustedTypePolicy-CSP-wildcard.html>
    (source) <https://github.com/web-platform-tests/wpt/blob/master/
    trusted-types/TrustedTypePolicy-CSP-wildcard.html>
  * TrustedTypePolicy-createXXX.html(29 tests) <https://wpt.fyi/results/
    trusted-types/TrustedTypePolicy-createXXX.html>(live test) <http://
    wpt.live/trusted-types/TrustedTypePolicy-createXXX.html> (source)
    <https://github.com/web-platform-tests/wpt/blob/master/trusted-
    types/TrustedTypePolicy-createXXX.html>
  * TrustedTypePolicyFactory-constants.html(6 tests) <https://wpt.fyi/
    results/trusted-types/TrustedTypePolicyFactory-constants.html>(live
    test) <http://wpt.live/trusted-types/TrustedTypePolicyFactory-
    constants.html> (source) <https://github.com/web-platform-tests/wpt/
    blob/master/trusted-types/TrustedTypePolicyFactory-constants.html>
  * TrustedTypePolicyFactory-createPolicy-createXYZTests.html(28 tests)
    <https://wpt.fyi/results/trusted-types/TrustedTypePolicyFactory-
    createPolicy-createXYZTests.html>(live test) <http://wpt.live/
    trusted-types/TrustedTypePolicyFactory-createPolicy-
    createXYZTests.html> (source) <https://github.com/web-platform-
    tests/wpt/blob/master/trusted-types/TrustedTypePolicyFactory-
    createPolicy-createXYZTests.html>
  * TrustedTypePolicyFactory-createPolicy-cspTests-noNamesGiven.html
    <https://wpt.fyi/results/trusted-types/TrustedTypePolicyFactory-
    createPolicy-cspTests-noNamesGiven.html>(live test) <http://
    wpt.live/trusted-types/TrustedTypePolicyFactory-createPolicy-
    cspTests-noNamesGiven.html> (source) <https://github.com/web-
    platform-tests/wpt/blob/master/trusted-types/
    TrustedTypePolicyFactory-createPolicy-cspTests-noNamesGiven.html>
  * TrustedTypePolicyFactory-createPolicy-cspTests-none-none-name.html(2
    tests) <https://wpt.fyi/results/trusted-types/
    TrustedTypePolicyFactory-createPolicy-cspTests-none-none-
    name.html>(live test) <http://wpt.live/trusted-types/
    TrustedTypePolicyFactory-createPolicy-cspTests-none-none-name.html>
    (source) <https://github.com/web-platform-tests/wpt/blob/master/
    trusted-types/TrustedTypePolicyFactory-createPolicy-cspTests-none-
    none-name.html>
  * TrustedTypePolicyFactory-createPolicy-cspTests-none-none.html(2
    tests) <https://wpt.fyi/results/trusted-types/
    TrustedTypePolicyFactory-createPolicy-cspTests-none-none.html>(live
    test) <http://wpt.live/trusted-types/TrustedTypePolicyFactory-
    createPolicy-cspTests-none-none.html> (source) <https://github.com/
    web-platform-tests/wpt/blob/master/trusted-types/
    TrustedTypePolicyFactory-createPolicy-cspTests-none-none.html>
  * TrustedTypePolicyFactory-createPolicy-cspTests-none-skip.html(3
    tests) <https://wpt.fyi/results/trusted-types/
    TrustedTypePolicyFactory-createPolicy-cspTests-none-skip.html>(live
    test) <http://wpt.live/trusted-types/TrustedTypePolicyFactory-
    createPolicy-cspTests-none-skip.html> (source) <https://github.com/
    web-platform-tests/wpt/blob/master/trusted-types/
    TrustedTypePolicyFactory-createPolicy-cspTests-none-skip.html>
  * TrustedTypePolicyFactory-createPolicy-cspTests-none.html(2 tests)
    <https://wpt.fyi/results/trusted-types/TrustedTypePolicyFactory-
    createPolicy-cspTests-none.html>(live test) <http://wpt.live/
    trusted-types/TrustedTypePolicyFactory-createPolicy-cspTests-
    none.html> (source) <https://github.com/web-platform-tests/wpt/blob/
    master/trusted-types/TrustedTypePolicyFactory-createPolicy-cspTests-
    none.html>
  * TrustedTypePolicyFactory-createPolicy-cspTests-wildcard.html
    <https://wpt.fyi/results/trusted-types/TrustedTypePolicyFactory-
    createPolicy-cspTests-wildcard.html>(live test) <http://wpt.live/
    trusted-types/TrustedTypePolicyFactory-createPolicy-cspTests-
    wildcard.html> (source) <https://github.com/web-platform-tests/wpt/
    blob/master/trusted-types/TrustedTypePolicyFactory-createPolicy-
    cspTests-wildcard.html>
  * TrustedTypePolicyFactory-createPolicy-cspTests.html(4 tests)
    <https://wpt.fyi/results/trusted-types/TrustedTypePolicyFactory-
    createPolicy-cspTests.html>(live test) <http://wpt.live/trusted-
    types/TrustedTypePolicyFactory-createPolicy-cspTests.html> (source)
    <https://github.com/web-platform-tests/wpt/blob/master/trusted-
    types/TrustedTypePolicyFactory-createPolicy-cspTests.html>
  * TrustedTypePolicyFactory-createPolicy-non-tt-policy-name.html(5
    tests) <https://wpt.fyi/results/trusted-types/
    TrustedTypePolicyFactory-createPolicy-non-tt-policy-name.html>(live
    test) <http://wpt.live/trusted-types/TrustedTypePolicyFactory-
    createPolicy-non-tt-policy-name.html> (source) <https://github.com/
    web-platform-tests/wpt/blob/master/trusted-types/
    TrustedTypePolicyFactory-createPolicy-non-tt-policy-name.html>
  * TrustedTypePolicyFactory-createPolicy-unenforced.html <https://
    wpt.fyi/results/trusted-types/TrustedTypePolicyFactory-createPolicy-
    unenforced.html>(live test) <http://wpt.live/trusted-types/
    TrustedTypePolicyFactory-createPolicy-unenforced.html> (source)
    <https://github.com/web-platform-tests/wpt/blob/master/trusted-
    types/TrustedTypePolicyFactory-createPolicy-unenforced.html>
  * TrustedTypePolicyFactory-defaultPolicy.html(3 tests) <https://
    wpt.fyi/results/trusted-types/TrustedTypePolicyFactory-
    defaultPolicy.html>(live test) <http://wpt.live/trusted-types/
    TrustedTypePolicyFactory-defaultPolicy.html> (source) <https://
    github.com/web-platform-tests/wpt/blob/master/trusted-types/
    TrustedTypePolicyFactory-defaultPolicy.html>
  * TrustedTypePolicyFactory-getAttributeType-namespace.html(21 tests)
    <https://wpt.fyi/results/trusted-types/TrustedTypePolicyFactory-
    getAttributeType-namespace.html>(live test) <http://wpt.live/
    trusted-types/TrustedTypePolicyFactory-getAttributeType-
    namespace.html> (source) <https://github.com/web-platform-tests/wpt/
    blob/master/trusted-types/TrustedTypePolicyFactory-getAttributeType-
    namespace.html>
  * TrustedTypePolicyFactory-getAttributeType-svg.html(4 tests)
    <https://wpt.fyi/results/trusted-types/TrustedTypePolicyFactory-
    getAttributeType-svg.html>(live test) <http://wpt.live/trusted-
    types/TrustedTypePolicyFactory-getAttributeType-svg.html> (source)
    <https://github.com/web-platform-tests/wpt/blob/master/trusted-
    types/TrustedTypePolicyFactory-getAttributeType-svg.html>
  * TrustedTypePolicyFactory-getAttributeType.html(23 tests) <https://
    wpt.fyi/results/trusted-types/TrustedTypePolicyFactory-
    getAttributeType.html>(live test) <http://wpt.live/trusted-types/
    TrustedTypePolicyFactory-getAttributeType.html> (source) <https://
    github.com/web-platform-tests/wpt/blob/master/trusted-types/
    TrustedTypePolicyFactory-getAttributeType.html>
  * TrustedTypePolicyFactory-isXXX.html(4 tests) <https://wpt.fyi/
    results/trusted-types/TrustedTypePolicyFactory-isXXX.html>(live
    test) <http://wpt.live/trusted-types/TrustedTypePolicyFactory-
    isXXX.html> (source) <https://github.com/web-platform-tests/wpt/
    blob/master/trusted-types/TrustedTypePolicyFactory-isXXX.html>
  * Window-TrustedTypes.html(2 tests) <https://wpt.fyi/results/trusted-
    types/Window-TrustedTypes.html>(live test) <http://wpt.live/trusted-
    types/Window-TrustedTypes.html> (source) <https://github.com/web-
    platform-tests/wpt/blob/master/trusted-types/Window-TrustedTypes.html>
  * Window-block-eval-function-constructor.html(6 tests) <https://
    wpt.fyi/results/trusted-types/Window-block-eval-function-
    constructor.html>(live test) <http://wpt.live/trusted-types/Window-
    block-eval-function-constructor.html> (source) <https://github.com/
    web-platform-tests/wpt/blob/master/trusted-types/Window-block-eval-
    function-constructor.html>
  * Window-setTimeout-setInterval.html(6 tests) <https://wpt.fyi/
    results/trusted-types/Window-setTimeout-setInterval.html>(live test)
    <http://wpt.live/trusted-types/Window-setTimeout-setInterval.html>
    (source) <https://github.com/web-platform-tests/wpt/blob/master/
    trusted-types/Window-setTimeout-setInterval.html>
  * block-Document-execCommand.html(6 tests) <https://wpt.fyi/results/
    trusted-types/block-Document-execCommand.html>(live test) <http://
    wpt.live/trusted-types/block-Document-execCommand.html> (source)
    <https://github.com/web-platform-tests/wpt/blob/master/trusted-
    types/block-Document-execCommand.html>
  * block-string-assignment-to-DOMParser-parseFromString.html(5 tests)
    <https://wpt.fyi/results/trusted-types/block-string-assignment-to-
    DOMParser-parseFromString.html>(live test) <http://wpt.live/trusted-
    types/block-string-assignment-to-DOMParser-parseFromString.html>
    (source) <https://github.com/web-platform-tests/wpt/blob/master/
    trusted-types/block-string-assignment-to-DOMParser-
    parseFromString.html>
  * block-string-assignment-to-DedicatedWorker-setTimeout-
    setInterval.html(9 tests) <https://wpt.fyi/results/trusted-types/
    block-string-assignment-to-DedicatedWorker-setTimeout-
    setInterval.html>(live test) <http://wpt.live/trusted-types/block-
    string-assignment-to-DedicatedWorker-setTimeout-setInterval.html>
    (source) <https://github.com/web-platform-tests/wpt/blob/master/
    trusted-types/block-string-assignment-to-DedicatedWorker-setTimeout-
    setInterval.html>
  * block-string-assignment-to-Document-parseHTMLUnsafe.html(5 tests)
    <https://wpt.fyi/results/trusted-types/block-string-assignment-to-
    Document-parseHTMLUnsafe.html>(live test) <http://wpt.live/trusted-
    types/block-string-assignment-to-Document-parseHTMLUnsafe.html>
    (source) <https://github.com/web-platform-tests/wpt/blob/master/
    trusted-types/block-string-assignment-to-Document-parseHTMLUnsafe.html>
  * block-string-assignment-to-Document-write.html(20 tests) <https://
    wpt.fyi/results/trusted-types/block-string-assignment-to-Document-
    write.html>(live test) <http://wpt.live/trusted-types/block-string-
    assignment-to-Document-write.html> (source) <https://github.com/web-
    platform-tests/wpt/blob/master/trusted-types/block-string-
    assignment-to-Document-write.html>
  * block-string-assignment-to-Element-insertAdjacentHTML.html(7 tests)
    <https://wpt.fyi/results/trusted-types/block-string-assignment-to-
    Element-insertAdjacentHTML.html>(live test) <http://wpt.live/
    trusted-types/block-string-assignment-to-Element-
    insertAdjacentHTML.html> (source) <https://github.com/web-platform-
    tests/wpt/blob/master/trusted-types/block-string-assignment-to-
    Element-insertAdjacentHTML.html>
  * block-string-assignment-to-Element-outerHTML.html(7 tests) <https://
    wpt.fyi/results/trusted-types/block-string-assignment-to-Element-
    outerHTML.html>(live test) <http://wpt.live/trusted-types/block-
    string-assignment-to-Element-outerHTML.html> (source) <https://
    github.com/web-platform-tests/wpt/blob/master/trusted-types/block-
    string-assignment-to-Element-outerHTML.html>
  * block-string-assignment-to-Element-setAttribute.html(14 tests)
    <https://wpt.fyi/results/trusted-types/block-string-assignment-to-
    Element-setAttribute.html>(live test) <http://wpt.live/trusted-
    types/block-string-assignment-to-Element-setAttribute.html> (source)
    <https://github.com/web-platform-tests/wpt/blob/master/trusted-
    types/block-string-assignment-to-Element-setAttribute.html>
  * block-string-assignment-to-Element-setAttributeNS.html(11 tests)
    <https://wpt.fyi/results/trusted-types/block-string-assignment-to-
    Element-setAttributeNS.html>(live test) <http://wpt.live/trusted-
    types/block-string-assignment-to-Element-setAttributeNS.html>
    (source) <https://github.com/web-platform-tests/wpt/blob/master/
    trusted-types/block-string-assignment-to-Element-setAttributeNS.html>
  * block-string-assignment-to-Element-setHTMLUnsafe.html(5 tests)
    <https://wpt.fyi/results/trusted-types/block-string-assignment-to-
    Element-setHTMLUnsafe.html>(live test) <http://wpt.live/trusted-
    types/block-string-assignment-to-Element-setHTMLUnsafe.html>
    (source) <https://github.com/web-platform-tests/wpt/blob/master/
    trusted-types/block-string-assignment-to-Element-setHTMLUnsafe.html>
  * block-string-assignment-to-HTMLElement-generic.html(9 tests)
    <https://wpt.fyi/results/trusted-types/block-string-assignment-to-
    HTMLElement-generic.html>(live test) <http://wpt.live/trusted-types/
    block-string-assignment-to-HTMLElement-generic.html> (source)
    <https://github.com/web-platform-tests/wpt/blob/master/trusted-
    types/block-string-assignment-to-HTMLElement-generic.html>
  * block-string-assignment-to-HTMLIFrameElement-srcdoc.html(5 tests)
    <https://wpt.fyi/results/trusted-types/block-string-assignment-to-
    HTMLIFrameElement-srcdoc.html>(live test) <http://wpt.live/trusted-
    types/block-string-assignment-to-HTMLIFrameElement-srcdoc.html>
    (source) <https://github.com/web-platform-tests/wpt/blob/master/
    trusted-types/block-string-assignment-to-HTMLIFrameElement-srcdoc.html>
  * block-string-assignment-to-Range-createContextualFragment.html(5
    tests) <https://wpt.fyi/results/trusted-types/block-string-
    assignment-to-Range-createContextualFragment.html>(live test)
    <http://wpt.live/trusted-types/block-string-assignment-to-Range-
    createContextualFragment.html> (source) <https://github.com/web-
    platform-tests/wpt/blob/master/trusted-types/block-string-
    assignment-to-Range-createContextualFragment.html>
  * block-string-assignment-to-ShadowRoot-innerHTML.html(5 tests)
    <https://wpt.fyi/results/trusted-types/block-string-assignment-to-
    ShadowRoot-innerHTML.html>(live test) <http://wpt.live/trusted-
    types/block-string-assignment-to-ShadowRoot-innerHTML.html> (source)
    <https://github.com/web-platform-tests/wpt/blob/master/trusted-
    types/block-string-assignment-to-ShadowRoot-innerHTML.html>
  * block-string-assignment-to-ShadowRoot-setHTMLUnsafe.html(5 tests)
    <https://wpt.fyi/results/trusted-types/block-string-assignment-to-
    ShadowRoot-setHTMLUnsafe.html>(live test) <http://wpt.live/trusted-
    types/block-string-assignment-to-ShadowRoot-setHTMLUnsafe.html>
    (source) <https://github.com/web-platform-tests/wpt/blob/master/
    trusted-types/block-string-assignment-to-ShadowRoot-setHTMLUnsafe.html>
  * block-string-assignment-to-SharedWorker-setTimeout-
    setInterval.html(9 tests) <https://wpt.fyi/results/trusted-types/
    block-string-assignment-to-SharedWorker-setTimeout-
    setInterval.html>(live test) <http://wpt.live/trusted-types/block-
    string-assignment-to-SharedWorker-setTimeout-setInterval.html>
    (source) <https://github.com/web-platform-tests/wpt/blob/master/
    trusted-types/block-string-assignment-to-SharedWorker-setTimeout-
    setInterval.html>
  * block-string-assignment-to-Window-setTimeout-setInterval.html(9
    tests) <https://wpt.fyi/results/trusted-types/block-string-
    assignment-to-Window-setTimeout-setInterval.html>(live test)
    <http://wpt.live/trusted-types/block-string-assignment-to-Window-
    setTimeout-setInterval.html> (source) <https://github.com/web-
    platform-tests/wpt/blob/master/trusted-types/block-string-
    assignment-to-Window-setTimeout-setInterval.html>
  * block-string-assignment-to-attribute-via-attribute-node.html(7
    tests) <https://wpt.fyi/results/trusted-types/block-string-
    assignment-to-attribute-via-attribute-node.html>(live test) <http://
    wpt.live/trusted-types/block-string-assignment-to-attribute-via-
    attribute-node.html> (source) <https://github.com/web-platform-
    tests/wpt/blob/master/trusted-types/block-string-assignment-to-
    attribute-via-attribute-node.html>
  * block-string-assignment-to-text-and-url-sinks.html(11 tests)
    <https://wpt.fyi/results/trusted-types/block-string-assignment-to-
    text-and-url-sinks.html>(live test) <http://wpt.live/trusted-types/
    block-string-assignment-to-text-and-url-sinks.html> (source)
    <https://github.com/web-platform-tests/wpt/blob/master/trusted-
    types/block-string-assignment-to-text-and-url-sinks.html>
  * block-text-node-insertion-into-script-element.html(10 tests)
    <https://wpt.fyi/results/trusted-types/block-text-node-insertion-
    into-script-element.html>(live test) <http://wpt.live/trusted-types/
    block-text-node-insertion-into-script-element.html> (source)
    <https://github.com/web-platform-tests/wpt/blob/master/trusted-
    types/block-text-node-insertion-into-script-element.html>
  * block-text-node-insertion-into-svg-script-element.html(9 tests)
    <https://wpt.fyi/results/trusted-types/block-text-node-insertion-
    into-svg-script-element.html>(live test) <http://wpt.live/trusted-
    types/block-text-node-insertion-into-svg-script-element.html>
    (source) <https://github.com/web-platform-tests/wpt/blob/master/
    trusted-types/block-text-node-insertion-into-svg-script-element.html>
  * csp-block-eval.html(2 tests) <https://wpt.fyi/results/trusted-types/
    csp-block-eval.html>(live test) <http://wpt.live/trusted-types/csp-
    block-eval.html> (source) <https://github.com/web-platform-tests/
    wpt/blob/master/trusted-types/csp-block-eval.html>
  * default-policy-callback-arguments.html(5 tests) <https://wpt.fyi/
    results/trusted-types/default-policy-callback-arguments.html>(live
    test) <http://wpt.live/trusted-types/default-policy-callback-
    arguments.html> (source) <https://github.com/web-platform-tests/wpt/
    blob/master/trusted-types/default-policy-callback-arguments.html>
  * default-policy-report-only.html(19 tests) <https://wpt.fyi/results/
    trusted-types/default-policy-report-only.html>(live test) <http://
    wpt.live/trusted-types/default-policy-report-only.html> (source)
    <https://github.com/web-platform-tests/wpt/blob/master/trusted-
    types/default-policy-report-only.html>
  * default-policy.html(19 tests) <https://wpt.fyi/results/trusted-
    types/default-policy.html>(live test) <http://wpt.live/trusted-
    types/default-policy.html> (source) <https://github.com/web-
    platform-tests/wpt/blob/master/trusted-types/default-policy.html>
  * empty-default-policy-report-only.html(4 tests) <https://wpt.fyi/
    results/trusted-types/empty-default-policy-report-only.html>(live
    test) <http://wpt.live/trusted-types/empty-default-policy-report-
    only.html> (source) <https://github.com/web-platform-tests/wpt/blob/
    master/trusted-types/empty-default-policy-report-only.html>
  * empty-default-policy.html(4 tests) <https://wpt.fyi/results/trusted-
    types/empty-default-policy.html>(live test) <http://wpt.live/
    trusted-types/empty-default-policy.html> (source) <https://
    github.com/web-platform-tests/wpt/blob/master/trusted-types/empty-
    default-policy.html>
  * eval-csp-no-tt.html(7 tests) <https://wpt.fyi/results/trusted-types/
    eval-csp-no-tt.html>(live test) <http://wpt.live/trusted-types/eval-
    csp-no-tt.html> (source) <https://github.com/web-platform-tests/wpt/
    blob/master/trusted-types/eval-csp-no-tt.html>
  * eval-csp-tt-default-policy-mutate.html(6 tests) <https://wpt.fyi/
    results/trusted-types/eval-csp-tt-default-policy-mutate.html>(live
    test) <http://wpt.live/trusted-types/eval-csp-tt-default-policy-
    mutate.html> (source) <https://github.com/web-platform-tests/wpt/
    blob/master/trusted-types/eval-csp-tt-default-policy-mutate.html>
  * eval-csp-tt-default-policy.html(24 tests) <https://wpt.fyi/results/
    trusted-types/eval-csp-tt-default-policy.html>(live test) <http://
    wpt.live/trusted-types/eval-csp-tt-default-policy.html> (source)
    <https://github.com/web-platform-tests/wpt/blob/master/trusted-
    types/eval-csp-tt-default-policy.html>
  * eval-csp-tt-no-default-policy.html(13 tests) <https://wpt.fyi/
    results/trusted-types/eval-csp-tt-no-default-policy.html>(live test)
    <http://wpt.live/trusted-types/eval-csp-tt-no-default-policy.html>
    (source) <https://github.com/web-platform-tests/wpt/blob/master/
    trusted-types/eval-csp-tt-no-default-policy.html>
  * eval-function-constructor-untrusted-arguments-and-applying-default-
    policy.html(16 tests) <https://wpt.fyi/results/trusted-types/eval-
    function-constructor-untrusted-arguments-and-applying-default-
    policy.html>(live test) <http://wpt.live/trusted-types/eval-
    function-constructor-untrusted-arguments-and-applying-default-
    policy.html> (source) <https://github.com/web-platform-tests/wpt/
    blob/master/trusted-types/eval-function-constructor-untrusted-
    arguments-and-applying-default-policy.html>
  * eval-function-constructor-untrusted-arguments-and-default-policy-
    throwing.html(2 tests) <https://wpt.fyi/results/trusted-types/eval-
    function-constructor-untrusted-arguments-and-default-policy-
    throwing.html>(live test) <http://wpt.live/trusted-types/eval-
    function-constructor-untrusted-arguments-and-default-policy-
    throwing.html> (source) <https://github.com/web-platform-tests/wpt/
    blob/master/trusted-types/eval-function-constructor-untrusted-
    arguments-and-default-policy-throwing.html>
  * eval-function-constructor.html(65 tests) <https://wpt.fyi/results/
    trusted-types/eval-function-constructor.html>(live test) <http://
    wpt.live/trusted-types/eval-function-constructor.html> (source)
    <https://github.com/web-platform-tests/wpt/blob/master/trusted-
    types/eval-function-constructor.html>
  * eval-no-csp-no-tt-default-policy.html(7 tests) <https://wpt.fyi/
    results/trusted-types/eval-no-csp-no-tt-default-policy.html>(live
    test) <http://wpt.live/trusted-types/eval-no-csp-no-tt-default-
    policy.html> (source) <https://github.com/web-platform-tests/wpt/
    blob/master/trusted-types/eval-no-csp-no-tt-default-policy.html>
  * eval-no-csp-no-tt.html(10 tests) <https://wpt.fyi/results/trusted-
    types/eval-no-csp-no-tt.html>(live test) <http://wpt.live/trusted-
    types/eval-no-csp-no-tt.html> (source) <https://github.com/web-
    platform-tests/wpt/blob/master/trusted-types/eval-no-csp-no-tt.html>
  * eval-with-permissive-csp.html(9 tests) <https://wpt.fyi/results/
    trusted-types/eval-with-permissive-csp.html>(live test) <http://
    wpt.live/trusted-types/eval-with-permissive-csp.html> (source)
    <https://github.com/web-platform-tests/wpt/blob/master/trusted-
    types/eval-with-permissive-csp.html>
  * get-trusted-types-compliant-attribute-value.html(5 tests) <https://
    wpt.fyi/results/trusted-types/get-trusted-types-compliant-attribute-
    value.html>(live test) <http://wpt.live/trusted-types/get-trusted-
    types-compliant-attribute-value.html> (source) <https://github.com/
    web-platform-tests/wpt/blob/master/trusted-types/get-trusted-types-
    compliant-attribute-value.html>
  * idlharness.window.js <https://wpt.fyi/results/trusted-types/
    idlharness.window.js> (live test) <http://wpt.live/trusted-types/
    idlharness.window.js> (source) <https://github.com/web-platform-
    tests/wpt/blob/master/trusted-types/idlharness.window.js>
  * inheriting-csp-for-local-schemes.html(10 tests) <https://wpt.fyi/
    results/trusted-types/inheriting-csp-for-local-schemes.html>(live
    test) <http://wpt.live/trusted-types/inheriting-csp-for-local-
    schemes.html> (source) <https://github.com/web-platform-tests/wpt/
    blob/master/trusted-types/inheriting-csp-for-local-schemes.html>
  * legacy-trusted-script-urls.html(4 tests) <https://wpt.fyi/results/
    trusted-types/legacy-trusted-script-urls.html>(live test) <http://
    wpt.live/trusted-types/legacy-trusted-script-urls.html> (source)
    <https://github.com/web-platform-tests/wpt/blob/master/trusted-
    types/legacy-trusted-script-urls.html>
  * legacy-trusted-scripts.html <https://wpt.fyi/results/trusted-types/
    legacy-trusted-scripts.html>(live test) <http://wpt.live/trusted-
    types/legacy-trusted-scripts.html> (source) <https://github.com/web-
    platform-tests/wpt/blob/master/trusted-types/legacy-trusted-
    scripts.html>
  * modify-attributes-in-callback.html(9 tests) <https://wpt.fyi/
    results/trusted-types/modify-attributes-in-callback.html>(live test)
    <http://wpt.live/trusted-types/modify-attributes-in-callback.html>
    (source) <https://github.com/web-platform-tests/wpt/blob/master/
    trusted-types/modify-attributes-in-callback.html>
  * no-require-trusted-types-for-report-only.html(9 tests) <https://
    wpt.fyi/results/trusted-types/no-require-trusted-types-for-report-
    only.html>(live test) <http://wpt.live/trusted-types/no-require-
    trusted-types-for-report-only.html> (source) <https://github.com/
    web-platform-tests/wpt/blob/master/trusted-types/no-require-trusted-
    types-for-report-only.html>
  * no-require-trusted-types-for.html(9 tests) <https://wpt.fyi/results/
    trusted-types/no-require-trusted-types-for.html>(live test) <http://
    wpt.live/trusted-types/no-require-trusted-types-for.html> (source)
    <https://github.com/web-platform-tests/wpt/blob/master/trusted-
    types/no-require-trusted-types-for.html>
  * require-trusted-types-for-TypeError-belongs-to-the-global-object-
    realm.html(2 tests) <https://wpt.fyi/results/trusted-types/require-
    trusted-types-for-TypeError-belongs-to-the-global-object-
    realm.html>(live test) <http://wpt.live/trusted-types/require-
    trusted-types-for-TypeError-belongs-to-the-global-object-realm.html>
    (source) <https://github.com/web-platform-tests/wpt/blob/master/
    trusted-types/require-trusted-types-for-TypeError-belongs-to-the-
    global-object-realm.html>
  * require-trusted-types-for-report-only.html(4 tests) <https://
    wpt.fyi/results/trusted-types/require-trusted-types-for-report-
    only.html>(live test) <http://wpt.live/trusted-types/require-
    trusted-types-for-report-only.html> (source) <https://github.com/
    web-platform-tests/wpt/blob/master/trusted-types/require-trusted-
    types-for-report-only.html>
  * require-trusted-types-for.html(4 tests) <https://wpt.fyi/results/
    trusted-types/require-trusted-types-for.html>(live test) <http://
    wpt.live/trusted-types/require-trusted-types-for.html> (source)
    <https://github.com/web-platform-tests/wpt/blob/master/trusted-
    types/require-trusted-types-for.html>
  * script-enforcement-001-outerHTML.xhtml <https://wpt.fyi/results/
    trusted-types/script-enforcement-001-outerHTML.xhtml>(live test)
    <http://wpt.live/trusted-types/script-enforcement-001-
    outerHTML.xhtml> (source) <https://github.com/web-platform-tests/
    wpt/blob/master/trusted-types/script-enforcement-001-outerHTML.xhtml>
  * script-enforcement-001.html(32 tests) <https://wpt.fyi/results/
    trusted-types/script-enforcement-001.html>(live test) <http://
    wpt.live/trusted-types/script-enforcement-001.html> (source)
    <https://github.com/web-platform-tests/wpt/blob/master/trusted-
    types/script-enforcement-001.html>
  * script-enforcement-002-outerHTML.xhtml <https://wpt.fyi/results/
    trusted-types/script-enforcement-002-outerHTML.xhtml>(live test)
    <http://wpt.live/trusted-types/script-enforcement-002-
    outerHTML.xhtml> (source) <https://github.com/web-platform-tests/
    wpt/blob/master/trusted-types/script-enforcement-002-outerHTML.xhtml>
  * script-enforcement-002.html(31 tests) <https://wpt.fyi/results/
    trusted-types/script-enforcement-002.html>(live test) <http://
    wpt.live/trusted-types/script-enforcement-002.html> (source)
    <https://github.com/web-platform-tests/wpt/blob/master/trusted-
    types/script-enforcement-002.html>
  * script-enforcement-003.html(31 tests) <https://wpt.fyi/results/
    trusted-types/script-enforcement-003.html>(live test) <http://
    wpt.live/trusted-types/script-enforcement-003.html> (source)
    <https://github.com/web-platform-tests/wpt/blob/master/trusted-
    types/script-enforcement-003.html>
  * script-enforcement-004.html(30 tests) <https://wpt.fyi/results/
    trusted-types/script-enforcement-004.html>(live test) <http://
    wpt.live/trusted-types/script-enforcement-004.html> (source)
    <https://github.com/web-platform-tests/wpt/blob/master/trusted-
    types/script-enforcement-004.html>
  * script-enforcement-005.html(4 tests) <https://wpt.fyi/results/
    trusted-types/script-enforcement-005.html>(live test) <http://
    wpt.live/trusted-types/script-enforcement-005.html> (source)
    <https://github.com/web-platform-tests/wpt/blob/master/trusted-
    types/script-enforcement-005.html>
  * script-enforcement-006.html(3 tests) <https://wpt.fyi/results/
    trusted-types/script-enforcement-006.html>(live test) <http://
    wpt.live/trusted-types/script-enforcement-006.html> (source)
    <https://github.com/web-platform-tests/wpt/blob/master/trusted-
    types/script-enforcement-006.html>
  * script-enforcement-007.html(3 tests) <https://wpt.fyi/results/
    trusted-types/script-enforcement-007.html>(live test) <http://
    wpt.live/trusted-types/script-enforcement-007.html> (source)
    <https://github.com/web-platform-tests/wpt/blob/master/trusted-
    types/script-enforcement-007.html>
  * script-enforcement-008.https.html(4 tests) <https://wpt.fyi/results/
    trusted-types/script-enforcement-008.https.html>(live test)
    <https://wpt.live/trusted-types/script-enforcement-008.https.html>
    (source) <https://github.com/web-platform-tests/wpt/blob/master/
    trusted-types/script-enforcement-008.https.html>
  * script-enforcement-009.https.html(4 tests) <https://wpt.fyi/results/
    trusted-types/script-enforcement-009.https.html>(live test)
    <https://wpt.live/trusted-types/script-enforcement-009.https.html>
    (source) <https://github.com/web-platform-tests/wpt/blob/master/
    trusted-types/script-enforcement-009.https.html>
  * script-enforcement-010.html(2 tests) <https://wpt.fyi/results/
    trusted-types/script-enforcement-010.html>(live test) <http://
    wpt.live/trusted-types/script-enforcement-010.html> (source)
    <https://github.com/web-platform-tests/wpt/blob/master/trusted-
    types/script-enforcement-010.html>
  * script-enforcement-011.html(2 tests) <https://wpt.fyi/results/
    trusted-types/script-enforcement-011.html>(live test) <http://
    wpt.live/trusted-types/script-enforcement-011.html> (source)
    <https://github.com/web-platform-tests/wpt/blob/master/trusted-
    types/script-enforcement-011.html>
  * set-attributes-no-require-trusted-types.html(202 tests) <https://
    wpt.fyi/results/trusted-types/set-attributes-no-require-trusted-
    types.html>(live test) <http://wpt.live/trusted-types/set-
    attributes-no-require-trusted-types.html> (source) <https://
    github.com/web-platform-tests/wpt/blob/master/trusted-types/set-
    attributes-no-require-trusted-types.html>
  * set-attributes-require-trusted-types-default-policy.html(264 tests)
    <https://wpt.fyi/results/trusted-types/set-attributes-require-
    trusted-types-default-policy.html>(live test) <http://wpt.live/
    trusted-types/set-attributes-require-trusted-types-default-
    policy.html> (source) <https://github.com/web-platform-tests/wpt/
    blob/master/trusted-types/set-attributes-require-trusted-types-
    default-policy.html>
  * set-attributes-require-trusted-types-no-default-policy.html(264
    tests) <https://wpt.fyi/results/trusted-types/set-attributes-
    require-trusted-types-no-default-policy.html>(live test) <http://
    wpt.live/trusted-types/set-attributes-require-trusted-types-no-
    default-policy.html> (source) <https://github.com/web-platform-
    tests/wpt/blob/master/trusted-types/set-attributes-require-trusted-
    types-no-default-policy.html>
  * should-sink-type-mismatch-violation-be-blocked-by-csp-001.html(15
    tests) <https://wpt.fyi/results/trusted-types/should-sink-type-
    mismatch-violation-be-blocked-by-csp-001.html>(live test) <http://
    wpt.live/trusted-types/should-sink-type-mismatch-violation-be-
    blocked-by-csp-001.html> (source) <https://github.com/web-platform-
    tests/wpt/blob/master/trusted-types/should-sink-type-mismatch-
    violation-be-blocked-by-csp-001.html>
  * should-sink-type-mismatch-violation-be-blocked-by-csp-002-
    worker.html(2 tests) <https://wpt.fyi/results/trusted-types/should-
    sink-type-mismatch-violation-be-blocked-by-csp-002-worker.html>(live
    test) <http://wpt.live/trusted-types/should-sink-type-mismatch-
    violation-be-blocked-by-csp-002-worker.html> (source) <https://
    github.com/web-platform-tests/wpt/blob/master/trusted-types/should-
    sink-type-mismatch-violation-be-blocked-by-csp-002-worker.html>
  * should-sink-type-mismatch-violation-be-blocked-by-csp-003.html
    <https://wpt.fyi/results/trusted-types/should-sink-type-mismatch-
    violation-be-blocked-by-csp-003.html>(live test) <http://wpt.live/
    trusted-types/should-sink-type-mismatch-violation-be-blocked-by-
    csp-003.html> (source) <https://github.com/web-platform-tests/wpt/
    blob/master/trusted-types/should-sink-type-mismatch-violation-be-
    blocked-by-csp-003.html>
  * should-trusted-type-policy-creation-be-blocked-by-csp-001.html(24
    tests) <https://wpt.fyi/results/trusted-types/should-trusted-type-
    policy-creation-be-blocked-by-csp-001.html>(live test) <http://
    wpt.live/trusted-types/should-trusted-type-policy-creation-be-
    blocked-by-csp-001.html> (source) <https://github.com/web-platform-
    tests/wpt/blob/master/trusted-types/should-trusted-type-policy-
    creation-be-blocked-by-csp-001.html>
  * should-trusted-type-policy-creation-be-blocked-by-csp-002.html(21
    tests) <https://wpt.fyi/results/trusted-types/should-trusted-type-
    policy-creation-be-blocked-by-csp-002.html>(live test) <http://
    wpt.live/trusted-types/should-trusted-type-policy-creation-be-
    blocked-by-csp-002.html> (source) <https://github.com/web-platform-
    tests/wpt/blob/master/trusted-types/should-trusted-type-policy-
    creation-be-blocked-by-csp-002.html>
  * should-trusted-type-policy-creation-be-blocked-by-csp-003.html(6
    tests) <https://wpt.fyi/results/trusted-types/should-trusted-type-
    policy-creation-be-blocked-by-csp-003.html>(live test) <http://
    wpt.live/trusted-types/should-trusted-type-policy-creation-be-
    blocked-by-csp-003.html> (source) <https://github.com/web-platform-
    tests/wpt/blob/master/trusted-types/should-trusted-type-policy-
    creation-be-blocked-by-csp-003.html>
  * should-trusted-type-policy-creation-be-blocked-by-csp-004-
    worker.html(16 tests) <https://wpt.fyi/results/trusted-types/should-
    trusted-type-policy-creation-be-blocked-by-csp-004-worker.html>(live
    test) <http://wpt.live/trusted-types/should-trusted-type-policy-
    creation-be-blocked-by-csp-004-worker.html> (source) <https://
    github.com/web-platform-tests/wpt/blob/master/trusted-types/should-
    trusted-type-policy-creation-be-blocked-by-csp-004-worker.html>
  * should-trusted-type-policy-creation-be-blocked-by-csp-005.html
    <https://wpt.fyi/results/trusted-types/should-trusted-type-policy-
    creation-be-blocked-by-csp-005.html>(live test) <http://wpt.live/
    trusted-types/should-trusted-type-policy-creation-be-blocked-by-
    csp-005.html> (source) <https://github.com/web-platform-tests/wpt/
    blob/master/trusted-types/should-trusted-type-policy-creation-be-
    blocked-by-csp-005.html>
  * trusted-types-createHTMLDocument.html(13 tests) <https://wpt.fyi/
    results/trusted-types/trusted-types-createHTMLDocument.html>(live
    test) <http://wpt.live/trusted-types/trusted-types-
    createHTMLDocument.html> (source) <https://github.com/web-platform-
    tests/wpt/blob/master/trusted-types/trusted-types-
    createHTMLDocument.html>
  * trusted-types-duplicate-names-list-report-only.html <https://
    wpt.fyi/results/trusted-types/trusted-types-duplicate-names-list-
    report-only.html>(live test) <http://wpt.live/trusted-types/trusted-
    types-duplicate-names-list-report-only.html> (source) <https://
    github.com/web-platform-tests/wpt/blob/master/trusted-types/trusted-
    types-duplicate-names-list-report-only.html>
  * trusted-types-duplicate-names-list.html <https://wpt.fyi/results/
    trusted-types/trusted-types-duplicate-names-list.html>(live test)
    <http://wpt.live/trusted-types/trusted-types-duplicate-names-
    list.html> (source) <https://github.com/web-platform-tests/wpt/blob/
    master/trusted-types/trusted-types-duplicate-names-list.html>
  * trusted-types-duplicate-names-without-enforcement.html(2 tests)
    <https://wpt.fyi/results/trusted-types/trusted-types-duplicate-
    names-without-enforcement.html>(live test) <http://wpt.live/trusted-
    types/trusted-types-duplicate-names-without-enforcement.html>
    (source) <https://github.com/web-platform-tests/wpt/blob/master/
    trusted-types/trusted-types-duplicate-names-without-enforcement.html>
  * trusted-types-duplicate-names.html <https://wpt.fyi/results/trusted-
    types/trusted-types-duplicate-names.html>(live test) <http://
    wpt.live/trusted-types/trusted-types-duplicate-names.html> (source)
    <https://github.com/web-platform-tests/wpt/blob/master/trusted-
    types/trusted-types-duplicate-names.html>
  * trusted-types-eval-reporting-no-unsafe-eval.html(3 tests) <https://
    wpt.fyi/results/trusted-types/trusted-types-eval-reporting-no-
    unsafe-eval.html>(live test) <http://wpt.live/trusted-types/trusted-
    types-eval-reporting-no-unsafe-eval.html> (source) <https://
    github.com/web-platform-tests/wpt/blob/master/trusted-types/trusted-
    types-eval-reporting-no-unsafe-eval.html>
  * trusted-types-eval-reporting-report-only.html(3 tests) <https://
    wpt.fyi/results/trusted-types/trusted-types-eval-reporting-report-
    only.html>(live test) <http://wpt.live/trusted-types/trusted-types-
    eval-reporting-report-only.html> (source) <https://github.com/web-
    platform-tests/wpt/blob/master/trusted-types/trusted-types-eval-
    reporting-report-only.html>
  * trusted-types-event-handlers.html(123 tests) <https://wpt.fyi/
    results/trusted-types/trusted-types-event-handlers.html>(live test)
    <http://wpt.live/trusted-types/trusted-types-event-handlers.html>
    (source) <https://github.com/web-platform-tests/wpt/blob/master/
    trusted-types/trusted-types-event-handlers.html>
  * trusted-types-navigation.html <https://wpt.fyi/results/trusted-
    types/trusted-types-navigation.html> (live test) <http://wpt.live/
    trusted-types/trusted-types-navigation.html> (source) <https://
    github.com/web-platform-tests/wpt/blob/master/trusted-types/trusted-
    types-navigation.html>
  * trusted-types-report-only.html(5 tests) <https://wpt.fyi/results/
    trusted-types/trusted-types-report-only.html>(live test) <http://
    wpt.live/trusted-types/trusted-types-report-only.html> (source)
    <https://github.com/web-platform-tests/wpt/blob/master/trusted-
    types/trusted-types-report-only.html>
  * trusted-types-reporting-check-report-DedicatedWorker-create-
    policy.html(4 tests) <https://wpt.fyi/results/trusted-types/trusted-
    types-reporting-check-report-DedicatedWorker-create-
    policy.html>(live test) <http://wpt.live/trusted-types/trusted-
    types-reporting-check-report-DedicatedWorker-create-policy.html>
    (source) <https://github.com/web-platform-tests/wpt/blob/master/
    trusted-types/trusted-types-reporting-check-report-DedicatedWorker-
    create-policy.html>
  * trusted-types-reporting-check-report-DedicatedWorker-sink-
    mismatch.html(5 tests) <https://wpt.fyi/results/trusted-types/
    trusted-types-reporting-check-report-DedicatedWorker-sink-
    mismatch.html>(live test) <http://wpt.live/trusted-types/trusted-
    types-reporting-check-report-DedicatedWorker-sink-mismatch.html>
    (source) <https://github.com/web-platform-tests/wpt/blob/master/
    trusted-types/trusted-types-reporting-check-report-DedicatedWorker-
    sink-mismatch.html>
  * trusted-types-reporting-check-report-Window-create-policy.html(4
    tests) <https://wpt.fyi/results/trusted-types/trusted-types-
    reporting-check-report-Window-create-policy.html>(live test)
    <http://wpt.live/trusted-types/trusted-types-reporting-check-report-
    Window-create-policy.html> (source) <https://github.com/web-
    platform-tests/wpt/blob/master/trusted-types/trusted-types-
    reporting-check-report-Window-create-policy.html>
  * trusted-types-reporting-check-report-Window-sink-mismatch.html(5
    tests) <https://wpt.fyi/results/trusted-types/trusted-types-
    reporting-check-report-Window-sink-mismatch.html>(live test)
    <http://wpt.live/trusted-types/trusted-types-reporting-check-report-
    Window-sink-mismatch.html> (source) <https://github.com/web-
    platform-tests/wpt/blob/master/trusted-types/trusted-types-
    reporting-check-report-Window-sink-mismatch.html>
  * trusted-types-reporting-clipping-of-sample.html(12 tests) <https://
    wpt.fyi/results/trusted-types/trusted-types-reporting-clipping-of-
    sample.html>(live test) <http://wpt.live/trusted-types/trusted-
    types-reporting-clipping-of-sample.html> (source) <https://
    github.com/web-platform-tests/wpt/blob/master/trusted-types/trusted-
    types-reporting-clipping-of-sample.html>
  * trusted-types-reporting-for-DOMParser-parseFromString.html(2 tests)
    <https://wpt.fyi/results/trusted-types/trusted-types-reporting-for-
    DOMParser-parseFromString.html>(live test) <http://wpt.live/trusted-
    types/trusted-types-reporting-for-DOMParser-parseFromString.html>
    (source) <https://github.com/web-platform-tests/wpt/blob/master/
    trusted-types/trusted-types-reporting-for-DOMParser-
    parseFromString.html>
  * trusted-types-reporting-for-DedicatedWorker-DedicatedWorker-
    constructor.html(2 tests) <https://wpt.fyi/results/trusted-types/
    trusted-types-reporting-for-DedicatedWorker-DedicatedWorker-
    constructor.html>(live test) <http://wpt.live/trusted-types/trusted-
    types-reporting-for-DedicatedWorker-DedicatedWorker-
    constructor.html> (source) <https://github.com/web-platform-tests/
    wpt/blob/master/trusted-types/trusted-types-reporting-for-
    DedicatedWorker-DedicatedWorker-constructor.html>
  * trusted-types-reporting-for-DedicatedWorker-ServiceWorkerContainer-
    register.https.html(2 tests) <https://wpt.fyi/results/trusted-types/
    trusted-types-reporting-for-DedicatedWorker-ServiceWorkerContainer-
    register.https.html>(live test) <https://wpt.live/trusted-types/
    trusted-types-reporting-for-DedicatedWorker-ServiceWorkerContainer-
    register.https.html> (source) <https://github.com/web-platform-
    tests/wpt/blob/master/trusted-types/trusted-types-reporting-for-
    DedicatedWorker-ServiceWorkerContainer-register.https.html>
  * trusted-types-reporting-for-DedicatedWorker-eval.html(2 tests)
    <https://wpt.fyi/results/trusted-types/trusted-types-reporting-for-
    DedicatedWorker-eval.html>(live test) <http://wpt.live/trusted-
    types/trusted-types-reporting-for-DedicatedWorker-eval.html>
    (source) <https://github.com/web-platform-tests/wpt/blob/master/
    trusted-types/trusted-types-reporting-for-DedicatedWorker-eval.html>
  * trusted-types-reporting-for-DedicatedWorker-function-
    constructor.html(12 tests) <https://wpt.fyi/results/trusted-types/
    trusted-types-reporting-for-DedicatedWorker-function-
    constructor.html>(live test) <http://wpt.live/trusted-types/trusted-
    types-reporting-for-DedicatedWorker-function-constructor.html>
    (source) <https://github.com/web-platform-tests/wpt/blob/master/
    trusted-types/trusted-types-reporting-for-DedicatedWorker-function-
    constructor.html>
  * trusted-types-reporting-for-DedicatedWorker-importScripts.html(2
    tests) <https://wpt.fyi/results/trusted-types/trusted-types-
    reporting-for-DedicatedWorker-importScripts.html>(live test)
    <http://wpt.live/trusted-types/trusted-types-reporting-for-
    DedicatedWorker-importScripts.html> (source) <https://github.com/
    web-platform-tests/wpt/blob/master/trusted-types/trusted-types-
    reporting-for-DedicatedWorker-importScripts.html>
  * trusted-types-reporting-for-DedicatedWorker-setTimeout-
    setInterval.html(4 tests) <https://wpt.fyi/results/trusted-types/
    trusted-types-reporting-for-DedicatedWorker-setTimeout-
    setInterval.html>(live test) <http://wpt.live/trusted-types/trusted-
    types-reporting-for-DedicatedWorker-setTimeout-setInterval.html>
    (source) <https://github.com/web-platform-tests/wpt/blob/master/
    trusted-types/trusted-types-reporting-for-DedicatedWorker-
    setTimeout-setInterval.html>
  * trusted-types-reporting-for-Document-execCommand.html(3 tests)
    <https://wpt.fyi/results/trusted-types/trusted-types-reporting-for-
    Document-execCommand.html>(live test) <http://wpt.live/trusted-
    types/trusted-types-reporting-for-Document-execCommand.html>
    (source) <https://github.com/web-platform-tests/wpt/blob/master/
    trusted-types/trusted-types-reporting-for-Document-execCommand.html>
  * trusted-types-reporting-for-Document-parseHTMLUnsafe.html(2 tests)
    <https://wpt.fyi/results/trusted-types/trusted-types-reporting-for-
    Document-parseHTMLUnsafe.html>(live test) <http://wpt.live/trusted-
    types/trusted-types-reporting-for-Document-parseHTMLUnsafe.html>
    (source) <https://github.com/web-platform-tests/wpt/blob/master/
    trusted-types/trusted-types-reporting-for-Document-
    parseHTMLUnsafe.html>
  * trusted-types-reporting-for-Document-write.html(4 tests) <https://
    wpt.fyi/results/trusted-types/trusted-types-reporting-for-Document-
    write.html>(live test) <http://wpt.live/trusted-types/trusted-types-
    reporting-for-Document-write.html> (source) <https://github.com/web-
    platform-tests/wpt/blob/master/trusted-types/trusted-types-
    reporting-for-Document-write.html>
  * trusted-types-reporting-for-Element-innerHTML.html(2 tests)
    <https://wpt.fyi/results/trusted-types/trusted-types-reporting-for-
    Element-innerHTML.html>(live test) <http://wpt.live/trusted-types/
    trusted-types-reporting-for-Element-innerHTML.html> (source)
    <https://github.com/web-platform-tests/wpt/blob/master/trusted-
    types/trusted-types-reporting-for-Element-innerHTML.html>
  * trusted-types-reporting-for-Element-insertAdjacentHTML.html(2 tests)
    <https://wpt.fyi/results/trusted-types/trusted-types-reporting-for-
    Element-insertAdjacentHTML.html>(live test) <http://wpt.live/
    trusted-types/trusted-types-reporting-for-Element-
    insertAdjacentHTML.html> (source) <https://github.com/web-platform-
    tests/wpt/blob/master/trusted-types/trusted-types-reporting-for-
    Element-insertAdjacentHTML.html>
  * trusted-types-reporting-for-Element-outerHTML.html(2 tests)
    <https://wpt.fyi/results/trusted-types/trusted-types-reporting-for-
    Element-outerHTML.html>(live test) <http://wpt.live/trusted-types/
    trusted-types-reporting-for-Element-outerHTML.html> (source)
    <https://github.com/web-platform-tests/wpt/blob/master/trusted-
    types/trusted-types-reporting-for-Element-outerHTML.html>
  * trusted-types-reporting-for-Element-setAttribute.html(10 tests)
    <https://wpt.fyi/results/trusted-types/trusted-types-reporting-for-
    Element-setAttribute.html>(live test) <http://wpt.live/trusted-
    types/trusted-types-reporting-for-Element-setAttribute.html>
    (source) <https://github.com/web-platform-tests/wpt/blob/master/
    trusted-types/trusted-types-reporting-for-Element-setAttribute.html>
  * trusted-types-reporting-for-Element-setHTMLUnsafe.html(2 tests)
    <https://wpt.fyi/results/trusted-types/trusted-types-reporting-for-
    Element-setHTMLUnsafe.html>(live test) <http://wpt.live/trusted-
    types/trusted-types-reporting-for-Element-setHTMLUnsafe.html>
    (source) <https://github.com/web-platform-tests/wpt/blob/master/
    trusted-types/trusted-types-reporting-for-Element-setHTMLUnsafe.html>
  * trusted-types-reporting-for-HTMLIFrameElement-srcdoc.html(2 tests)
    <https://wpt.fyi/results/trusted-types/trusted-types-reporting-for-
    HTMLIFrameElement-srcdoc.html>(live test) <http://wpt.live/trusted-
    types/trusted-types-reporting-for-HTMLIFrameElement-srcdoc.html>
    (source) <https://github.com/web-platform-tests/wpt/blob/master/
    trusted-types/trusted-types-reporting-for-HTMLIFrameElement-
    srcdoc.html>
  * trusted-types-reporting-for-HTMLScriptElement-children-change.html(2
    tests) <https://wpt.fyi/results/trusted-types/trusted-types-
    reporting-for-HTMLScriptElement-children-change.html>(live test)
    <http://wpt.live/trusted-types/trusted-types-reporting-for-
    HTMLScriptElement-children-change.html> (source) <https://
    github.com/web-platform-tests/wpt/blob/master/trusted-types/trusted-
    types-reporting-for-HTMLScriptElement-children-change.html>
  * trusted-types-reporting-for-HTMLScriptElement-innerHTML.html(2
    tests) <https://wpt.fyi/results/trusted-types/trusted-types-
    reporting-for-HTMLScriptElement-innerHTML.html>(live test) <http://
    wpt.live/trusted-types/trusted-types-reporting-for-
    HTMLScriptElement-innerHTML.html> (source) <https://github.com/web-
    platform-tests/wpt/blob/master/trusted-types/trusted-types-
    reporting-for-HTMLScriptElement-innerHTML.html>
  * trusted-types-reporting-for-HTMLScriptElement.html(8 tests)
    <https://wpt.fyi/results/trusted-types/trusted-types-reporting-for-
    HTMLScriptElement.html>(live test) <http://wpt.live/trusted-types/
    trusted-types-reporting-for-HTMLScriptElement.html> (source)
    <https://github.com/web-platform-tests/wpt/blob/master/trusted-
    types/trusted-types-reporting-for-HTMLScriptElement.html>
  * trusted-types-reporting-for-Range-createContextualFragment.html(2
    tests) <https://wpt.fyi/results/trusted-types/trusted-types-
    reporting-for-Range-createContextualFragment.html>(live test)
    <http://wpt.live/trusted-types/trusted-types-reporting-for-Range-
    createContextualFragment.html> (source) <https://github.com/web-
    platform-tests/wpt/blob/master/trusted-types/trusted-types-
    reporting-for-Range-createContextualFragment.html>
  * trusted-types-reporting-for-SVGScriptElement-children-change.html(2
    tests) <https://wpt.fyi/results/trusted-types/trusted-types-
    reporting-for-SVGScriptElement-children-change.html>(live test)
    <http://wpt.live/trusted-types/trusted-types-reporting-for-
    SVGScriptElement-children-change.html> (source) <https://github.com/
    web-platform-tests/wpt/blob/master/trusted-types/trusted-types-
    reporting-for-SVGScriptElement-children-change.html>
  * trusted-types-reporting-for-SVGScriptElement-innerHTML.html(2 tests)
    <https://wpt.fyi/results/trusted-types/trusted-types-reporting-for-
    SVGScriptElement-innerHTML.html>(live test) <http://wpt.live/
    trusted-types/trusted-types-reporting-for-SVGScriptElement-
    innerHTML.html> (source) <https://github.com/web-platform-tests/wpt/
    blob/master/trusted-types/trusted-types-reporting-for-
    SVGScriptElement-innerHTML.html>
  * trusted-types-reporting-for-ServiceWorker-ServiceWorkerContainer-
    register.https.html(2 tests) <https://wpt.fyi/results/trusted-types/
    trusted-types-reporting-for-ServiceWorker-ServiceWorkerContainer-
    register.https.html>(live test) <https://wpt.live/trusted-types/
    trusted-types-reporting-for-ServiceWorker-ServiceWorkerContainer-
    register.https.html> (source) <https://github.com/web-platform-
    tests/wpt/blob/master/trusted-types/trusted-types-reporting-for-
    ServiceWorker-ServiceWorkerContainer-register.https.html>
  * trusted-types-reporting-for-ServiceWorker-eval.https.html(2 tests)
    <https://wpt.fyi/results/trusted-types/trusted-types-reporting-for-
    ServiceWorker-eval.https.html>(live test) <https://wpt.live/trusted-
    types/trusted-types-reporting-for-ServiceWorker-eval.https.html>
    (source) <https://github.com/web-platform-tests/wpt/blob/master/
    trusted-types/trusted-types-reporting-for-ServiceWorker-
    eval.https.html>
  * trusted-types-reporting-for-ServiceWorker-function-
    constructor.https.html(12 tests) <https://wpt.fyi/results/trusted-
    types/trusted-types-reporting-for-ServiceWorker-function-
    constructor.https.html>(live test) <https://wpt.live/trusted-types/
    trusted-types-reporting-for-ServiceWorker-function-
    constructor.https.html> (source) <https://github.com/web-platform-
    tests/wpt/blob/master/trusted-types/trusted-types-reporting-for-
    ServiceWorker-function-constructor.https.html>
  * trusted-types-reporting-for-ServiceWorker-importScripts.https.html(2
    tests) <https://wpt.fyi/results/trusted-types/trusted-types-
    reporting-for-ServiceWorker-importScripts.https.html>(live test)
    <https://wpt.live/trusted-types/trusted-types-reporting-for-
    ServiceWorker-importScripts.https.html> (source) <https://
    github.com/web-platform-tests/wpt/blob/master/trusted-types/trusted-
    types-reporting-for-ServiceWorker-importScripts.https.html>
  * trusted-types-reporting-for-ServiceWorker-setTimeout-
    setInterval.https.html(4 tests) <https://wpt.fyi/results/trusted-
    types/trusted-types-reporting-for-ServiceWorker-setTimeout-
    setInterval.https.html>(live test) <https://wpt.live/trusted-types/
    trusted-types-reporting-for-ServiceWorker-setTimeout-
    setInterval.https.html> (source) <https://github.com/web-platform-
    tests/wpt/blob/master/trusted-types/trusted-types-reporting-for-
    ServiceWorker-setTimeout-setInterval.https.html>
  * trusted-types-reporting-for-ShadowRoot-innerHTML.html(2 tests)
    <https://wpt.fyi/results/trusted-types/trusted-types-reporting-for-
    ShadowRoot-innerHTML.html>(live test) <http://wpt.live/trusted-
    types/trusted-types-reporting-for-ShadowRoot-innerHTML.html>
    (source) <https://github.com/web-platform-tests/wpt/blob/master/
    trusted-types/trusted-types-reporting-for-ShadowRoot-innerHTML.html>
  * trusted-types-reporting-for-ShadowRoot-setHTMLUnsafe.html(2 tests)
    <https://wpt.fyi/results/trusted-types/trusted-types-reporting-for-
    ShadowRoot-setHTMLUnsafe.html>(live test) <http://wpt.live/trusted-
    types/trusted-types-reporting-for-ShadowRoot-setHTMLUnsafe.html>
    (source) <https://github.com/web-platform-tests/wpt/blob/master/
    trusted-types/trusted-types-reporting-for-ShadowRoot-
    setHTMLUnsafe.html>
  * trusted-types-reporting-for-SharedWorker-DedicatedWorker-
    constructor.html(2 tests) <https://wpt.fyi/results/trusted-types/
    trusted-types-reporting-for-SharedWorker-DedicatedWorker-
    constructor.html>(live test) <http://wpt.live/trusted-types/trusted-
    types-reporting-for-SharedWorker-DedicatedWorker-constructor.html>
    (source) <https://github.com/web-platform-tests/wpt/blob/master/
    trusted-types/trusted-types-reporting-for-SharedWorker-
    DedicatedWorker-constructor.html>
  * trusted-types-reporting-for-SharedWorker-ServiceWorkerContainer-
    register.https.html(2 tests) <https://wpt.fyi/results/trusted-types/
    trusted-types-reporting-for-SharedWorker-ServiceWorkerContainer-
    register.https.html>(live test) <https://wpt.live/trusted-types/
    trusted-types-reporting-for-SharedWorker-ServiceWorkerContainer-
    register.https.html> (source) <https://github.com/web-platform-
    tests/wpt/blob/master/trusted-types/trusted-types-reporting-for-
    SharedWorker-ServiceWorkerContainer-register.https.html>
  * trusted-types-reporting-for-SharedWorker-eval.html(2 tests)
    <https://wpt.fyi/results/trusted-types/trusted-types-reporting-for-
    SharedWorker-eval.html>(live test) <http://wpt.live/trusted-types/
    trusted-types-reporting-for-SharedWorker-eval.html> (source)
    <https://github.com/web-platform-tests/wpt/blob/master/trusted-
    types/trusted-types-reporting-for-SharedWorker-eval.html>
  * trusted-types-reporting-for-SharedWorker-function-
    constructor.html(12 tests) <https://wpt.fyi/results/trusted-types/
    trusted-types-reporting-for-SharedWorker-function-
    constructor.html>(live test) <http://wpt.live/trusted-types/trusted-
    types-reporting-for-SharedWorker-function-constructor.html> (source)
    <https://github.com/web-platform-tests/wpt/blob/master/trusted-
    types/trusted-types-reporting-for-SharedWorker-function-
    constructor.html>
  * trusted-types-reporting-for-SharedWorker-importScripts.html(2 tests)
    <https://wpt.fyi/results/trusted-types/trusted-types-reporting-for-
    SharedWorker-importScripts.html>(live test) <http://wpt.live/
    trusted-types/trusted-types-reporting-for-SharedWorker-
    importScripts.html> (source) <https://github.com/web-platform-tests/
    wpt/blob/master/trusted-types/trusted-types-reporting-for-
    SharedWorker-importScripts.html>
  * trusted-types-reporting-for-SharedWorker-setTimeout-
    setInterval.html(4 tests) <https://wpt.fyi/results/trusted-types/
    trusted-types-reporting-for-SharedWorker-setTimeout-
    setInterval.html>(live test) <http://wpt.live/trusted-types/trusted-
    types-reporting-for-SharedWorker-setTimeout-setInterval.html>
    (source) <https://github.com/web-platform-tests/wpt/blob/master/
    trusted-types/trusted-types-reporting-for-SharedWorker-setTimeout-
    setInterval.html>
  * trusted-types-reporting-for-Window-DedicatedWorker-
    constructor.html(2 tests) <https://wpt.fyi/results/trusted-types/
    trusted-types-reporting-for-Window-DedicatedWorker-
    constructor.html>(live test) <http://wpt.live/trusted-types/trusted-
    types-reporting-for-Window-DedicatedWorker-constructor.html>
    (source) <https://github.com/web-platform-tests/wpt/blob/master/
    trusted-types/trusted-types-reporting-for-Window-DedicatedWorker-
    constructor.html>
  * trusted-types-reporting-for-Window-ServiceWorkerContainer-
    register.https.html(2 tests) <https://wpt.fyi/results/trusted-types/
    trusted-types-reporting-for-Window-ServiceWorkerContainer-
    register.https.html>(live test) <https://wpt.live/trusted-types/
    trusted-types-reporting-for-Window-ServiceWorkerContainer-
    register.https.html> (source) <https://github.com/web-platform-
    tests/wpt/blob/master/trusted-types/trusted-types-reporting-for-
    Window-ServiceWorkerContainer-register.https.html>
  * trusted-types-reporting-for-Window-SharedWorker-constructor.html(2
    tests) <https://wpt.fyi/results/trusted-types/trusted-types-
    reporting-for-Window-SharedWorker-constructor.html>(live test)
    <http://wpt.live/trusted-types/trusted-types-reporting-for-Window-
    SharedWorker-constructor.html> (source) <https://github.com/web-
    platform-tests/wpt/blob/master/trusted-types/trusted-types-
    reporting-for-Window-SharedWorker-constructor.html>
  * trusted-types-reporting-for-Window-eval.html(2 tests) <https://
    wpt.fyi/results/trusted-types/trusted-types-reporting-for-Window-
    eval.html>(live test) <http://wpt.live/trusted-types/trusted-types-
    reporting-for-Window-eval.html> (source) <https://github.com/web-
    platform-tests/wpt/blob/master/trusted-types/trusted-types-
    reporting-for-Window-eval.html>
  * trusted-types-reporting-for-Window-function-constructor.html(12
    tests) <https://wpt.fyi/results/trusted-types/trusted-types-
    reporting-for-Window-function-constructor.html>(live test) <http://
    wpt.live/trusted-types/trusted-types-reporting-for-Window-function-
    constructor.html> (source) <https://github.com/web-platform-tests/
    wpt/blob/master/trusted-types/trusted-types-reporting-for-Window-
    function-constructor.html>
  * trusted-types-reporting-for-Window-setTimeout-setInterval.html(4
    tests) <https://wpt.fyi/results/trusted-types/trusted-types-
    reporting-for-Window-setTimeout-setInterval.html>(live test)
    <http://wpt.live/trusted-types/trusted-types-reporting-for-Window-
    setTimeout-setInterval.html> (source) <https://github.com/web-
    platform-tests/wpt/blob/master/trusted-types/trusted-types-
    reporting-for-Window-setTimeout-setInterval.html>
  * trusted-types-reporting.html(8 tests) <https://wpt.fyi/results/
    trusted-types/trusted-types-reporting.html>(live test) <http://
    wpt.live/trusted-types/trusted-types-reporting.html> (source)
    <https://github.com/web-platform-tests/wpt/blob/master/trusted-
    types/trusted-types-reporting.html>
  * trusted-types-sandbox-allow-scripts.html(2 tests) <https://wpt.fyi/
    results/trusted-types/trusted-types-sandbox-allow-scripts.html>(live
    test) <http://wpt.live/trusted-types/trusted-types-sandbox-allow-
    scripts.html> (source) <https://github.com/web-platform-tests/wpt/
    blob/master/trusted-types/trusted-types-sandbox-allow-scripts.html>
  * trusted-types-sandbox-no-allow-scripts.html <https://wpt.fyi/
    results/trusted-types/trusted-types-sandbox-no-allow-
    scripts.html>(live test) <http://wpt.live/trusted-types/trusted-
    types-sandbox-no-allow-scripts.html> (source) <https://github.com/
    web-platform-tests/wpt/blob/master/trusted-types/trusted-types-
    sandbox-no-allow-scripts.html>
  * trusted-types-source-file-path.html(3 tests) <https://wpt.fyi/
    results/trusted-types/trusted-types-source-file-path.html>(live
    test) <http://wpt.live/trusted-types/trusted-types-source-file-
    path.html> (source) <https://github.com/web-platform-tests/wpt/blob/
    master/trusted-types/trusted-types-source-file-path.html>
  * trusted-types-svg-script-set-href.html(18 tests) <https://wpt.fyi/
    results/trusted-types/trusted-types-svg-script-set-href.html>(live
    test) <http://wpt.live/trusted-types/trusted-types-svg-script-set-
    href.html> (source) <https://github.com/web-platform-tests/wpt/blob/
    master/trusted-types/trusted-types-svg-script-set-href.html>
  * trusted-types-tojson.html <https://wpt.fyi/results/trusted-types/
    trusted-types-tojson.html>(live test) <http://wpt.live/trusted-
    types/trusted-types-tojson.html> (source) <https://github.com/web-
    platform-tests/wpt/blob/master/trusted-types/trusted-types-tojson.html>
  * tt-block-eval.html <https://wpt.fyi/results/trusted-types/tt-block-
    eval.html>(live test) <http://wpt.live/trusted-types/tt-block-
    eval.html> (source) <https://github.com/web-platform-tests/wpt/blob/
    master/trusted-types/tt-block-eval.html> 


    1. Introduction<#introduction>

/This section is not normative./

Certain classes of vulnerabilities occur when a web application takes a
value from an attacker-controlled source (e.g. the document URL
parameter, or postMessage channel) and passes that value, without
appropriate sanitization to one of the injection sinks <#injection-
sinks> - various Web API functions with powerful capabilities.

These types of issues are traditionally difficult to prevent.
Applications commonly call those injection sinks with attacker-
controlled values without authors realizing it, since it’s not clear if
the input was attacker-controlled when invoking the injection sink. Due
to the dynamic nature of JavaScript it’s also difficult to ascertain
that such pattern is not present in a given program. It is often missed
during manual code reviews, and automated code analysis. As an example,
if |aString| contains untrusted data, |foo[bar] = aString| is a
statement that potentially can trigger a vulnerability, depending on a
value of |foo| and |bar|.

This document focuses on preventing DOM-Based Cross-Site Scripting that
occurs when attacker-controlled data reaches § 2.1.1 DOM XSS injection
sinks <#dom-xss-injection-sinks>, as that eventually causes execution of
the script payload controlled by the attacker. DOM XSS is prevalent in
the web applications as there are over 60 different injection sinks
(e.g. |Element.innerHTML|, or |Location.href| setters).

This document defines Trusted Types <#trusted-types> - an API that
allows applications to lock down injection sinks <#injection-sink> to
only accept non-spoofable, typed values in place of strings. These
values can in turn only be created from application-defined policies
<#policies>, allowing the authors to define rules guarding dangerous
APIs, reducing the attack surface to small, isolated parts of the web
application codebase, which are substantially easier to safeguard,
monitor and review.


      1.1. Goals<#goals>

  *

    Minimize the likelihood of client-side vulnerabilities that occur
    when calling powerful Web APIs with untrusted data - for example,
    minimize the likelihood of DOM XSS.

  *

    Encourage a design in which security decisions are encapsulated
    within a small part of the application.

  *

    Reduce security review surface for complex web application codebases.

  *

    Allow the usability-preserving detection of vulnerabilities similar
    to how regular programming errors are detected and surfaced to the
    developers, with the assist of dynamic and static analysis tools.


      1.2. Non-goals<#non-goals>

  *

    Prevent, or mitigate the result of injections into server-side
    generated markup, in specific reflections into the body of the
    scripts running in a document. To address server-side XSS vectors,
    we recommend existing solutions like templating systems or CSP <#biblio-csp3> script-src <https://www.w3.org/TR/CSP3/#script-src>.

  *

    Address resource confinement, e.g. to prevent data exfiltration, or
    connecting to external sources via [Fetch] <#biblio-fetch>.

  *

    Control subresource loading. Trusted Types aim to allow the authors
    to control loading resources that can script the current document,
    but not other subresources.

  *

    Prevent /cross-origin/ JavaScript execution (for example, Trusted
    Types don’t guard loading new documents with JavaScript code via |
    data:| URLs).

  *

    Prevent malicious authors of the web application’s JavaScript code
    from being able to bypass the restrictions; attempting to protect
    against malicious authors would result in an overly complex and not-
    practical design.


      1.3. Use cases<#use-cases>

  *

    An author maintains a complex web application written in a framework
    that uses a secure templating system to generate the UI components.
    The application also depends on 3rd party client-side libraries that
    perform auxiliary tasks (e.g. analytics, performance monitoring). To
    ensure that none of these components introduce DOM XSS
    vulnerabilities, author defines a Trusted Type policy in the
    templating library and enables the enforcement for the § 2.1.1 DOM
    XSS injection sinks <#dom-xss-injection-sinks>.

  *

    A website uses § 2.1.1 DOM XSS injection sinks <#dom-xss-injection-
    sinks>. The website-developer adds trusted types to it and monitors
    violations by using the Content-Security-Policy-Report-Only
    <https://www.w3.org/TR/CSP3/#header-content-security-policy-report-
    only> header field. Violations are iteratively fixed by refactoring
    the code to use only safe methods. Afterwards, no § 2.1.1 DOM XSS
    injection sinks <#dom-xss-injection-sinks> are called anymore.
    Hence, no trusted types are required anymore. The developer switches
    the report-only mode off and disables trusted type policies with the
    trusted-types <#trusted-types-directive> and the require-trusted-
    types-for <#require-trusted-types-for-directive> directives. The
    website’s functionality was never impaired during the refactorings.

  *

    A large team maintains a complex client-side application. They
    create a number of Trusted Types policies that satisfy the security
    requirements for the application. The team consolidates the policy
    implementations and the safe abstractions that use them in a small
    number of heavily reviewed files and requires extra approval for
    commits that affect these files.

    The need to create trusted values to affect injection sinks
    <#injection-sink>, combined with additional scrutiny on changes that
    affect policy code, incents developers to use safe abstractions
    instead of writing ad-hoc string composition code when interacting
    with § 2.1.1 DOM XSS injection sinks <#dom-xss-injection-sinks>.

    When considering the risk of DOM XSS, security auditors find a small
    attack surface; they focus on the small amount of code that crafts
    the CSP header and provides the safe abstractions, and ignore the
    bulk of client-side application code.

  *

    An existing web application interacts with the DOM mostly using XSS-
    safe patterns (i.e. without using § 2.1.1 DOM XSS injection sinks
    <#dom-xss-injection-sinks>). In a few places, however, it resorts to
    using risky patterns like loading additional script using JSONP,
    calling into |innerHTML| or |eval|.

    Review finds that those places do not cause XSS (e.g. because user-
    controlled data is not part of the input to those sinks), but it’s
    hard to migrate the application off using these patterns.

    As such, CSP cannot be enforced on this application (without
    resorting to an unsafe version using |'unsafe-eval' 'unsafe-
    inline'|). Additionally, it’s possible some codebase with DOM XSS
    flaws was not included in a review, or will be introduced in the future.

    To address this risk, the author converts the reviewed parts to
    using Trusted Types, and enables Trusted Type enforcement
    <#enforcement>. Additional places using the injection sinks, should
    they exist in the future, are correctly blocked and reported.

  *

    A security team is tasked with assuring that the client-side heavy
    application code does not contain XSS vulnerabilities. Since the
    server side code is homogeneous (it’s mostly an API backend), and
    the application enforces Trusted Types, the review only focuses on
    the Trusted Type policies <#policies> and their rules. Later on the
    reviewed policy names are allowed in the 'trusted-types' CSP
    directive, safe for the developers to use.

    Any additional code, including the code of often-changing
    dependencies, can be excluded from the review, unless it creates a
    Trusted Type policy. Without it, the code cannot cause a DOM XSS.


    2. Framework<#framework>


      2.1. Injection sinks<#injection-sinks>

/This section is not normative./

An injection sink is a powerful Web API function that should only be
called with trusted, validated or appropriately sanitized input. Calling
the injection sink with attacker-controlled (i.e. injected) inputs has
undesired consequences and is considered a security vulnerability.

Note: The exact list of injection sinks covered by this document is
defined in § 4 Integrations <#integrations>.

It’s difficult to determine if a given application contains such a
vulnerability (e.g. if it is vulnerable to DOM XSS) only by analyzing
the invocations of injection sinks <#injection-sink>, as their inputs
(usually strings) do not carry the information about their provenance.
For example, while the application might intentionally call |eval()|
with dynamically created inputs (e.g. for code obfuscation purposes),
calling |eval()| on strings supplied by the attacker is definitely a
security vulnerability - but it’s not easy to distinguish one from the
other.

This document organizes the injection sinks into groups, based on the
capabilities that sinks in a given group have. Enforcement
<#enforcement> for groups is controlled via trusted-types-sink-group
<#trusted-types-sink-group> values.


        2.1.1. DOM XSS injection sinks<#dom-xss-injection-sinks>

/This section is not normative./

DOM XSS injection sinks <#injection-sink> evaluate an input string value
in a way that could result in DOM XSS if that value is untrusted.

Examples include:

  *

    Setters for |Element <https://dom.spec.whatwg.org/#element>|
    attributes that accept a URL of the code to load like |
    HTMLScriptElement.src <#dom-htmlscriptelement-src>|,

  *

    Setters for |Element <https://dom.spec.whatwg.org/#element>|
    attributes that accept a code to execute like |
    HTMLScriptElement.text <#dom-htmlscriptelement-text>|,

  *

    Functions that execute code directly like |eval|,

  *

    Navigation to 'javascript:' URLs.

Since HTML parsers can create arbitrary elements, including scripts, and
set arbitrary attributes, DOM XSS injection sinks <#injection-sink> also
include HTML parsing sinks:

  *

    Functions that parse & insert HTML strings into the document like |
    Element.innerHTML <https://html.spec.whatwg.org/multipage/dynamic-
    markup-insertion.html#dom-element-innerhtml>|, |ShadowRoot.innerHTML
    <https://html.spec.whatwg.org/multipage/dynamic-markup-
    insertion.html#dom-shadowroot-innerhtml>|, and |Element.outerHTML
    <https://html.spec.whatwg.org/multipage/dynamic-markup-
    insertion.html#dom-element-outerhtml>| setters, or Document.write.

  *

    Functions that create a new same-origin |Document <https://
    dom.spec.whatwg.org/#document>| with caller-controlled markup like |
    parseFromString() <https://html.spec.whatwg.org/multipage/dynamic-
    markup-insertion.html#dom-domparser-parsefromstring>|.

Guarding DOM XSS injection sinks is controlled by the trusted-types-
sink-group <#trusted-types-sink-group> named 'script'.


      2.2. Trusted Types<#trusted-types>

To allow the authors to control values reaching injection sinks, we
introduce § 2.2 Trusted Types <#trusted-types>. The following list of
Trusted Types indicating that a given value is trusted by the authors to
be used with an injection sink <#injection-sink> in a certain context.

Note: *Trusted* in this context signifies the fact that the application
author is confident that a given value can be safely used with an
injection sink - she /trusts/ it does not introduce a vulnerability.
That does not imply that the value is indeed /safe/.

Note: This allows the authors to specify the intention when creating a
given value, and the user agents to introduce checks based on the type
of such value to preserve the authors' intent. For example, if authors
intend a value to be used as an HTML snippet, an attempt to load a
script from that value would fail.

Note: All Trusted Types wrap over an immutable string, specified when
the objects are created. These objects are unforgeable in a sense that
there is no JavaScript-exposed way to replace the inner string value of
a given object - it’s stored in an internal slot with no setter exposed.

Note: All Trusted Types stringifiers return the inner string value. This
makes it easy to incrementally migrate the application code into using
Trusted Types in place of DOM strings (it’s possible to start producing
types in parts of the application, while still using and accepting
strings in other parts of the codebase). In that sense, Trusted Types
are backwards-compatible with the regular DOM APIs.


        2.2.1. |TrustedHTML|<#trusted-html>

The TrustedHTML interface represents a string that a developer can
confidently insert into an injection sink <#injection-sink> that will
render it as HTML. These objects are immutable wrappers around a string,
constructed via a |TrustedTypePolicy <#trustedtypepolicy>|’s |createHTML
<#dom-trustedtypepolicy-createhtml>| method.

[Exposed <https://webidl.spec.whatwg.org/#Exposed>=(Window,Worker)]
interface TrustedHTML <#trustedhtml> {
  stringifier <#trustedhtml-stringification-behavior>;
  DOMString <https://webidl.spec.whatwg.org/#idl-DOMString> toJSON <#dom-trustedhtml-tojson>();
};

TrustedHTML objects have an associated string data. The value is set
when the object is created, and will never change during its lifetime.

|toJSON()| method steps and the stringification behavior steps of a
TrustedHTML object are to return the associated data <#trustedhtml-data>
value.


        2.2.2. |TrustedScript|<#trusted-script>

The TrustedScript interface represents a string with an uncompiled
script body that a developer can confidently pass into an injection sink
<#injection-sink> that might lead to executing that script. These
objects are immutable wrappers around a string, constructed via a |
TrustedTypePolicy <#trustedtypepolicy>|’s |createScript <#dom-
trustedtypepolicy-createscript>| method.

[Exposed <https://webidl.spec.whatwg.org/#Exposed>=(Window,Worker)]
interface TrustedScript <#trustedscript> {
  stringifier <#trustedscript-stringification-behavior>;
  DOMString <https://webidl.spec.whatwg.org/#idl-DOMString> toJSON <#dom-trustedscript-tojson>();
};

TrustedScript objects have an associated string data. The value is set
when the object is created, and will never change during its lifetime.

|toJSON()| method steps and the stringification behavior steps of a
TrustedScript object are to return the associated data <#trustedscript-
data> value.


        2.2.3. |TrustedScriptURL|<#trused-script-url>

The TrustedScriptURL interface represents a string that a developer can
confidently pass into an injection sink <#injection-sink> that will
parse it as a URL of an external script resource. These objects are
immutable wrappers around a string, constructed via a |TrustedTypePolicy
<#trustedtypepolicy>|’s |createScriptURL <#dom-trustedtypepolicy-
createscripturl>| method.

[Exposed <https://webidl.spec.whatwg.org/#Exposed>=(Window,Worker)]
interface TrustedScriptURL <#trustedscripturl> {
  stringifier <#trustedscripturl-stringification-behavior>;
  USVString <https://webidl.spec.whatwg.org/#idl-USVString> toJSON <#dom-trustedscripturl-tojson>();
};

TrustedScriptURL objects have an associated string data. The value is
set when the object is created, and will never change during its lifetime.

|toJSON()| method steps and the stringification behavior steps of a
TrustedScriptURL object are to return the associated data
<#trustedscripturl-data> value.


      2.3. Policies<#policies-hdr>

Trusted Types can only be created via user-defined and immutable
policies that define rules for converting a string into a given Trusted
Type object. Policies allows the authors to specify custom, programmatic
rules that Trusted Types must adhere to.

<#sanitizing-policy> Authors may define a policy that will sanitize an
HTML string, allowing only a subset of tags and attributes that are
known not to cause JavaScript execution. Any |TrustedHTML
<#trustedhtml>| object created through this policy can then be safely
used in the application, and e.g. passed to |innerHTML| setter - even if
the input value was controlled by the attacker, the policy rules
neutralized it to adhere to policy-specific contract.

const sanitizingPolicy = trustedTypes.createPolicy('sanitize-html', {
  createHTML: (input) => myTrustedSanitizer(input, { superSafe: 'ok'}),
});

myDiv.innerHTML = sanitizingPolicy.createHTML(untrustedValue);

Note: Trusted Type <#trusted-type> objects wrap values that are
explicitly trusted by the author. As such, creating a Trusted Type
object instance becomes a de facto injection sink <#injection-sink>, and
hence code that creates a Trusted Type instances is security-critical.
To allow for strict control over Trusted Type object creation we don’t
expose the constructors of those directly, but require authors to create
them via policies <#policies>.

Multiple policies can be created in a given Realm <https://
html.spec.whatwg.org/multipage/webappapis.html#concept-global-object-
realm>, allowing the applications to define different rules for
different parts of the codebase.

<#policy-reference> Library initialized with a policy allowing it to
load additional scripts from a given host.

const cdnScriptsPolicy = trustedTypes.createPolicy('cdn-scripts', {
  createScriptURL(url) {
    const parsed = new URL(url, document.baseURI);
    if (parsed.origin == 'https://mycdn.example') {
      return url;
    }
    throw new TypeError('invalid URL');
  },
});

myLibrary.init({policy: cdnScriptsPolicy});

Note: Trusted Type objects can only be created via policies. If
enforcement <#enforcement> is enabled, only the policy code can trigger
an action of an injection sink <#injection-sink> and hence call-sites of
the policies' |create*| functions are the /only/ security-sensitive code
in the entire program with regards to the actions of the injection sinks
<#injection-sink>. Only this typically small subset of the entire code
base needs to be security-reviewed - there’s no need to monitor or
review the injection sinks <#injection-sink> themselves, as User Agents
enforce <#enforcement> that those sinks will only accept matching
Trusted Type objects, and these in turn can only be created via policies.

The |createPolicy <#dom-trustedtypepolicyfactory-createpolicy>| function
returns a policy object which |create*| functions will create Trusted
Type objects after applying the policy rules.

Note: While it’s safe to freely use a policy that sanitizes its input
anywhere in the application, there might be a need to create lax
policies to be used internally, and only to be called with author-
controlled input. For example, a client-side HTML templating library, an
HTML sanitizer library, or a JS asynchronous code plugin loading
subsystem each will likely need full control over HTML or URLs. The API
design facilitates that - each policy may only be used if the callsite
can obtain a reference to the policy (a return value from |
createPolicy() <#dom-trustedtypepolicyfactory-createpolicy>|). As such,
policy references can be treated as capabilities <https://
en.wikipedia.org/wiki/Object-capability_model>, access to which can be
controlled using JavaScript techniques (e.g. via closures, internal
function variables, or modules).

<#policy-capability> Unsafe no-op policy reachable only from within a
single code block to ascertain that it’s called only with no attacker-
controlled values.

(function renderFootnote() {
  const unsafePolicy = trustedTypes.createPolicy('html', {
    createHTML: input => input,
  });
  const footnote = await fetch('/footnote.html').then(r => r.text());
  footNote.innerHTML = unsafePolicy.createHTML(footnote);
})();


        2.3.1. |TrustedTypePolicyFactory|<#trusted-type-policy-factory>

TrustedTypePolicyFactory creates |policies <#trustedtypepolicy>| and
verifies that Trusted Type object instances were created via one of the
policies.

Note: This factory object is exposed to JavaScript through |
trustedTypes| property on the global object - see § 4.1.1 Extensions to
the WindowOrWorkerGlobalScope interface <#extensions-to-the-
windoworworkerglobalscope-interface>.

[Exposed <https://webidl.spec.whatwg.org/#Exposed>=(Window,Worker)] interface TrustedTypePolicyFactory <#trustedtypepolicyfactory> {
    TrustedTypePolicy <#trustedtypepolicy> createPolicy <#dom-trustedtypepolicyfactory-createpolicy>(
        DOMString <https://webidl.spec.whatwg.org/#idl-DOMString> |policyName|, optional TrustedTypePolicyOptions <#dictdef-trustedtypepolicyoptions> |policyOptions| = {});
    boolean <https://webidl.spec.whatwg.org/#idl-boolean> isHTML <#dom-trustedtypepolicyfactory-ishtml>(any <https://webidl.spec.whatwg.org/#idl-any> |value|);
    boolean <https://webidl.spec.whatwg.org/#idl-boolean> isScript <#dom-trustedtypepolicyfactory-isscript>(any <https://webidl.spec.whatwg.org/#idl-any> |value|);
    boolean <https://webidl.spec.whatwg.org/#idl-boolean> isScriptURL <#dom-trustedtypepolicyfactory-isscripturl>(any <https://webidl.spec.whatwg.org/#idl-any> |value|);
    readonly attribute TrustedHTML <#trustedhtml> emptyHTML <#dom-trustedtypepolicyfactory-emptyhtml>;
    readonly attribute TrustedScript <#trustedscript> emptyScript <#dom-trustedtypepolicyfactory-emptyscript>;
    DOMString <https://webidl.spec.whatwg.org/#idl-DOMString>? getAttributeType <#dom-trustedtypepolicyfactory-getattributetype>(
        DOMString <https://webidl.spec.whatwg.org/#idl-DOMString> |tagName|,
        DOMString <https://webidl.spec.whatwg.org/#idl-DOMString> |attribute|,
        optional DOMString <https://webidl.spec.whatwg.org/#idl-DOMString>? |elementNs| = "",
        optional DOMString <https://webidl.spec.whatwg.org/#idl-DOMString>? |attrNs| = "");
    DOMString <https://webidl.spec.whatwg.org/#idl-DOMString>? getPropertyType <#dom-trustedtypepolicyfactory-getpropertytype>(
        DOMString <https://webidl.spec.whatwg.org/#idl-DOMString> |tagName|,
        DOMString <https://webidl.spec.whatwg.org/#idl-DOMString> |property|,
        optional DOMString <https://webidl.spec.whatwg.org/#idl-DOMString>? |elementNs| = "");
    readonly attribute TrustedTypePolicy <#trustedtypepolicy>? defaultPolicy <#dom-trustedtypepolicyfactory-defaultpolicy>;
};

A |TrustedTypePolicyFactory <#trustedtypepolicyfactory>| object has an
associated |TrustedTypePolicy <#trustedtypepolicy>| default policy. Its
value is initially null.

A |TrustedTypePolicyFactory <#trustedtypepolicyfactory>| object has an
associated ordered set <https://infra.spec.whatwg.org/#ordered-set> of
strings created policy names. Its value is initially « ».

|createPolicy(policyName, policyOptions)|

    Creates a policy object that will implement the rules passed in the
    |TrustedTypePolicyOptions <#dictdef-trustedtypepolicyoptions>|
    policyOptions object. The allowed policy names may be restricted by
    Content Security Policy <#content-security-policy-hdr>. If the
    policy name is not on the allowlist defined in the trusted-types
    <#trusted-types-directive> CSP directive, the policy creation fails
    with a TypeError. Also, if unique policy names are enforced (i.e.
    |'allow-duplicates'| is not used), and |createPolicy| is called more
    than once with any given |policyName|, policy creation fails with a
    TypeError.

    <#create-policy-example>

    // HTTP Response header: Content-Security-Policy: trusted-types foo
    trustedTypes.createPolicy("foo", {}); // ok.
    trustedTypes.createPolicy("bar", {}); // throws - name not on the allowlist.
    trustedTypes.createPolicy("foo", {}); // throws - duplicate name.

    Returns the result of executing a Create a Trusted Type Policy
    <#abstract-opdef-create-a-trusted-type-policy> algorithm, with the
    following arguments:

    factory
        this <https://webidl.spec.whatwg.org/#this> value 
    policyName
        policyName 
    options
        policyOptions 
    global
        this <https://webidl.spec.whatwg.org/#this> value’s relevant
        global object <https://html.spec.whatwg.org/multipage/
        webappapis.html#concept-relevant-global> 

    <#create-and-used-unexposed-policy>

    const myPolicy = trustedTypes.createPolicy('myPolicy', {
      // This security-critical code needs a security review;
      // a flaw in this code could cause DOM XSS.
      createHTML(input) { return aSanitizer.sanitize(input) },
      createScriptURL(input) {
        const u = new URL(dirty, document.baseURI);
        if (APPLICATION_CONFIG.scriptOrigins.includes(u.origin)) {
          return u.href;
        }
        throw new Error('Cannot load scripts from this origin');
      },
    });

    document.querySelector("#foo").innerHTML = myPolicy.createHTML(aValue);
    scriptElement.src = myPolicy.createScriptURL(
        'https://scripts.myapp.example/script.js');

|isHTML(value)|

    Returns true if value is an instance of |TrustedHTML <#trustedhtml>|
    and has an associated data <#trustedhtml-data> value set, false
    otherwise.

    Note: |is*| functions are used to check if a given object is truly a
    legitimate Trusted Type <#trusted-type> object (i.e. it was created
    via one of the configured policies). This is to be able to detect a
    forgery of the objects via e.g. Object.create <https://tc39.es/
    ecma262/multipage/fundamental-objects.html#sec-object.create> or
    prototype chains manipulation.

    <#is-html-example>

    const html = policy.createHTML('<div>');
    trustedTypes.isHTML(html); // true

    const fake = Object.create(TrustedHTML.prototype);
    trustedTypes.isHTML(fake); // false

    trustedTypes.isHTML("<div>plain string</div>"); // false

|isScript(value)|

    Returns true if value is an instance of |TrustedScript
    <#trustedscript>| and has an associated data <#trustedscript-data>
    value set, false otherwise.

|isScriptURL(value)|

    Returns true if value is an instance of |TrustedScriptURL
    <#trustedscripturl>| and has an associated data <#trustedscripturl-
    data> value set, false otherwise.

|getPropertyType(tagName, property, elementNs)|

    Allows the authors to check if a Trusted Type is required for a
    given |Element <https://dom.spec.whatwg.org/#element>|’s property
    (IDL attribute).

    This function returns the result of the following algorithm:

     1.

        Set localName to tagName in ASCII lowercase <https://
        infra.spec.whatwg.org/#ascii-lowercase>.

     2.

        If elementNs is null or an empty string, set elementNs to HTML
        namespace <https://infra.spec.whatwg.org/#html-namespace>.

     3.

        Let interface be the element interface <https://
        dom.spec.whatwg.org/#concept-element-interface> for localName
        and elementNs.

     4.

        Let expectedType be null.

     5.

        Find the row in the following table, where the first column is
        "*" or interface’s name, and property is in the second column.
        If a matching row is found, set expectedType to the interface’s
        name of the value of the third column.

        Element 	Property name 	TrustedType
        |HTMLIFrameElement <https://html.spec.whatwg.org/multipage/
        iframe-embed-object.html#htmliframeelement>| 	"srcdoc" 	|
        TrustedHTML <#trustedhtml>|
        |HTMLScriptElement <https://html.spec.whatwg.org/multipage/
        scripting.html#htmlscriptelement>| 	"innerText" 	|TrustedScript
        <#trustedscript>|
        |HTMLScriptElement <https://html.spec.whatwg.org/multipage/
        scripting.html#htmlscriptelement>| 	"src" 	|TrustedScriptURL
        <#trustedscripturl>|
        |HTMLScriptElement <https://html.spec.whatwg.org/multipage/
        scripting.html#htmlscriptelement>| 	"text" 	|TrustedScript
        <#trustedscript>|
        |HTMLScriptElement <https://html.spec.whatwg.org/multipage/
        scripting.html#htmlscriptelement>| 	"textContent" 	|
        TrustedScript <#trustedscript>|
        "*" 	"innerHTML" 	|TrustedHTML <#trustedhtml>|
        "*" 	"outerHTML" 	|TrustedHTML <#trustedhtml>|

     6.

        Return expectedType.

    <#get-property-type-example>

    trustedTypes.getPropertyType('div', 'innerHTML'); // "TrustedHTML"
    trustedTypes.getPropertyType('foo', 'bar'); // null

|getAttributeType(tagName, attribute, elementNs, attrNs)|

    Allows the authors to check if, (and if so, which) Trusted Type is
    required for a given |Element <https://dom.spec.whatwg.org/
    #element>|’s content attribute, such that later on the call to |
    Element.setAttribute| passes the correct argument type.

    This function returns the result of the following algorithm:

     1.

        Set localName to tagName in ASCII lowercase <https://
        infra.spec.whatwg.org/#ascii-lowercase>.

     2.

        Set attribute to attribute in ASCII lowercase <https://
        infra.spec.whatwg.org/#ascii-lowercase>.

     3.

        If elementNs is null or an empty string, set elementNs to HTML
        namespace <https://infra.spec.whatwg.org/#html-namespace>.

     4.

        If attrNs is an empty string, set attrNs to null.

     5.

        Let interface be the element interface <https://
        dom.spec.whatwg.org/#concept-element-interface> for localName
        and elementNs.

     6.

        Let expectedType be null.

     7.

        Set attributeData to the result of Get Trusted Type data for
        attribute <#abstract-opdef-get-trusted-type-data-for-attribute>
        algorithm, with the following arguments:

          *

            interface as element

          *

            attribute

          *

            attrNs

     8.

        If attributeData is not null, then set expectedType to the
        interface’s name of the value of the fourth member of attributeData.

     9.

        Return expectedType.

    <#get-attribute-type-example>

    trustedTypes.getAttributeType('script', 'src'); // "TrustedScriptURL"
    trustedTypes.getAttributeType('foo', 'bar'); // null

|emptyHTML|, of type TrustedHTML <#trustedhtml>, readonly

    is a |TrustedHTML <#trustedhtml>| object with its data
    <#trustedhtml-data> value set to an empty string.

<#empty-html-example>

anElement.innerHTML = trustedTypes.emptyHTML; // no need to create a policy

|emptyScript|, of type TrustedScript <#trustedscript>, readonly

    is a |TrustedScript <#trustedscript>| object with its data
    <#trustedscript-data> value set to an empty string.

Note: This object can be used to detect if the runtime environment has
support for dynamic code compilation. While native Trusted Types
implementation can support |eval(TrustedScript)|, it is impossible for a
polyfill to emulate that, as eval(TrustedScript) will return its input
without unwrapping and evaluating the code.

<#empty-script-example>

// With native Trusted Types support eval(trustedTypes.emptyScript) will execute and return falsy undefined.
// Without it, eval(trustedTypes.emptyScript) will return a truthy Object.
const supportsTS = !eval(trustedTypes.emptyScript);

eval(supportsTS ? myTrustedScriptObj : myTrustedScriptObj.toString());

|defaultPolicy|, of type TrustedTypePolicy <#trustedtypepolicy>,
readonly, nullable

    Returns the value of default policy <#trustedtypepolicyfactory-
    default-policy>.

<#defaultpolicy-example>

trustedTypes.defaultPolicy === null;  // true
const dp = trustedTypes.createPolicy('default', {});
trustedTypes.defaultPolicy === dp;  // true


        2.3.2. |TrustedTypePolicy|<#trusted-type-policy>

Policy objects implement a TrustedTypePolicy interface and define a
group of functions creating Trusted Type objects. Each of the |create*|
functions converts a string value to a given Trusted Type variant, or
throws a TypeError if a conversion of a given value is disallowed.

[Exposed <https://webidl.spec.whatwg.org/#Exposed>=(Window,Worker)]
interface TrustedTypePolicy <#trustedtypepolicy> {
  readonly attribute DOMString <https://webidl.spec.whatwg.org/#idl-DOMString> |name|;
  TrustedHTML <#trustedhtml> createHTML <#dom-trustedtypepolicy-createhtml>(DOMString <https://webidl.spec.whatwg.org/#idl-DOMString> |input|, any <https://webidl.spec.whatwg.org/#idl-any>... |arguments|);
  TrustedScript <#trustedscript> createScript <#dom-trustedtypepolicy-createscript>(DOMString <https://webidl.spec.whatwg.org/#idl-DOMString> |input|, any <https://webidl.spec.whatwg.org/#idl-any>... |arguments|);
  TrustedScriptURL <#trustedscripturl> createScriptURL <#dom-trustedtypepolicy-createscripturl>(DOMString <https://webidl.spec.whatwg.org/#idl-DOMString> |input|, any <https://webidl.spec.whatwg.org/#idl-any>... |arguments|);
};

Each policy has a name.

Each TrustedTypePolicy object has an associated |
TrustedTypePolicyOptions <#dictdef-trustedtypepolicyoptions>| options
object, describing the actual behavior of the policy.

|createHTML(input, ...arguments)|

    Returns the result of executing the Create a Trusted Type
    <#abstract-opdef-create-a-trusted-type> algorithm, with the
    following arguments:

    policy
        this <https://webidl.spec.whatwg.org/#this> value 
    trustedTypeName
        |"TrustedHTML"| 
    value
        input 
    arguments
        arguments 

|createScript(input, ...arguments)|

    Returns the result of executing the Create a Trusted Type
    <#abstract-opdef-create-a-trusted-type> algorithm, with the
    following arguments:

    policy
        this <https://webidl.spec.whatwg.org/#this> value 
    trustedTypeName
        |"TrustedScript"| 
    value
        input 
    arguments
        arguments 

|createScriptURL(input, ...arguments)|

    Returns the result of executing the Create a Trusted Type
    <#abstract-opdef-create-a-trusted-type> algorithm, with the
    following arguments:

    policy
        this <https://webidl.spec.whatwg.org/#this> value 
    trustedTypeName
        |"TrustedScriptURL"| 
    value
        input 
    arguments
        arguments 


        2.3.3. |TrustedTypePolicyOptions|<#trusted-type-policy-options>

This dictionary holds author-defined functions for converting string
values into trusted values. These functions do not create Trusted Type
<#trusted-type> object instances directly - this behavior is provided by
|TrustedTypePolicy <#trustedtypepolicy>|.

dictionary TrustedTypePolicyOptions <#dictdef-trustedtypepolicyoptions> {
   CreateHTMLCallback <#callbackdef-createhtmlcallback> |createHTML|;
   CreateScriptCallback <#callbackdef-createscriptcallback> |createScript|;
   CreateScriptURLCallback <#callbackdef-createscripturlcallback> |createScriptURL|;
};
callback |CreateHTMLCallback| = DOMString <https://webidl.spec.whatwg.org/#idl-DOMString>? (DOMString <https://webidl.spec.whatwg.org/#idl-DOMString> |input|, any <https://webidl.spec.whatwg.org/#idl-any>... |arguments|);
callback |CreateScriptCallback| = DOMString <https://webidl.spec.whatwg.org/#idl-DOMString>? (DOMString <https://webidl.spec.whatwg.org/#idl-DOMString> |input|, any <https://webidl.spec.whatwg.org/#idl-any>... |arguments|);
callback |CreateScriptURLCallback| = USVString <https://webidl.spec.whatwg.org/#idl-USVString>? (DOMString <https://webidl.spec.whatwg.org/#idl-DOMString> |input|, any <https://webidl.spec.whatwg.org/#idl-any>... |arguments|);


        2.3.4. Default policy<#default-policy-hdr>

/This section is not normative./

One of the policies, the policy with a name <#trustedtypepolicy-name>
|"default"|, is special; When an injection sink <#injection-sink> is
passed a string (instead of a Trusted Type object), this policy will be
implicitly called by the user agent with the non trusted string value,
Trusted Type of the sink and the sink type, respectively.

This allows the application to define a fallback behavior to use instead
of causing a violation. The intention is to allow the applications to
recover from an unexpected data flow, and sanitize the potentially
attacker-controlled string "as a last resort", or reject a value if a
safe value cannot be created. Errors thrown from within a policy are
propagated to the application.

If the default policy doesn’t exist, or if its appropriate |create*|
function returns /null/ or /undefined/, it will cause a CSP violation.
In the enforcing mode, an error will be thrown, but in report-only the
original value passed to the default policy will be used.

Note: This optional behavior allows for introducing Trusted Type
enforcement <#enforcement> to applications that are still using legacy
code that uses injection sinks. Needless to say, this policy should
necessarily be defined with very strict rules not to bypass the security
restrictions in unknown parts of the application. In an extreme case, a
lax, no-op default policy defeats all the benefits of using Trusted
Types to protect access to injection sinks <#injection-sink>. If
possible, authors should resort to a default policy in a transitional
period only, use it to detect and rewrite their dependencies that use
injection sinks unsafely and eventually phase out the usage of the
default policy entirely.

Note: See § 3.4 Get Trusted Type compliant string <#get-trusted-type-
compliant-string-algorithm> for details on how the default policy is
applied.

<#default-policy-example>

// Content-Security-Policy: trusted-types default; require-trusted-types-for 'script'

trustedTypes.createPolicy('default', {
  createScriptURL: (value, type, sink) => {
    console.log("Please refactor.");
    return value + '?default-policy-used&type=' + encodeURIComponent(type) +
          '&sink=' + encodeURIComponent(sink);
  }
});

aScriptElement.src = "https://cdn.example/script.js";
// Please refactor.
console.log(aScriptElement.src);
// https://cdn.example/script.js?default-policy-used&type=TrustedScriptURL&sink=HTMLScriptElement%20src


      2.4. Enforcement<#enforcement-hdr>

Note: Enforcement is the process of checking that a value has an
appropriate type before it reaches an injection sink <#injection-sink>.

The JavaScript API that allows authors to create policies and Trusted
Types objects from them is always available (via |trustedTypes <#dom-
windoworworkerglobalscope-trustedtypes>|). Since injection sinks
<#injection-sink> stringify their security sensitive arguments, and
Trusted Type <#trusted-type> objects stringify to their inner string
values, this allows the authors to use Trusted Types in place of strings.

To secure the access to injection sinks <#injection-sink>, on top of the
JavaScript code using the Trusted Types, the user agent needs to enforce
them i.e. assert that the injection sinks from a given group are /never/
called with string values, and Trusted Type values are used instead.
This section describes how authors may control this enforcing behavior.

Authors may also control their policies <#policies> by specifying rules
around policy creation.


        2.4.1. Content Security Policy<#content-security-policy-hdr>

Applications may control Trusted Type enforcement via configuring a
Content Security Policy <https://www.w3.org/TR/CSP3/#policy-delivery>.
This document defines new directives that correspond to Trusted Types
rules. The require-trusted-types-for <#require-trusted-types-for-
directive> directive specifies the injection sinks <#injection-sink>
groups, for which the types should be required. The trusted-types
<#trusted-types-csp-directive> directive controls how policies
<#policies> can be created.

Note: Using CSP mechanisms allows the authors to prepare their
application for enforcing Trusted Types via using the Content-Security-
Policy-Report-Only <https://www.w3.org/TR/CSP3/#header-content-security-
policy-report-only> HTTP Response header.

Note: Most of the enforcement rules are defined as modifications of the
algorithms in other specifications, see § 4 Integrations <#integrations>.


    3. Algorithms<#algorithms>


      3.1. Create a Trusted Type Policy<#create-trusted-type-policy-
      algorithm>

To create a |TrustedTypePolicy <#trustedtypepolicy>|, given a |
TrustedTypePolicyFactory <#trustedtypepolicyfactory>| (factory), a
string (policyName), |TrustedTypePolicyOptions <#dictdef-
trustedtypepolicyoptions>| dictionary (options), and a global object
<https://html.spec.whatwg.org/multipage/webappapis.html#concept-realm-
global> (global) run these steps:

 1.

    Let allowedByCSP be the result of executing Should Trusted Type
    policy creation be blocked by Content Security Policy? <#abstract-
    opdef-should-trusted-type-policy-creation-be-blocked-by-content-
    security-policy> algorithm with global, policyName and factory’s
    created policy names <#trustedtypepolicyfactory-created-policy-
    names> value.

 2.

    If allowedByCSP is |"Blocked"|, throw a TypeError and abort further
    steps.

 3.

    If policyName is |default| and the factory’s default policy
    <#trustedtypepolicyfactory-default-policy> value is not null, throw
    a TypeError and abort further steps.

 4.

    Let policy be a new |TrustedTypePolicy <#trustedtypepolicy>| object.

 5.

    Set policy’s |name| property value to policyName.

 6.

    Set policy’s options <#trustedtypepolicy-options> value to
    «[ "createHTML" -> options["|createHTML <#dom-
    trustedtypepolicyoptions-createhtml>|", "createScript" -> options["|
    createScript <#dom-trustedtypepolicyoptions-createscript>|",
    "createScriptURL" -> options["|createScriptURL <#dom-
    trustedtypepolicyoptions-createscripturl>|" ]».

 7.

    If the policyName is |default|, set the factory’s default policy
    <#trustedtypepolicyfactory-default-policy> value to policy.

 8.

    Append <https://infra.spec.whatwg.org/#set-append> policyName to
    factory’s created policy names <#trustedtypepolicyfactory-created-
    policy-names>.

 9.

    Return policy.


      3.2. Create a Trusted Type<#create-a-trusted-type-algorithm>

Given a |TrustedTypePolicy <#trustedtypepolicy>| policy, a type name
trustedTypeName, a string value and a list arguments, execute the
following steps:

 1.

    Let policyValue be the result of executing Get Trusted Type policy
    value <#abstract-opdef-get-trusted-type-policy-value> with the same
    arguments as this algorithm and additionally true as throwIfMissing.

 2.

    If the algorithm threw an error, rethrow the error and abort the
    following steps.

 3.

    Let dataString be the result of stringifying policyValue.

 4.

    If policyValue is null or undefined, set dataString to the empty string.

 5.

    Return a new instance of an interface with a type name
    trustedTypeName, with its associated data value set to dataString.


      3.3. Get Trusted Type policy value<#get-trusted-type-policy-value-
      algorithm>

Given a |TrustedTypePolicy <#trustedtypepolicy>| policy, a type name
trustedTypeName, a string value, a list arguments, and a boolean
throwIfMissing, execute the following steps:

 1.

    Let functionName be a function name for the given trustedTypeName,
    based on the following table:

    Function name 	Trusted Type name
    "createHTML" 	"TrustedHTML"
    "createScript" 	"TrustedScript"
    "createScriptURL" 	"TrustedScriptURL"

 2.

    Let function be policy’s options <#trustedtypepolicy-
    options>[functionName].

 3.

    If function is |null|, then:

     1.

        If throwIfMissing throw a TypeError.

     2.

        Else return |null|.

 4.

    Let args be « value ».

 5.

    Append <https://infra.spec.whatwg.org/#set-append> each item in
    arguments to args.

 6.

    Let policyValue be the result of invoking <https://
    webidl.spec.whatwg.org/#invoke-a-callback-function> function with
    args and |"rethrow"|.

 7.

    Return policyValue.


      3.4. Get Trusted Type compliant string<#get-trusted-type-
      compliant-string-algorithm>

This algorithm will return a string that can be used with an injection
sink <#injection-sink>, optionally unwrapping it from a matching Trusted
Type <#trusted-type>. It will ensure that the Trusted Type enforcement
<#enforcement> rules were respected.

Given a |TrustedType <#typedefdef-trustedtype>| type (expectedType), a
global object <https://html.spec.whatwg.org/multipage/
webappapis.html#concept-realm-global> (global), |TrustedType
<#typedefdef-trustedtype>| or a string (input), a string (sink) and a
string (sinkGroup), run these steps:

 1.

    If input is an instance of expectedType, return stringified input
    and abort these steps.

 2.

    Let requireTrustedTypes be the result of executing Does sink type
    require trusted types? <#abstract-opdef-does-sink-type-require-
    trusted-types> algorithm, passing global, sinkGroup, and true.

 3.

    If requireTrustedTypes is |false|, return stringified input and
    abort these steps.

 4.

    Let convertedInput be the result of executing Process value with a
    default policy <#abstract-opdef-process-value-with-a-default-policy>
    with the same arguments as this algorithm.

 5.

    If the algorithm threw an error, rethrow the error and abort the
    following steps.

 6.

    If convertedInput is |null| or |undefined|, execute the following steps:

     1.

        Let disposition be the result of executing Should sink type
        mismatch violation be blocked by Content Security Policy?
        <#abstract-opdef-should-sink-type-mismatch-violation-be-blocked-
        by-content-security-policy> algorithm, passing global,
        stringified input as source, sinkGroup and sink.

     2.

        If disposition is |“Allowed”|, return stringified input and
        abort further steps.

        Note: This step assures that the default policy rejection will
        be reported, but ignored in a report-only mode.

     3.

        Throw a TypeError and abort further steps.

 7.

    Assert: convertedInput is an instance of expectedType.

 8.

    Return stringified convertedInput.


      3.5. Process value with a default policy<#process-value-with-a-
      default-policy-algorithm>

This algorithm routes a value to be assigned to an injection sink
<#injection-sink> through a default policy, should one exist.

Given a |TrustedType <#typedefdef-trustedtype>| type (expectedType), a
global object <https://html.spec.whatwg.org/multipage/
webappapis.html#concept-realm-global> (global), |TrustedType
<#typedefdef-trustedtype>| or a string (input), and a string (sink), run
these steps:

 1.

    Let defaultPolicy be the value of global’s trusted type policy
    factory <#window-trusted-type-policy-factory>’s default policy
    <#trustedtypepolicyfactory-default-policy>.

 2.

    Let policyValue be the result of executing Get Trusted Type policy
    value <#abstract-opdef-get-trusted-type-policy-value>, with the
    following arguments:

      *

        defaultPolicy as policy

      *

        stringified input as value

      *

        expectedType’s type name as trustedTypeName

      *

        « trustedTypeName, sink » as arguments

      *

        false as throwIfMissing

 3.

    If the algorithm threw an error, rethrow the error and abort the
    following steps.

 4.

    If policyValue is null or undefined, return policyValue.

 5.

    Let dataString be the result of stringifying policyValue.

 6.

    Return a new instance of an interface with a type name
    trustedTypeName, with its associated data value set to dataString.


      3.6. Prepare the script text<#prepare-script-text>

Given an |HTMLScriptElement <https://html.spec.whatwg.org/multipage/
scripting.html#htmlscriptelement>| or |SVGScriptElement <https://
www.w3.org/TR/SVG2/interact.html#InterfaceSVGScriptElement>| (script),
this algorithm performs the following steps:

 1.

    Let sink be "|HTMLScriptElement text|" if script is an |
    HTMLScriptElement <https://html.spec.whatwg.org/multipage/
    scripting.html#htmlscriptelement>|; otherwise "|SVGScriptElement text|".

 2.

    If script’s script text <#htmlscriptelement-script-text> value is
    not equal to its child text content <https://dom.spec.whatwg.org/
    #concept-child-text-content>, set script’s script text
    <#htmlscriptelement-script-text> to the result of executing Get
    Trusted Type compliant string <#abstract-opdef-get-trusted-type-
    compliant-string>, with the following arguments:

      *

        |TrustedScriptURL <#trustedscripturl>| as expectedType,

      *

        script’s |Document <https://dom.spec.whatwg.org/#document>|’s
        relevant global object <https://html.spec.whatwg.org/multipage/
        webappapis.html#concept-relevant-global> as global,

      *

        script’s child text content <https://dom.spec.whatwg.org/
        #concept-child-text-content> attribute value as input,

      *

        sink,

      *

        |'script'| as sinkGroup.

    If the algorithm threw an error, rethrow the error.


      3.7. Get Trusted Types-compliant attribute value<#validate-
      attribute-mutation>

To get Trusted Types-compliant attribute value given a string
attributeName, string attributeNs, |Element <https://
dom.spec.whatwg.org/#element>| element and |TrustedType <#typedefdef-
trustedtype>| or a string newValue, perform the following steps:

 1.

    If attributeNs is the empty string, set attributeNs to null.

 2.

    Set attributeData to the result of Get Trusted Type data for
    attribute <#abstract-opdef-get-trusted-type-data-for-attribute>
    algorithm, with the following arguments:

      *

        element

      *

        attributeName

      *

        attributeNs

 3.

    If attributeData is null, then:

     1.

        If newValue is a string, return newValue.

     2.

        Assert <https://infra.spec.whatwg.org/#assert>: newValue is |
        TrustedHTML <#trustedhtml>| or |TrustedScript <#trustedscript>|
        or |TrustedScriptURL <#trustedscripturl>|.

     3.

        Return value’s associated data.

 4.

    Let expectedType be the value of the fourth member of attributeData.

 5.

    Let sink be the value of the fifth member of attributeData.

 6.

    Return the result of executing Get Trusted Type compliant string
    <#abstract-opdef-get-trusted-type-compliant-string> with the
    following arguments:

      *

        expectedType

      *

        newValue as input

      *

        element’s node document <https://dom.spec.whatwg.org/#concept-
        node-document>’s relevant global object <https://
        html.spec.whatwg.org/multipage/webappapis.html#concept-relevant-
        global> as global

      *

        sink

      *

        'script' as sinkGroup

If the algorithm threw an error, rethrow the error.


      3.8. Get Trusted Type data for attribute<#get-trusted-type-data-
      for-attribute>

To Get Trusted Type data for attribute given element, attribute,
attributeNs, perform the following steps:

<#issue-15b3006c> The event handler content attribute <https://
html.spec.whatwg.org/#event-handler-content-attributes> concept used
below is ambiguous. This spec needs a better mechanism to identify event
handler attributes. See https://github.com/w3c/trusted-types/issues/520
<https://github.com/w3c/trusted-types/issues/520>.

 1.

    Let data be null.

 2.

    If attributeNs is null, « HTML namespace <https://
    infra.spec.whatwg.org/#html-namespace>, SVG namespace <https://
    infra.spec.whatwg.org/#svg-namespace>, MathML namespace <https://
    infra.spec.whatwg.org/#mathml-namespace> » contains <https://
    infra.spec.whatwg.org/#list-contain> element’s namespace <https://
    dom.spec.whatwg.org/#concept-element-namespace>, and attribute is
    the name of an event handler content attribute <https://
    html.spec.whatwg.org/#event-handler-content-attributes>:

     1.

        Return (|Element <https://dom.spec.whatwg.org/#element>|, null,
        attribute, |TrustedScript <#trustedscript>|, "Element " +
        attribute).

 3.

    Find the row in the following table, where element is in the first
    column, attributeNs is in the second column, and attribute is in the
    third column. If a matching row is found, set data to that row.

    Element 	Attribute namespace 	Attribute local name 	TrustedType 	Sink
    |HTMLIFrameElement <https://html.spec.whatwg.org/multipage/iframe-
    embed-object.html#htmliframeelement>| 	null 	"srcdoc" 	|TrustedHTML
    <#trustedhtml>| 	"HTMLIFrameElement srcdoc"
    |HTMLScriptElement <https://html.spec.whatwg.org/multipage/
    scripting.html#htmlscriptelement>| 	null 	"src" 	|TrustedScriptURL
    <#trustedscripturl>| 	"HTMLScriptElement src"
    |SVGScriptElement <https://www.w3.org/TR/SVG2/
    interact.html#InterfaceSVGScriptElement>| 	null 	"href" 	|
    TrustedScriptURL <#trustedscripturl>| 	"SVGScriptElement href"
    |SVGScriptElement <https://www.w3.org/TR/SVG2/
    interact.html#InterfaceSVGScriptElement>| 	XLink namespace <https://
    infra.spec.whatwg.org/#xlink-namespace> 	"href" 	|TrustedScriptURL
    <#trustedscripturl>| 	"SVGScriptElement href"

 4.

    Return data.


    4. Integrations<#integrations>

typedef (TrustedHTML <#trustedhtml> or TrustedScript <#trustedscript> or TrustedScriptURL <#trustedscripturl>) |TrustedType|;


      4.1. Integration with HTML<#integration-with-html>

|Window <https://html.spec.whatwg.org/multipage/nav-history-
apis.html#window>| and |Worker <https://html.spec.whatwg.org/multipage/
workers.html#worker>| objects have a trusted type policy factory, which
is a |TrustedTypePolicyFactory <#trustedtypepolicyfactory>| object.


        4.1.1. Extensions to the WindowOrWorkerGlobalScope
        interface<#extensions-to-the-windoworworkerglobalscope-interface>

This document extends the |WindowOrWorkerGlobalScope <https://
html.spec.whatwg.org/multipage/
webappapis.html#windoworworkerglobalscope>| interface defined by HTML <#biblio-html5>:

partial interface mixin WindowOrWorkerGlobalScope <https://html.spec.whatwg.org/multipage/webappapis.html#windoworworkerglobalscope> {
  readonly attribute TrustedTypePolicyFactory <#trustedtypepolicyfactory> |trustedTypes|;
};

The |trustedTypes <#dom-windoworworkerglobalscope-trustedtypes>| getter
steps are to return this <https://webidl.spec.whatwg.org/#this>’s
relevant global object <https://html.spec.whatwg.org/multipage/
webappapis.html#concept-relevant-global>’s trusted type policy factory
<#integration-with-html>.


        4.1.2. Enforcement for scripts<#enforcement-in-scripts>

This document modifies how |HTMLScriptElement <https://
html.spec.whatwg.org/multipage/scripting.html#htmlscriptelement>| child
text content <https://dom.spec.whatwg.org/#concept-child-text-content>
can be set to allow applications to control dynamically created scripts.
It does so by adding the |innerText <https://html.spec.whatwg.org/
multipage/dom.html#dom-innertext>| and |textContent <https://
dom.spec.whatwg.org/#dom-node-textcontent>| attributes directly on |
HTMLScriptElement <https://html.spec.whatwg.org/multipage/
scripting.html#htmlscriptelement>|. The behavior of the attributes
remains the same as in their original counterparts, apart from the
additional behavior of calling Get Trusted Type compliant string
<#abstract-opdef-get-trusted-type-compliant-string>.

Note: Using these IDL attributes is the recommended way of dynamically
setting the URL or a text of a script. Manipulating attribute nodes or
text nodes directly will call a default policy on the final value when
the script is prepared.

partial interface HTMLScriptElement <https://html.spec.whatwg.org/multipage/scripting.html#htmlscriptelement> {
 [CEReactions <https://html.spec.whatwg.org/multipage/custom-elements.html#cereactions>] attribute (TrustedScript <#trustedscript> or [LegacyNullToEmptyString <https://webidl.spec.whatwg.org/#LegacyNullToEmptyString>] DOMString <https://webidl.spec.whatwg.org/#idl-DOMString>) |innerText|;
 [CEReactions <https://html.spec.whatwg.org/multipage/custom-elements.html#cereactions>] attribute (TrustedScript <#trustedscript> or DOMString <https://webidl.spec.whatwg.org/#idl-DOMString>)? |textContent|;
 [CEReactions <https://html.spec.whatwg.org/multipage/custom-elements.html#cereactions>] attribute (TrustedScriptURL <#trustedscripturl> or USVString <https://webidl.spec.whatwg.org/#idl-USVString>) |src|;
 [CEReactions <https://html.spec.whatwg.org/multipage/custom-elements.html#cereactions>] attribute (TrustedScript <#trustedscript> or DOMString <https://webidl.spec.whatwg.org/#idl-DOMString>) |text|;
};


          4.1.2.1. Slots with trusted values<#slots-with-trusted-values>

An |HTMLScriptElement <https://html.spec.whatwg.org/multipage/
scripting.html#htmlscriptelement>| and |SVGScriptElement <https://
www.w3.org/TR/SVG2/interact.html#InterfaceSVGScriptElement>| have:

an associated string script text.

    A string, containing the body of the script to execute that was set
    through a compliant sink. Equivalent to script’s child text content
    <https://dom.spec.whatwg.org/#concept-child-text-content>. Initially
    an empty string.


          4.1.2.2. The |innerText <#dom-htmlscriptelement-innertext>|
          IDL attribute<#the-innerText-idl-attribute>

The |innerText <#dom-htmlscriptelement-innertext>| setter steps are:

 1.

    Let value be the result of calling Get Trusted Type compliant string
    <#abstract-opdef-get-trusted-type-compliant-string> with |
    TrustedScript <#trustedscript>|, this <https://
    webidl.spec.whatwg.org/#this>’s relevant global object <https://
    html.spec.whatwg.org/multipage/webappapis.html#concept-relevant-
    global>, the given value, |HTMLScriptElement innerText|, and |script|.

 2.

    Set this <https://webidl.spec.whatwg.org/#this>’s script text
    <#htmlscriptelement-script-text> value to value.

 3.

    Run set the inner text steps <https://html.spec.whatwg.org/#set-the-
    inner-text-steps> with this <https://webidl.spec.whatwg.org/#this>
    and value.

The |innerText <#dom-htmlscriptelement-innertext>| getter steps are:

 1.

    Return the result of running get the text steps <https://
    html.spec.whatwg.org/#get-the-text-steps> with this <https://
    webidl.spec.whatwg.org/#this>.


          4.1.2.3. The |textContent <#dom-htmlscriptelement-
          textcontent>| IDL attribute<#the-textContent-idl-attribute>

The |textContent <#dom-htmlscriptelement-textcontent>| setter steps are
to, if the given value is null, act as if it was the empty string
instead, and then do as described below:

 1.

    Let value be the result of calling Get Trusted Type compliant string
    <#abstract-opdef-get-trusted-type-compliant-string> with |
    TrustedScript <#trustedscript>|, this <https://
    webidl.spec.whatwg.org/#this>’s relevant global object <https://
    html.spec.whatwg.org/multipage/webappapis.html#concept-relevant-
    global>, the given value, |HTMLScriptElement textContent|, and |script|.

 2.

    Set this <https://webidl.spec.whatwg.org/#this>’s script text
    <#htmlscriptelement-script-text> value to value.

 3.

    Run set text content <https://dom.spec.whatwg.org/#set-text-content>
    with this <https://webidl.spec.whatwg.org/#this> and value.

The |textContent <#dom-htmlscriptelement-textcontent>| getter steps are:

 1.

    Return the result of running get text content <https://
    dom.spec.whatwg.org/#get-text-content> with this <https://
    webidl.spec.whatwg.org/#this>.

Note: Currently we don’t add an equivalent to |SVGScriptElement
<https://www.w3.org/TR/SVG2/interact.html#InterfaceSVGScriptElement>|.
See https://github.com/w3c/trusted-types/issues/512 <https://github.com/
w3c/trusted-types/issues/512>.


          4.1.2.4. The |text <#dom-htmlscriptelement-text>| IDL
          attribute<#the-text-idl-attribute>

Update the |text <#dom-htmlscriptelement-text>| setter steps algorithm
as follows.

 1. Let value be the result of calling Get Trusted Type compliant string
    <#abstract-opdef-get-trusted-type-compliant-string> with |
    TrustedScript <#trustedscript>|, this <https://
    webidl.spec.whatwg.org/#this>’s relevant global object <https://
    html.spec.whatwg.org/multipage/webappapis.html#concept-relevant-
    global>, the given value, |HTMLScriptElement text|, and |script|.
 2. Set this <https://webidl.spec.whatwg.org/#this>’s script text
    <#htmlscriptelement-script-text> value to the given value.
 3.

    String replace all <https://dom.spec.whatwg.org/#string-replace-all>
    with the given value within this <https://webidl.spec.whatwg.org/#this>.


          4.1.2.5. The |src <#dom-htmlscriptelement-src>| IDL
          attribute<#the-src-idl-attribute>

The |src <#dom-htmlscriptelement-src>| setter steps are:

 1. Let value be the result of calling Get Trusted Type compliant string
    <#abstract-opdef-get-trusted-type-compliant-string> with |
    TrustedScriptURL <#trustedscripturl>|, this <https://
    webidl.spec.whatwg.org/#this>’s relevant global object <https://
    html.spec.whatwg.org/multipage/webappapis.html#concept-relevant-
    global>, the given value, |HTMLScriptElement src|, and |script|.
 2. Set this <https://webidl.spec.whatwg.org/#this>’s src <https://
    html.spec.whatwg.org/#attr-script-src> content attribute to value. 


          4.1.2.6. Setting slot values from parser<#setting-slot-values-
          from-parser>

This document modifies the HTML parser to set the script text
<#htmlscriptelement-script-text> value when the script is created.

Modify the The text insertion mode <https://html.spec.whatwg.org/
#parsing-main-incdata> algorithm as follows:

<#scriptEndTag>An end tag whose tag name is "script"

    ...

    Set script’s script text <#htmlscriptelement-script-text> value to
    its child text content <https://dom.spec.whatwg.org/#concept-child-
    text-content>.

    If the active speculative HTML parser is null, then prepare the
    script element script. This might cause some script to execute,
    which might cause new characters to be inserted into the tokenizer,
    and might cause the tokenizer to output more tokens, resulting in a
    reentrant invocation of the parser <https://html.spec.whatwg.org/
    #nestedParsing>.

    ...

<#issue-d6e90040> The above algorithm doesn’t account for the case when
the script element’s content is changed mid-parse. Implementors must
ensure they protect against this case. See https://github.com/w3c/
trusted-types/issues/507 <https://github.com/w3c/trusted-types/issues/507>.

<#issue-c38e8ff0> There’s no proper definition for the processing of SVG
script elements. However, implementations must apply a similar change to
the processing of |SVGScriptElement <https://www.w3.org/TR/SVG2/
interact.html#InterfaceSVGScriptElement>|s.


          4.1.2.7. Slot value verification<#slot-value-verification>

The first few steps of the prepare the script element <https://
html.spec.whatwg.org/#prepare-the-script-element> algorithm are modified
as follows:

 1.

    If el’s already started <https://html.spec.whatwg.org/#already-
    started> is true, then return.

 2.

    Let parser document be el’s parser document <https://
    html.spec.whatwg.org/#parser-document>.

 3.

    Set el’s parser document <https://html.spec.whatwg.org/#parser-
    document> to null.

    This is done so that if parser-inserted |script <https://
    html.spec.whatwg.org/#the-script-element>| elements fail to run when
    the parser tries to run them, e.g. because they are empty or specify
    an unsupported scripting language, another script can later mutate
    them and cause them to run again.

 4.

    If parser document is non-null and el does not have an |async
    <https://html.spec.whatwg.org/#attr-script-async>| attribute, then
    set el’s force async <https://html.spec.whatwg.org/#script-force-
    async> to true.

    This is done so that if a parser-inserted |script <https://
    html.spec.whatwg.org/#the-script-element>| element fails to run when
    the parser tries to run it, but it is later executed after a script
    dynamically updates it, it will execute in an async fashion even if
    the |async <https://html.spec.whatwg.org/#attr-script-async>|
    attribute isn’t set.

 5.

    Execute the Prepare the script text <#abstract-opdef-prepare-the-
    script-text> algorithm on el. If that algorithm threw an error, then
    return.

 6.

    Let source text be el’s child text content <https://
    dom.spec.whatwg.org/#concept-child-text-content>. script text
    <#htmlscriptelement-script-text> value.

 7. ... 

<#issue-c38e8ff0①> There’s no proper definition for the processing of
SVG script elements. However, implementations must apply a similar
change to the processing of |SVGScriptElement <https://www.w3.org/TR/
SVG2/interact.html#InterfaceSVGScriptElement>|s.


      4.2. Integration with DOM<#integration-with-dom>

Note: See https://github.com/whatwg/dom/pull/1268 <https://github.com/
whatwg/dom/pull/1268> which upstreams this integration.


      4.3. Integration with Content Security Policy<#integration-with-
      content-security-policy>


        4.3.1. require-trusted-types-for directive<#require-trusted-
        types-for-csp-directive>

This document defines /require-trusted-types-for/ - a new Content
Security Policy directive <https://www.w3.org/TR/CSP3/#directives>.

require-trusted-types-for <#require-trusted-types-for-directive>
directive configures the Trusted Types framework for all the injection
sinks <#injection-sink> of certain groups in a current realm <https://
html.spec.whatwg.org/multipage/webappapis.html#concept-global-object-
realm>. Specifically, it defines what should be the behavior when a
string value is passed to an injection sink <#injection-sink> of a given
group (i.e. should the type-based enforcement be enabled for such sinks).

Note: Currently, only the enforcement for § 2.1.1 DOM XSS injection
sinks <#dom-xss-injection-sinks> is specified.

The syntax for the directive’s name <https://www.w3.org/TR/CSP3/
#directive-name> and value <https://www.w3.org/TR/CSP3/#directive-value>
is described by the following ABNF:

directive-name = "require-trusted-types-for"
directive-value = trusted-types-sink-group-keyword <#trusted-types-sink-group-keyword> *( required-ascii-whitespace <https://w3c.github.io/webappsec-csp/#grammardef-required-ascii-whitespace> trusted-types-sink-group-keyword <#trusted-types-sink-group-keyword>)
trusted-types-sink-group-keyword = "'" trusted-types-sink-group <#trusted-types-sink-group> "'"
trusted-types-sink-group = "script"

<#require-tt-for-script-header> Enforce Trusted Types at the DOM XSS
injection sinks.

Content-Security-Policy: require-trusted-types-for 'script'


          4.3.1.1. |require-trusted-types-for| Pre-Navigation
          check<#require-trusted-types-for-pre-navigation-check>

Given a request <https://fetch.spec.whatwg.org/#concept-request>
(request), a string navigation type and a policy <https://www.w3.org/TR/
CSP3/#content-security-policy-object> (policy), this algorithm returns
|"Blocked"| if a navigation violates the require-trusted-types-for
<#require-trusted-types-for-directive> directive’s constraints and
|"Allowed"| otherwise. This constitutes the require-trusted-types-for
<#require-trusted-types-for-directive> directive’s pre-navigation check
<https://www.w3.org/TR/CSP3/#directive-pre-navigation-check>:

Note: This algorithm assures that the code to be executed by a
navigation to a |javascript:| URL will have to pass through a default
policy <#default-policy-explanation>’s |createScript| function, in
addition to all other restrictions imposed by other CSP directives.

 1.

    If request’s url <https://fetch.spec.whatwg.org/#concept-request-
    url>’s scheme <https://url.spec.whatwg.org/#concept-url-scheme> is
    not |"javascript"|, return |"Allowed"| and abort further steps.

 2.

    Let urlString be the result of running the URL serializer <https://
    url.spec.whatwg.org/#concept-url-serializer> on request’s url
    <https://fetch.spec.whatwg.org/#concept-request-url>.

 3.

    Let encodedScriptSource be the result of removing the leading
    |"javascript:"| from urlString.

 4.

    Let convertedScriptSource be the result of executing Process value
    with a default policy <#abstract-opdef-process-value-with-a-default-
    policy> algorithm, with the following arguments:

      *

        |TrustedScript <#trustedscript>| as expectedType

      *

        request’s clients <https://fetch.spec.whatwg.org/#concept-
        request-client>’s global object <https://html.spec.whatwg.org/
        multipage/webappapis.html#concept-settings-object-global> as global

      *

        encodedScriptSource as input

      *

        |"Location href"| as sink

    If that algorithm threw an error or convertedScriptSource is not a |
    TrustedScript <#trustedscript>| object, return "Blocked" and abort
    further steps.

 5.

    Set urlString to be the result of prepending |"javascript:"| to
    stringified convertedScriptSource.

 6.

    Let newURL be the result of running the URL parser <https://
    url.spec.whatwg.org/#concept-url-parser> on urlString. If the parser
    returns a failure, return |"Blocked"| and abort further steps.

 7.

    Set request’s url <https://fetch.spec.whatwg.org/#concept-request-
    url> to newURL.

    Note: No other CSP directives operate on |javascript:| URLs in a
    pre-navigation check. Other directives that check javascript: URLs
    will operate on the modified URL later, in the inline check
    <https://www.w3.org/TR/CSP3/#directive-inline-check>.

 8.

    Return |"Allowed"|.


        4.3.2. trusted-types directive<#trusted-types-csp-directive>

This document defines /trusted-types/ - a new Content Security Policy
directive <https://www.w3.org/TR/CSP3/#directives>. The trusted-types
<#trusted-types-directive> directive controls the creation of Trusted
Type policies <#policies>.

The syntax for the directive’s name <https://www.w3.org/TR/CSP3/
#directive-name> and value <https://www.w3.org/TR/CSP3/#directive-value>
is described by the following ABNF:

directive-name = "trusted-types"
directive-value = serialized-tt-configuration <#serialized-tt-configuration>
serialized-tt-configuration = ( tt-expression <#tt-expression> *( required-ascii-whitespace <https://w3c.github.io/webappsec-csp/#grammardef-required-ascii-whitespace> tt-expression <#tt-expression> ) )
tt-expression = tt-policy-name <#tt-policy-name>  / tt-keyword <#tt-keyword> / tt-wildcard <#tt-wildcard>
tt-wildcard = "*"
tt-policy-name = 1*( ALPHA <https://tools.ietf.org/html/rfc5234#appendix-B.1> / DIGIT <https://tools.ietf.org/html/rfc5234#appendix-B.1> / "-" / "#" / "=" / "_" / "/" / "@" / "." / "%")
tt-keyword = "'allow-duplicates'" / "'none'"

<#allowlist-of-policy-names-in-header> Types are enforced at sinks, and
only two policies may be created: “one” and “two”.

Content-Security-Policy: require-trusted-types-for 'script'; trusted-types one two

<#header-that-allows-no-policy-names> An empty directive <https://
www.w3.org/TR/CSP3/#directives> value <https://www.w3.org/TR/CSP3/
#directive-value> indicates policies may not be created, and sinks
expect Trusted Type values, i.e. no DOM XSS injection sinks <#injection-
sink> can be used at all.

Content-Security-Policy: trusted-types; require-trusted-types-for 'script'

The keyword |'none'| may be used to explicitly express the above:

<#header-with-none-that-allows-no-policy-names>

Content-Security-Policy: trusted-types 'none'; require-trusted-types-for 'script'

Keyword |'allow-duplicates'| allows for creating policies with a name
that was already used.

<#allow-duplicates-in-header>

Content-Security-Policy: trusted-types foo bar 'allow-duplicates'

If the policy named |default| is present in the list, it refers to the
default policy <#trustedtypepolicyfactory-default-policy>. All strings
passed to injection sinks <#injection-sink> will be passed through it
instead of being rejected outright.

<#default-in-header>

Content-Security-Policy: trusted-types one two default


        4.3.3. Does sink type require trusted types?<#does-sink-require-
        trusted-types>

Given a global object <https://html.spec.whatwg.org/multipage/
webappapis.html#concept-realm-global> (global), a string (sinkGroup) and
a boolean (includeReportOnlyPolicies), this algorithm returns |true| if
the injection sink <#injection-sink> requires a Trusted Type <#trusted-
type>, and |false| otherwise.

 1.

    For each policy in global’s CSP list <https://www.w3.org/TR/CSP3/
    #global-object-csp-list>:

     1.

        If policy’s directive set <https://www.w3.org/TR/CSP3/#policy-
        directive-set> does not contain a directive <https://www.w3.org/
        TR/CSP3/#directives> whose name <https://www.w3.org/TR/CSP3/
        #directive-name> is |"require-trusted-types-for"|, skip to the
        next policy.

     2.

        Let directive be the policy’s directive set’s directive
        <https://www.w3.org/TR/CSP3/#directives> whose name is
        |"require-trusted-types-for"|

     3.

        If directive’s value <https://www.w3.org/TR/CSP3/#directive-
        value> does not contain a trusted-types-sink-group <#trusted-
        types-sink-group> which is a match for sinkGroup, skip to the
        next policy.

     4.

        Let enforced be true if policy’s disposition <https://
        www.w3.org/TR/CSP3/#policy-disposition> is |"enforce"|, and
        false otherwise.

     5.

        If enforced is true, return true.

     6.

        If includeReportOnlyPolicies is true, return true.

 2.

    Return false.


        4.3.4. Should sink type mismatch violation be blocked by Content
        Security Policy?<#should-block-sink-type-mismatch>

Given a global object <https://html.spec.whatwg.org/multipage/
webappapis.html#concept-realm-global> (global), a string (sink), a
string (sinkGroup) and a string (source) this algorithm returns
|"Blocked"| if the injection sink <#injection-sink> requires a Trusted
Type <#trusted-type>, and |"Allowed"| otherwise.

 1.

    Let result be |"Allowed"|.

 2.

    Let sample be source.

 3.

    If sink is |"Function"|, then:

     1.

        If sample starts with |"function anonymous"|, strip that from
        sample.

     2.

        Otherwise if sample starts with |"async function anonymous"|,
        strip that from sample.

     3.

        Otherwise if sample starts with |"function* anonymous"|, strip
        that from sample.

     4.

        Otherwise if sample starts with |"async function* anonymous"|,
        strip that from sample.

 4.

    For each policy in global’s CSP list <https://www.w3.org/TR/CSP3/
    #global-object-csp-list>:

     1.

        If policy’s directive set <https://www.w3.org/TR/CSP3/#policy-
        directive-set> does not contain a directive <https://www.w3.org/
        TR/CSP3/#directives> whose name <https://www.w3.org/TR/CSP3/
        #directive-name> is |"require-trusted-types-for"|, skip to the
        next policy.

     2.

        Let directive be the policy’s directive set’s directive
        <https://www.w3.org/TR/CSP3/#directives> whose name is
        |"require-trusted-types-for"|

     3.

        If directive’s value <https://www.w3.org/TR/CSP3/#directive-
        value> does not contain a trusted-types-sink-group <#trusted-
        types-sink-group> which is a match for sinkGroup, skip to the
        next policy.

     4.

        Let violation be the result of executing Create a violation
        object for global, policy, and directive <https://www.w3.org/TR/
        CSP3/#create-violation-for-global> on global, policy and
        |"require-trusted-types-for"|

     5.

        Set violation’s resource <https://www.w3.org/TR/CSP3/#violation-
        resource> to |"trusted-types-sink"|.

     6.

        Let trimmedSample be the substring of sample, containing its
        first 40 characters.

     7.

        Set violation’s sample <https://www.w3.org/TR/CSP3/#violation-
        sample> to be the result of concatenating <https://
        infra.spec.whatwg.org/#string-concatenate> the list « sink,
        trimmedSample « using |"|"| as a separator.

     8.

        Execute Report a violation <https://www.w3.org/TR/CSP3/#report-
        violation> on violation.

     9.

        If policy’s disposition <https://www.w3.org/TR/CSP3/#policy-
        disposition> is |"enforce"|, then set result to |"Blocked"|.

 5.

    Return result.


        4.3.5. Should Trusted Type policy creation be blocked by Content
        Security Policy?<#should-block-create-policy>

Given a global object <https://html.spec.whatwg.org/multipage/
webappapis.html#concept-realm-global> (global), a string (policyName)
and a list of strings (createdPolicyNames), this algorithm returns
|"Blocked"| if the |TrustedTypePolicy <#trustedtypepolicy>| should not
be created, and |"Allowed"| otherwise.

 1.

    Let result be |"Allowed"|.

 2.

    For each policy in global’s CSP list <https://www.w3.org/TR/CSP3/
    #global-object-csp-list>:

     1.

        Let createViolation be false.

     2.

        If policy’s directive set <https://www.w3.org/TR/CSP3/#policy-
        directive-set> does not contain a directive <https://www.w3.org/
        TR/CSP3/#directives> which name is |"trusted-types"|, skip to
        the next policy.

     3.

        Let directive be the policy’s directive set’s directive
        <https://www.w3.org/TR/CSP3/#directives> which name is
        |"trusted-types"|

     4.

        If directive’s value <https://www.w3.org/TR/CSP3/#directive-
        value> only contains a tt-keyword <#tt-keyword> which is a match
        for a value |'none'|, set createViolation to true.

        Note: Like in other CSP directives, 'none' keyword will be
        ignored if other keywords or policy names are present.

     5.

        If createdPolicyNames contains policyName and directive’s value
        <https://www.w3.org/TR/CSP3/#directive-value> does not contain a
        tt-keyword <#tt-keyword> which is a match for a value |'allow-
        duplicates'|, set createViolation to true.

        Note: |trusted-types policyA policyB 'allow-duplicates'| allows
        authors to create policies with duplicated names.

     6.

        If directive’s value <https://www.w3.org/TR/CSP3/#directive-
        value> does not contain a tt-policy-name <#tt-policy-name>,
        which value is policyName, and directive’s value <https://
        www.w3.org/TR/CSP3/#directive-value> does not contain a tt-
        wildcard <#tt-wildcard>, set createViolation to true.

        Note: |trusted-types *| allows authors to create policies with
        any unique names. To allow for multiple policies with the same
        name, use |trusted-types * 'allow-duplicates'| or don’t set the
        |trusted-types| directive at all.

     7.

        If createViolation is false, skip to the next policy.

     8.

        Let violation be the result of executing Create a violation
        object for global, policy, and directive <https://www.w3.org/TR/
        CSP3/#create-violation-for-global> on global, policy and
        |"trusted-types"|

     9.

        Set violation’s resource <https://www.w3.org/TR/CSP3/#violation-
        resource> to |"trusted-types-policy"|.

    10.

        Set violation’s sample <https://www.w3.org/TR/CSP3/#violation-
        sample> to the substring of policyName, containing its first 40
        characters.

    11.

        Execute Report a violation <https://www.w3.org/TR/CSP3/#report-
        violation> on violation.

    12.

        If policy’s disposition <https://www.w3.org/TR/CSP3/#policy-
        disposition> is |"enforce"|, then set result to |"Blocked"|.

 3.

    Return result.


    5. Security Considerations<#security-considerations>

Trusted Types are not intended to protect access to injection sinks
<#injection-sink> in an actively malicious execution environment. It’s
assumed that the application is written by non-malicious authors; the
intent is to prevent developer mistakes that could result in security
bugs, and not to defend against first-party malicious code actively
trying to bypass policy restrictions. Below we enumerate already
identified vectors that remain risky even in environments with enforced
Trusted Types.


      5.1. Cross-document vectors<#cross-document-vectors>

While the code running in a window in which Trusted Types are enforced
cannot dynamically create nodes that would bypass the policy
restrictions, it is possible that such nodes can be imported or adopted
from documents in other windows, that don’t have the same set of
restrictions. In essence - it is possible to bypass Trusted Types if a
malicious author creates a setup in which a restricted document colludes
with an unrestricted one. In an extreme case, the restricted document
might create a |Blob <https://www.w3.org/TR/FileAPI/#dfn-Blob>| from
strings and navigate to it.

CSP propagation rules (see Content Security Policy 3 § 7.8 CSP
Inheriting to avoid bypasses <https://www.w3.org/TR/CSP3/#security-
inherit-csp> partially address this issue, as new local scheme <https://
fetch.spec.whatwg.org/#local-scheme> documents will inherit the same set
of restrictions, so - for example - |script-src| restrictions could be
used to make sure injections into |Blob <https://www.w3.org/TR/FileAPI/
#dfn-Blob>| contents would not execute scripts. To address this issue
comprehensively, other mechanisms like Origin Policy <https://
wicg.github.io/origin-policy/> should be used to ensure that baseline
security rules are applied for the whole origin.


      5.2. Deprecated features<#deprecated-features>

Some long-deprecated and rarely used platform features are not subject
to Trusted Types, and could potentially be used by malicious authors to
overcome the restrictions:

  *

    HTML imports <https://wicg.github.io/webcomponents/spec/imports/>


      5.3. Script gadgets<#script-gadgets>

While Trusted Types logic is called on many operations that results in
creating DOM trees from string, it should not be treated as a mechanism
for guarding all DOM tree creation in a document. This is important
especially in the presence of script gadgets <https://github.com/google/
security-research-pocs/tree/master/script-gadgets>, where an application
reacts to contents of usually benign DOM elements or attributes.
Developers using DOM API directly can trigger such gadgets without using
Trusted Types. However, in order for the gadget to trigger DOM XSS, it
needs to obtain a Trusted Type value via a policy. Authors need to
ascertain that the data passed to Trusted Type policies is indeed
trustworthy, if the policy rules don’t enforce constraints or validate
the data themselves.


      5.4. Best practices for policy design<#best-practices-for-policy-
      design>

Trusted Types limit the scope of the code that can introduce
vulnerabilities via injection sinks <#injection-sink> to the
implementation of policies <#policies>. In this design, insecure
policies can still expose injection sinks <#injection-sink> to untrusted
data. Special emphasis needs to be taken by use policies that are either
secure for all possible inputs, or limit the access to insecure
policies, such that they are only called with non-attacker controlled
inputs.

As policies are custom JavaScript code, they may be written in a way
that heavily depends on a global state. We advise against this. The
policies should be self-contained as much as possible. All objects that
may alter security decisions a policy makes effectively /become/ the
policy, and should be guarded & reviewed together.

<#issue-2eb927d2> Refer to the external document on secure policy design.


    6. Privacy Considerations<#privacy-considerations>

The specification may partially observe and alter the behavior of
scripts running within the application, e.g. causing certain operations
on injection sinks <#injection-sink> to fail, or monitoring and changing
their effect with a default policy <#trustedtypepolicyfactory-default-
policy>. However, early-running scripts already have this capability by
overriding appropriate property descriptors.

It is possible for the application to report violations of Trusted Types
restrictions. Violation reports would include the trimmed-down payload
passed to the injection sink (40 characters, including the sink name).
These feature is reusing the Content Security Policy reporting mechanisms.


    7. Implementation Considerations<#implementation-considerations>


      7.1. Vendor-specific Extensions and Addons<#vendor-specific-
      extensions-and-addons>

Restriction imposed by Trusted Types SHOULD NOT interfere with the
operation of user-agent features like addons, extensions, or
bookmarklets. These kinds of features generally advance the user’s
priority over page authors, as espoused in [html-design-principles] <#biblio-html-design-principles>. Specifically, extensions SHOULD be
able to pass strings to the injection sinks <#injection-sink> without
triggering default policy <#trustedtypepolicyfactory-default-policy>
execution, violation generation, or the rejection of the value.


    Conformance<#w3c-conformance>


      Document conventions<#w3c-conventions>

Conformance requirements are expressed with a combination of descriptive
assertions and RFC 2119 terminology. The key words “MUST”, “MUST NOT”,
“REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”,
“MAY”, and “OPTIONAL” in the normative parts of this document are to be
interpreted as described in RFC 2119. However, for readability, these
words do not appear in all uppercase letters in this specification.

All of the text of this specification is normative except sections
explicitly marked as non-normative, examples, and notes. [RFC2119] <#biblio-rfc2119>

Examples in this specification are introduced with the words “for
example” or are set apart from the normative text with |
class="example"|, like this:

<#w3c-example>

This is an example of an informative example.

Informative notes begin with the word “Note” and are set apart from the
normative text with |class="note"|, like this:

Note, this is an informative note.

Tests

Tests relating to the content of this specification may be documented in
“Tests” blocks like this one. Any such block is non-normative.

------------------------------------------------------------------------


      Conformant Algorithms<#w3c-conformant-algorithms>

Requirements phrased in the imperative as part of algorithms (such as
"strip any leading space characters" or "return false and abort these
steps") are to be interpreted with the meaning of the key word ("must",
"should", "may", etc) used in introducing the algorithm.

Conformance requirements phrased as algorithms or specific steps can be
implemented in any manner, so long as the end result is equivalent. In
particular, the algorithms defined in this specification are intended to
be easy to understand and are not intended to be performant.
Implementers are encouraged to optimize.


    Index<#index>


      Terms defined by this specification<#index-defined-here>

  * Create a Trusted Type <#abstract-opdef-create-a-trusted-type>, in § 3.2
  * Create a Trusted Type Policy <#abstract-opdef-create-a-trusted-type-
    policy>, in § 3.1
  * created policy names <#trustedtypepolicyfactory-created-policy-
    names>, in § 2.3.1
  * createHTML <#dom-trustedtypepolicyoptions-createhtml>, in § 2.3.3
  * CreateHTMLCallback <#callbackdef-createhtmlcallback>, in § 2.3.3
  * createHTML(input) <#dom-trustedtypepolicy-createhtml>, in § 2.3.2
  * createHTML(input, ...arguments) <#dom-trustedtypepolicy-createhtml>,
    in § 2.3.2
  * createPolicy(policyName) <#dom-trustedtypepolicyfactory-
    createpolicy>, in § 2.3.1
  * createPolicy(policyName, policyOptions) <#dom-
    trustedtypepolicyfactory-createpolicy>, in § 2.3.1
  * createScript <#dom-trustedtypepolicyoptions-createscript>, in § 2.3.3
  * CreateScriptCallback <#callbackdef-createscriptcallback>, in § 2.3.3
  * createScript(input) <#dom-trustedtypepolicy-createscript>, in § 2.3.2
  * createScript(input, ...arguments) <#dom-trustedtypepolicy-
    createscript>, in § 2.3.2
  * createScriptURL <#dom-trustedtypepolicyoptions-createscripturl>, in
    § 2.3.3
  * CreateScriptURLCallback <#callbackdef-createscripturlcallback>, in
    § 2.3.3
  * createScriptURL(input) <#dom-trustedtypepolicy-createscripturl>, in
    § 2.3.2
  * createScriptURL(input, ...arguments) <#dom-trustedtypepolicy-
    createscripturl>, in § 2.3.2
  * data
      o dfn for TrustedHTML <#trustedhtml-data>, in § 2.2.1
      o dfn for TrustedScript <#trustedscript-data>, in § 2.2.2
      o dfn for TrustedScriptURL <#trustedscripturl-data>, in § 2.2.3 
  * default policy <#trustedtypepolicyfactory-default-policy>, in § 2.3.1
  * defaultPolicy <#dom-trustedtypepolicyfactory-defaultpolicy>, in § 2.3.1
  * default-policy-explanation <#default-policy-explanation>, in § 2.3.4
  * Does sink type require trusted types? <#abstract-opdef-does-sink-
    type-require-trusted-types>, in § 4.3.3
  * emptyHTML <#dom-trustedtypepolicyfactory-emptyhtml>, in § 2.3.1
  * emptyScript <#dom-trustedtypepolicyfactory-emptyscript>, in § 2.3.1
  * Enforcement <#enforcement>, in § 2.4
  * getAttributeType(tagName, attribute) <#dom-trustedtypepolicyfactory-
    getattributetype>, in § 2.3.1
  * getAttributeType(tagName, attribute, elementNs) <#dom-
    trustedtypepolicyfactory-getattributetype>, in § 2.3.1
  * getAttributeType(tagName, attribute, elementNs, attrNs) <#dom-
    trustedtypepolicyfactory-getattributetype>, in § 2.3.1
  * getPropertyType(tagName, property) <#dom-trustedtypepolicyfactory-
    getpropertytype>, in § 2.3.1
  * getPropertyType(tagName, property, elementNs) <#dom-
    trustedtypepolicyfactory-getpropertytype>, in § 2.3.1
  * Get Trusted Type compliant string <#abstract-opdef-get-trusted-type-
    compliant-string>, in § 3.4
  * Get Trusted Type data for attribute <#abstract-opdef-get-trusted-
    type-data-for-attribute>, in § 3.8
  * Get Trusted Type policy value <#abstract-opdef-get-trusted-type-
    policy-value>, in § 3.3
  * get Trusted Types-compliant attribute value <#abstract-opdef-get-
    trusted-types-compliant-attribute-value>, in § 3.7
  * injection sink <#injection-sink>, in § 2.1
  * innerText <#dom-htmlscriptelement-innertext>, in § 4.1.2
  * isHTML(value) <#dom-trustedtypepolicyfactory-ishtml>, in § 2.3.1
  * isScriptURL(value) <#dom-trustedtypepolicyfactory-isscripturl>, in
    § 2.3.1
  * isScript(value) <#dom-trustedtypepolicyfactory-isscript>, in § 2.3.1
  * name
      o attribute for TrustedTypePolicy <#dom-trustedtypepolicy-name>,
        in § 2.3.2
      o dfn for TrustedTypePolicy <#trustedtypepolicy-name>, in § 2.3.2 
  * options <#trustedtypepolicy-options>, in § 2.3.2
  * Policies <#policies>, in § 2.3
  * Prepare the script text <#abstract-opdef-prepare-the-script-text>,
    in § 3.6
  * Process value with a default policy <#abstract-opdef-process-value-
    with-a-default-policy>, in § 3.5
  * require-trusted-types-for-directive <#require-trusted-types-for-
    directive>, in § 4.3.1
  * script text <#htmlscriptelement-script-text>, in § 4.1.2.1
  * serialized-tt-configuration <#serialized-tt-configuration>, in § 4.3.2
  * Should sink type mismatch violation be blocked by Content Security
    Policy? <#abstract-opdef-should-sink-type-mismatch-violation-be-
    blocked-by-content-security-policy>, in § 4.3.4
  * Should Trusted Type policy creation be blocked by Content Security
    Policy? <#abstract-opdef-should-trusted-type-policy-creation-be-
    blocked-by-content-security-policy>, in § 4.3.5
  * src <#dom-htmlscriptelement-src>, in § 4.1.2
  * stringificationbehavior
      o dfn for TrustedHTML <#trustedhtml-stringification-behavior>, in
        § 2.2.1
      o dfn for TrustedScript <#trustedscript-stringification-behavior>,
        in § 2.2.2
      o dfn for TrustedScriptURL <#trustedscripturl-stringification-
        behavior>, in § 2.2.3 
  * text <#dom-htmlscriptelement-text>, in § 4.1.2
  * textContent <#dom-htmlscriptelement-textcontent>, in § 4.1.2
  * toJSON()
      o method for TrustedHTML <#dom-trustedhtml-tojson>, in § 2.2.1
      o method for TrustedScript <#dom-trustedscript-tojson>, in § 2.2.2
      o method for TrustedScriptURL <#dom-trustedscripturl-tojson>, in
        § 2.2.3 
  * TrustedHTML <#trustedhtml>, in § 2.2.1
  * TrustedScript <#trustedscript>, in § 2.2.2
  * TrustedScriptURL <#trustedscripturl>, in § 2.2.3
  * Trusted Type <#trusted-type>, in § 2.2
  * TrustedType <#typedefdef-trustedtype>, in § 4
  * TrustedTypePolicy <#trustedtypepolicy>, in § 2.3.2
  * trusted type policy factory <#window-trusted-type-policy-factory>,
    in § 4.1
  * TrustedTypePolicyFactory <#trustedtypepolicyfactory>, in § 2.3.1
  * TrustedTypePolicyOptions <#dictdef-trustedtypepolicyoptions>, in
    § 2.3.3
  * trustedTypes <#dom-windoworworkerglobalscope-trustedtypes>, in § 4.1.1
  * trusted-types-directive <#trusted-types-directive>, in § 4.3.2
  * trusted-types-sink-group <#trusted-types-sink-group>, in § 4.3.1
  * trusted-types-sink-group-keyword <#trusted-types-sink-group-
    keyword>, in § 4.3.1
  * tt-expression <#tt-expression>, in § 4.3.2
  * tt-keyword <#tt-keyword>, in § 4.3.2
  * tt-policy-name <#tt-policy-name>, in § 4.3.2
  * tt-wildcard <#tt-wildcard>, in § 4.3.2 


      Terms defined by reference<#index-defined-elsewhere>

  * [CSP3] defines the following terms:
      o content security policy object
      o Content-Security-Policy-Report-Only
      o CSP list
      o directive set
      o directives
      o disposition
      o inline check
      o name
      o pre-navigation check
      o resource
      o sample
      o script-src
      o value 
  * [DOM] defines the following terms:
      o Document
      o Element
      o child text content
      o element interface
      o element namespace
      o get text content
      o node document
      o set text content
      o string replace all
      o textContent 
  * [Fetch] defines the following terms:
      o client
      o local scheme
      o request
      o URL 
  * [FileAPI] defines the following terms:
      o Blob 
  * [HTML] defines the following terms:
      o CEReactions
      o HTMLIFrameElement
      o HTMLScriptElement
      o Window
      o WindowOrWorkerGlobalScope
      o Worker
      o event handler content attribute
      o get the text steps
      o global object (for environment settings object)
      o global object (for realm)
      o innerHTML (for Element)
      o innerHTML (for ShadowRoot)
      o innerText
      o outerHTML
      o parseFromString(string, type)
      o prepare the script element
      o realm
      o reentrant invocation of the parser
      o relevant global object
      o set the inner text steps
      o src
      o The text insertion mode 
  * [INFRA] defines the following terms:
      o append
      o ASCII lowercase
      o assert
      o concatenate
      o HTML namespace
      o list contain
      o MathML namespace
      o ordered set
      o SVG namespace
      o XLink namespace 
  * [SVG2] defines the following terms:
      o SVGScriptElement 
  * [URL] defines the following terms:
      o scheme
      o URL parser
      o URL serializer 
  * [WEBIDL] defines the following terms:
      o DOMString
      o Exposed
      o LegacyNullToEmptyString
      o USVString
      o any
      o boolean
      o invoke
      o this 


    References<#references>


      Normative References<#normative>

[CSP3]
    Mike West; Antonio Sartori. Content Security Policy Level 3
    <https://www.w3.org/TR/CSP3/>. 30 June 2025. WD. URL: https://
    www.w3.org/TR/CSP3/ <https://www.w3.org/TR/CSP3/> 
[DOM]
    Anne van Kesteren. DOM Standard <https://dom.spec.whatwg.org/>.
    Living Standard. URL: https://dom.spec.whatwg.org/ <https://
    dom.spec.whatwg.org/> 
[Fetch]
    Anne van Kesteren. Fetch Standard <https://fetch.spec.whatwg.org/>.
    Living Standard. URL: https://fetch.spec.whatwg.org/ <https://
    fetch.spec.whatwg.org/> 
[FileAPI]
    Marijn Kruisselbrink. File API <https://www.w3.org/TR/FileAPI/>. 4
    December 2024. WD. URL: https://www.w3.org/TR/FileAPI/ <https://
    www.w3.org/TR/FileAPI/> 
[HTML]
    Anne van Kesteren; et al. HTML Standard <https://
    html.spec.whatwg.org/multipage/>. Living Standard. URL: https://
    html.spec.whatwg.org/multipage/ <https://html.spec.whatwg.org/
    multipage/> 
[INFRA]
    Anne van Kesteren; Domenic Denicola. Infra Standard <https://
    infra.spec.whatwg.org/>. Living Standard. URL: https://
    infra.spec.whatwg.org/ <https://infra.spec.whatwg.org/> 
[RFC2119]
    S. Bradner. Key words for use in RFCs to Indicate Requirement Levels
    <https://datatracker.ietf.org/doc/html/rfc2119>. March 1997. Best
    Current Practice. URL: https://datatracker.ietf.org/doc/html/rfc2119
    <https://datatracker.ietf.org/doc/html/rfc2119> 
[SVG2]
    Amelia Bellamy-Royds; et al. Scalable Vector Graphics (SVG) 2
    <https://www.w3.org/TR/SVG2/>. 4 October 2018. CR. URL: https://
    www.w3.org/TR/SVG2/ <https://www.w3.org/TR/SVG2/> 
[URL]
    Anne van Kesteren. URL Standard <https://url.spec.whatwg.org/>.
    Living Standard. URL: https://url.spec.whatwg.org/ <https://
    url.spec.whatwg.org/> 
[WEBIDL]
    Edgar Chen; Timothy Gu. Web IDL Standard <https://
    webidl.spec.whatwg.org/>. Living Standard. URL: https://
    webidl.spec.whatwg.org/ <https://webidl.spec.whatwg.org/> 


      Informative References<#informative>

[ECMASCRIPT]
    ECMAScript Language Specification <https://tc39.es/ecma262/
    multipage/>. URL: https://tc39.es/ecma262/multipage/ <https://
    tc39.es/ecma262/multipage/> 
[HTML-DESIGN-PRINCIPLES]
    Anne van Kesteren; Maciej Stachowiak. HTML Design Principles
    <https://www.w3.org/TR/html-design-principles/>. 26 November 2007.
    WD. URL: https://www.w3.org/TR/html-design-principles/ <https://
    www.w3.org/TR/html-design-principles/> 
[HTML5]
    Ian Hickson; et al. HTML5 <https://www.w3.org/TR/html5/>. 27 March
    2018. REC. URL: https://www.w3.org/TR/html5/ <https://www.w3.org/TR/
    html5/> 


    Issues Index<#issues-index>

The event handler content attribute <https://html.spec.whatwg.org/
#event-handler-content-attributes> concept used below is ambiguous. This
spec needs a better mechanism to identify event handler attributes. See
https://github.com/w3c/trusted-types/issues/520 <https://github.com/w3c/
trusted-types/issues/520>. ↵ <#issue-15b3006c>
The above algorithm doesn’t account for the case when the script
element’s content is changed mid-parse. Implementors must ensure they
protect against this case. See https://github.com/w3c/trusted-types/
issues/507 <https://github.com/w3c/trusted-types/issues/507>. ↵ <#issue-
d6e90040>
There’s no proper definition for the processing of SVG script elements.
However, implementations must apply a similar change to the processing
of |SVGScriptElement <https://www.w3.org/TR/SVG2/
interact.html#InterfaceSVGScriptElement>|s. ↵ <#issue-c38e8ff0>
There’s no proper definition for the processing of SVG script elements.
However, implementations must apply a similar change to the processing
of |SVGScriptElement <https://www.w3.org/TR/SVG2/
interact.html#InterfaceSVGScriptElement>|s. ↵ <#issue-c38e8ff0①>
Refer to the external document on secure policy design. ↵ <#issue-2eb927d2>
*⚠*MDN

TrustedHTML/toJSON <https://developer.mozilla.org/en-US/docs/Web/API/
TrustedHTML/toJSON>

In only one current engine.

FirefoxNoneSafariNoneChrome90+
------------------------------------------------------------------------
Opera?Edge90+
------------------------------------------------------------------------
Edge (Legacy)?IENone
------------------------------------------------------------------------
Firefox for Android?iOS Safari?Chrome for Android?Android WebView?Samsung Internet?Opera Mobile?

*⚠*MDN

TrustedHTML/toString <https://developer.mozilla.org/en-US/docs/Web/API/
TrustedHTML/toString>

In only one current engine.

FirefoxNoneSafariNoneChrome83+
------------------------------------------------------------------------
Opera?Edge83+
------------------------------------------------------------------------
Edge (Legacy)?IENone
------------------------------------------------------------------------
Firefox for Android?iOS Safari?Chrome for Android?Android WebView?Samsung Internet?Opera Mobile?

*⚠*MDN

TrustedHTML <https://developer.mozilla.org/en-US/docs/Web/API/TrustedHTML>

In only one current engine.

FirefoxNoneSafariNoneChrome83+
------------------------------------------------------------------------
Opera?Edge83+
------------------------------------------------------------------------
Edge (Legacy)?IENone
------------------------------------------------------------------------
Firefox for Android?iOS Safari?Chrome for Android?Android WebView?Samsung Internet?Opera Mobile?

*⚠*MDN

TrustedScript/toJSON <https://developer.mozilla.org/en-US/docs/Web/API/
TrustedScript/toJSON>

In only one current engine.

FirefoxNoneSafariNoneChrome90+
------------------------------------------------------------------------
Opera?Edge90+
------------------------------------------------------------------------
Edge (Legacy)?IENone
------------------------------------------------------------------------
Firefox for Android?iOS Safari?Chrome for Android?Android WebView?Samsung Internet?Opera Mobile?

*⚠*MDN

TrustedScript/toString <https://developer.mozilla.org/en-US/docs/Web/
API/TrustedScript/toString>

In only one current engine.

FirefoxNoneSafariNoneChrome83+
------------------------------------------------------------------------
Opera?Edge83+
------------------------------------------------------------------------
Edge (Legacy)?IENone
------------------------------------------------------------------------
Firefox for Android?iOS Safari?Chrome for Android?Android WebView?Samsung Internet?Opera Mobile?

TrustedScriptURL/toString <https://developer.mozilla.org/en-US/docs/Web/
API/TrustedScriptURL/toString>

In only one current engine.

FirefoxNoneSafariNoneChrome83+
------------------------------------------------------------------------
Opera?Edge83+
------------------------------------------------------------------------
Edge (Legacy)?IENone
------------------------------------------------------------------------
Firefox for Android?iOS Safari?Chrome for Android?Android WebView?Samsung Internet?Opera Mobile?

*⚠*MDN

TrustedScript <https://developer.mozilla.org/en-US/docs/Web/API/
TrustedScript>

In only one current engine.

FirefoxNoneSafariNoneChrome83+
------------------------------------------------------------------------
Opera?Edge83+
------------------------------------------------------------------------
Edge (Legacy)?IENone
------------------------------------------------------------------------
Firefox for Android?iOS Safari?Chrome for Android?Android WebView?Samsung Internet?Opera Mobile?

*⚠*MDN

TrustedScriptURL/toJSON <https://developer.mozilla.org/en-US/docs/Web/
API/TrustedScriptURL/toJSON>

In only one current engine.

FirefoxNoneSafariNoneChrome90+
------------------------------------------------------------------------
Opera?Edge90+
------------------------------------------------------------------------
Edge (Legacy)?IENone
------------------------------------------------------------------------
Firefox for Android?iOS Safari?Chrome for Android?Android WebView?Samsung Internet?Opera Mobile?

*⚠*MDN

TrustedScriptURL <https://developer.mozilla.org/en-US/docs/Web/API/
TrustedScriptURL>

In only one current engine.

FirefoxNoneSafariNoneChrome83+
------------------------------------------------------------------------
Opera?Edge83+
------------------------------------------------------------------------
Edge (Legacy)?IENone
------------------------------------------------------------------------
Firefox for Android?iOS Safari?Chrome for Android?Android WebView?Samsung Internet?Opera Mobile?

*⚠*MDN

TrustedTypePolicy/createHTML <https://developer.mozilla.org/en-US/docs/
Web/API/TrustedTypePolicy/createHTML>

In only one current engine.

FirefoxNoneSafariNoneChrome83+
------------------------------------------------------------------------
Opera?Edge83+
------------------------------------------------------------------------
Edge (Legacy)?IENone
------------------------------------------------------------------------
Firefox for Android?iOS Safari?Chrome for Android?Android WebView?Samsung Internet?Opera Mobile?

*⚠*MDN

TrustedTypePolicy/createScript <https://developer.mozilla.org/en-US/
docs/Web/API/TrustedTypePolicy/createScript>

In only one current engine.

FirefoxNoneSafariNoneChrome83+
------------------------------------------------------------------------
Opera?Edge83+
------------------------------------------------------------------------
Edge (Legacy)?IENone
------------------------------------------------------------------------
Firefox for Android?iOS Safari?Chrome for Android?Android WebView?Samsung Internet?Opera Mobile?

*⚠*MDN

TrustedTypePolicy/createScriptURL <https://developer.mozilla.org/en-US/
docs/Web/API/TrustedTypePolicy/createScriptURL>

In only one current engine.

FirefoxNoneSafariNoneChrome83+
------------------------------------------------------------------------
Opera?Edge83+
------------------------------------------------------------------------
Edge (Legacy)?IENone
------------------------------------------------------------------------
Firefox for Android?iOS Safari?Chrome for Android?Android WebView?Samsung Internet?Opera Mobile?

*⚠*MDN

TrustedTypePolicy/name <https://developer.mozilla.org/en-US/docs/Web/
API/TrustedTypePolicy/name>

In only one current engine.

FirefoxNoneSafariNoneChrome83+
------------------------------------------------------------------------
Opera?Edge83+
------------------------------------------------------------------------
Edge (Legacy)?IENone
------------------------------------------------------------------------
Firefox for Android?iOS Safari?Chrome for Android?Android WebView?Samsung Internet?Opera Mobile?

*⚠*MDN

TrustedTypePolicy <https://developer.mozilla.org/en-US/docs/Web/API/
TrustedTypePolicy>

In only one current engine.

FirefoxNoneSafariNoneChrome83+
------------------------------------------------------------------------
Opera?Edge83+
------------------------------------------------------------------------
Edge (Legacy)?IENone
------------------------------------------------------------------------
Firefox for Android?iOS Safari?Chrome for Android?Android WebView?Samsung Internet?Opera Mobile?

*⚠*MDN

TrustedTypePolicyFactory/createPolicy <https://developer.mozilla.org/en-
US/docs/Web/API/TrustedTypePolicyFactory/createPolicy>

In only one current engine.

FirefoxNoneSafariNoneChrome83+
------------------------------------------------------------------------
Opera?Edge83+
------------------------------------------------------------------------
Edge (Legacy)?IENone
------------------------------------------------------------------------
Firefox for Android?iOS Safari?Chrome for Android?Android WebView?Samsung Internet?Opera Mobile?

*⚠*MDN

TrustedTypePolicyFactory/defaultPolicy <https://developer.mozilla.org/
en-US/docs/Web/API/TrustedTypePolicyFactory/defaultPolicy>

In only one current engine.

FirefoxNoneSafariNoneChrome83+
------------------------------------------------------------------------
Opera?Edge83+
------------------------------------------------------------------------
Edge (Legacy)?IENone
------------------------------------------------------------------------
Firefox for Android?iOS Safari?Chrome for Android?Android WebView?Samsung Internet?Opera Mobile?

*⚠*MDN

TrustedTypePolicyFactory/emptyHTML <https://developer.mozilla.org/en-US/
docs/Web/API/TrustedTypePolicyFactory/emptyHTML>

In only one current engine.

FirefoxNoneSafariNoneChrome83+
------------------------------------------------------------------------
Opera?Edge83+
------------------------------------------------------------------------
Edge (Legacy)?IENone
------------------------------------------------------------------------
Firefox for Android?iOS Safari?Chrome for Android?Android WebView?Samsung Internet?Opera Mobile?

*⚠*MDN

TrustedTypePolicyFactory/emptyScript <https://developer.mozilla.org/en-
US/docs/Web/API/TrustedTypePolicyFactory/emptyScript>

In only one current engine.

FirefoxNoneSafariNoneChrome83+
------------------------------------------------------------------------
Opera?Edge83+
------------------------------------------------------------------------
Edge (Legacy)?IENone
------------------------------------------------------------------------
Firefox for Android?iOS Safari?Chrome for Android?Android WebView?Samsung Internet?Opera Mobile?

*⚠*MDN

TrustedTypePolicyFactory/getAttributeType <https://
developer.mozilla.org/en-US/docs/Web/API/TrustedTypePolicyFactory/
getAttributeType>

In only one current engine.

FirefoxNoneSafariNoneChrome83+
------------------------------------------------------------------------
Opera?Edge83+
------------------------------------------------------------------------
Edge (Legacy)?IENone
------------------------------------------------------------------------
Firefox for Android?iOS Safari?Chrome for Android?Android WebView?Samsung Internet?Opera Mobile?

*⚠*MDN

TrustedTypePolicyFactory/getPropertyType <https://developer.mozilla.org/
en-US/docs/Web/API/TrustedTypePolicyFactory/getPropertyType>

In only one current engine.

FirefoxNoneSafariNoneChrome83+
------------------------------------------------------------------------
Opera?Edge83+
------------------------------------------------------------------------
Edge (Legacy)?IENone
------------------------------------------------------------------------
Firefox for Android?iOS Safari?Chrome for Android?Android WebView?Samsung Internet?Opera Mobile?

*⚠*MDN

TrustedTypePolicyFactory/isHTML <https://developer.mozilla.org/en-US/
docs/Web/API/TrustedTypePolicyFactory/isHTML>

In only one current engine.

FirefoxNoneSafariNoneChrome83+
------------------------------------------------------------------------
Opera?Edge83+
------------------------------------------------------------------------
Edge (Legacy)?IENone
------------------------------------------------------------------------
Firefox for Android?iOS Safari?Chrome for Android?Android WebView?Samsung Internet?Opera Mobile?

*⚠*MDN

TrustedTypePolicyFactory/isScript <https://developer.mozilla.org/en-US/
docs/Web/API/TrustedTypePolicyFactory/isScript>

In only one current engine.

FirefoxNoneSafariNoneChrome83+
------------------------------------------------------------------------
Opera?Edge83+
------------------------------------------------------------------------
Edge (Legacy)?IENone
------------------------------------------------------------------------
Firefox for Android?iOS Safari?Chrome for Android?Android WebView?Samsung Internet?Opera Mobile?

*⚠*MDN

TrustedTypePolicyFactory/isScriptURL <https://developer.mozilla.org/en-
US/docs/Web/API/TrustedTypePolicyFactory/isScriptURL>

In only one current engine.

FirefoxNoneSafariNoneChrome83+
------------------------------------------------------------------------
Opera?Edge83+
------------------------------------------------------------------------
Edge (Legacy)?IENone
------------------------------------------------------------------------
Firefox for Android?iOS Safari?Chrome for Android?Android WebView?Samsung Internet?Opera Mobile?

*⚠*MDN

TrustedTypePolicyFactory <https://developer.mozilla.org/en-US/docs/Web/
API/TrustedTypePolicyFactory>

In only one current engine.

FirefoxNoneSafariNoneChrome83+
------------------------------------------------------------------------
Opera?Edge83+
------------------------------------------------------------------------
Edge (Legacy)?IENone
------------------------------------------------------------------------
Firefox for Android?iOS Safari?Chrome for Android?Android WebView?Samsung Internet?Opera Mobile?

*⚠*MDN

Headers/Content-Security-Policy/require-trusted-types-for <https://
developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-
Policy/require-trusted-types-for>

In only one current engine.

FirefoxNoneSafariNoneChrome83+
------------------------------------------------------------------------
Opera?Edge83+
------------------------------------------------------------------------
Edge (Legacy)?IENone
------------------------------------------------------------------------
Firefox for Android?iOS Safari?Chrome for Android?Android WebView?Samsung Internet?Opera Mobile?

*⚠*MDN

Headers/Content-Security-Policy/trusted-types <https://
developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-
Policy/trusted-types>

In only one current engine.

FirefoxNoneSafariNoneChrome83+
------------------------------------------------------------------------
Opera?Edge83+
------------------------------------------------------------------------
Edge (Legacy)?IENone
------------------------------------------------------------------------
Firefox for Android?iOS Safari?Chrome for Android?Android WebView?Samsung Internet?Opera MobileNone

