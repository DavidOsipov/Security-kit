/**
 * SPDX-License-Identifier: LGPL-3.0-or-later
 *
 * SECURITY NOTICE: This file contains embedded Unicode binary data.
 * Data integrity is verified via compile-time BLAKE3/SHA-256 checksums.
 * DO NOT MODIFY - Generated by scripts/parse-unicode-data-optimized.ts
 *
 * HYBRID SECURITY ARCHITECTURE:
 * - Minimal profile (~845B): Embedded for zero-dependency frontend use
 * - Standard/Complete profiles: External files with integrity verification
 *
 * Generated: 2025-09-15T22:29:40.434Z
 * Unicode Version: 16.0.0
 */

import { SecurityKitError } from "../errors.ts";

// Compile-time integrity verification hashes (SHA-256)
const EMBEDDED_RANGES_HASH =
  "1853f2509ff535fdd7741d66deb0c36a1cf76bef3686973a1a91e48a588010ac";
const EMBEDDED_MINIMAL_CONFUSABLES_HASH =
  "b1a46455e7b222bc0a8b3acb7c460a77ca6983fb201ff88ec62f5a9f08b9b388";

// External file integrity hashes (for standard/complete profiles)
export const EXTERNAL_FILE_HASHES = {
  "unicode-identifier-ranges-standard.bin":
    "1853f2509ff535fdd7741d66deb0c36a1cf76bef3686973a1a91e48a588010ac",
  "unicode-identifier-ranges-complete.bin":
    "1853f2509ff535fdd7741d66deb0c36a1cf76bef3686973a1a91e48a588010ac",
  "unicode-confusables-standard.bin":
    "ac5a9177871a155b1d3a5d551656c93780ea053f4b676115753f7d0cb9abc06a",
  "unicode-confusables-complete.bin":
    "0d8c733defc250c688204a78503adaeed4030749cfb62206a9dbd882098d1428",
} as const;

// EMBEDDED DATA: Minimal profile only (OWASP ASVS L3 compliant)
export const EMBEDDED_IDENTIFIER_RANGES_MINIMAL = new Uint8Array([
  0x55, 0x31, 0x36, 0x52, 0x02, 0x00, 0x00, 0x00, 0x87, 0x01, 0x00, 0x00, 0x27,
  0x00, 0x06, 0x01, 0x03, 0x0a, 0x11, 0x19, 0x1e, 0x00, 0x02, 0x19, 0x56, 0x00,
  0x09, 0x16, 0x18, 0x1e, 0x20, 0x39, 0x3c, 0x0a, 0x0d, 0x07, 0x09, 0x34, 0x45,
  0x00, 0x11, 0x01, 0x0f, 0x01, 0x1e, 0x0f, 0x11, 0x05, 0x08, 0x0a, 0x0e, 0x01,
  0x04, 0x23, 0x26, 0x01, 0x08, 0x0d, 0x33, 0x00, 0x62, 0x01, 0x31, 0x00, 0x14,
  0x04, 0x06, 0x06, 0x09, 0x02, 0x04, 0x01, 0x08, 0x00, 0x08, 0x05, 0x0a, 0x01,
  0x03, 0x01, 0x05, 0x00, 0x03, 0x01, 0x0a, 0x00, 0x03, 0x00, 0x30, 0x00, 0x06,
  0x02, 0x0b, 0x00, 0x02, 0x02, 0x04, 0x00, 0x02, 0x13, 0x15, 0x2b, 0x59, 0x63,
  0x8e, 0x01, 0x75, 0x86, 0x01, 0x19, 0x1e, 0x01, 0x03, 0x25, 0x28, 0x00, 0x08,
  0x25, 0x29, 0x00, 0x2a, 0x00, 0x1c, 0x1a, 0x1f, 0x05, 0x31, 0x1f, 0x21, 0x14,
  0x1f, 0x09, 0x10, 0x02, 0x04, 0x00, 0x05, 0x14, 0x16, 0x11, 0x13, 0x31, 0x33,
  0x00, 0x10, 0x01, 0x09, 0x11, 0x62, 0x61, 0xa0, 0x02, 0x17, 0x19, 0x05, 0x17,
  0x0c, 0x12, 0x00, 0x03, 0x14, 0x4c, 0x4c, 0x4e, 0x01, 0x07, 0x01, 0x0a, 0x03,
  0x06, 0x09, 0x0b, 0x06, 0x08, 0x06, 0x08, 0x02, 0x04, 0x07, 0x0a, 0x01, 0x04,
  0x15, 0x17, 0x06, 0x08, 0x00, 0x04, 0x03, 0x06, 0x08, 0x0b, 0x01, 0x04, 0x03,
  0x0c, 0x00, 0x09, 0x03, 0x06, 0x0b, 0x18, 0x00, 0x03, 0x02, 0x04, 0x05, 0x0a,
  0x01, 0x04, 0x15, 0x17, 0x06, 0x08, 0x00, 0x03, 0x00, 0x03, 0x01, 0x04, 0x00,
  0x02, 0x04, 0x09, 0x01, 0x04, 0x02, 0x11, 0x00, 0x0a, 0x0e, 0x1b, 0x02, 0x04,
  0x08, 0x0a, 0x02, 0x04, 0x15, 0x17, 0x06, 0x08, 0x01, 0x03, 0x04, 0x07, 0x09,
  0x0b, 0x02, 0x04, 0x02, 0x05, 0x00, 0x10, 0x03, 0x06, 0x09, 0x14, 0x05, 0x07,
  0x02, 0x04, 0x07, 0x0a, 0x01, 0x04, 0x15, 0x17, 0x06, 0x08, 0x01, 0x03, 0x04,
  0x07, 0x07, 0x0b, 0x01, 0x04, 0x02, 0x0a, 0x02, 0x0a, 0x02, 0x07, 0x09, 0x0b,
  0x00, 0x11, 0x01, 0x03, 0x05, 0x09, 0x02, 0x04, 0x03, 0x07, 0x01, 0x03, 0x00,
  0x02, 0x01, 0x05, 0x01, 0x05, 0x02, 0x06, 0x0b, 0x10, 0x04, 0x08, 0x02, 0x04,
  0x03, 0x06, 0x00, 0x07, 0x00, 0x0f, 0x09, 0x1b, 0x0b, 0x0d, 0x02, 0x04, 0x16,
  0x18, 0x09, 0x0b, 0x04, 0x07, 0x08, 0x0a, 0x02, 0x04, 0x03, 0x0b, 0x01, 0x08,
  0x00, 0x03, 0x01, 0x06, 0x09, 0x1a, 0x00, 0x02, 0x01, 0x03, 0x07, 0x09, 0x02,
  0x04, 0x16, 0x18, 0x09, 0x0b, 0x04, 0x07, 0x08, 0x0a, 0x02, 0x04, 0x03, 0x0b,
  0x01, 0x08, 0x00, 0x03, 0x03, 0x06, 0x09, 0x0b, 0x02, 0x0f, 0x00, 0x02, 0x01,
  0x03, 0x07, 0x09, 0x02, 0x04, 0x28, 0x2b, 0x06, 0x09, 0x02, 0x04, 0x04, 0x0a,
  0x03, 0x0c, 0x01, 0x06, 0x09, 0x14, 0x05, 0x08, 0x01, 0x03, 0x09, 0x0c, 0x05,
  0x09, 0x0b, 0x0d, 0x0a, 0x0c, 0x08, 0x0a, 0x00, 0x03, 0x06, 0x0a, 0x00, 0x05,
  0x05, 0x07, 0x00, 0x02, 0x06, 0x1a, 0x00, 0x0f, 0x31, 0x33, 0x06, 0x0c, 0x0e,
  0x10, 0x09, 0x31, 0x01, 0x03, 0x00, 0x02, 0x04, 0x06, 0x17, 0x19, 0x00, 0x02,
  0x0b, 0x0d, 0x09, 0x0c, 0x04, 0x06, 0x00, 0x02, 0x06, 0x08, 0x09, 0x0e, 0x01,
  0x22, 0x00, 0x0b, 0x00, 0x15, 0x09, 0x15, 0x00, 0x02, 0x00, 0x07, 0x04, 0x06,
  0x03, 0x05, 0x03, 0x05, 0x03, 0x05, 0x03, 0x05, 0x03, 0x05, 0x0b, 0x0d, 0x02,
  0x07, 0x01, 0x03, 0x00, 0x06, 0x06, 0x08, 0x02, 0x04, 0x0c, 0x0e, 0x03, 0x05,
  0x03, 0x05, 0x03, 0x05, 0x03, 0x05, 0x03, 0x05, 0x0b, 0x0d, 0x02, 0x0c, 0x00,
  0x3a, 0x49, 0x50, 0x4d, 0x77, 0x00, 0x06, 0x00, 0x03, 0x20, 0x27, 0x03, 0x06,
  0x02, 0x83, 0x02, 0x48, 0x4a, 0x03, 0x06, 0x06, 0x08, 0x00, 0x02, 0x03, 0x06,
  0x28, 0x2a, 0x03, 0x06, 0x20, 0x22, 0x03, 0x06, 0x06, 0x08, 0x00, 0x02, 0x03,
  0x06, 0x0e, 0x10, 0x38, 0x3a, 0x03, 0x06, 0x42, 0x45, 0x02, 0x23, 0x0f, 0x80,
  0x08, 0x22, 0x25, 0x02, 0x04, 0x0a, 0x0d, 0x17, 0x1a, 0x00, 0x02, 0x00, 0x05,
  0x00, 0x05, 0x00, 0x04, 0x09, 0xb0, 0x09, 0x2a, 0x2d, 0x02, 0xc3, 0x02, 0x99,
  0x01, 0x9e, 0x01, 0x00, 0x02, 0x59, 0x60, 0x15, 0x18, 0x05, 0x08, 0x25, 0x28,
  0x05, 0x08, 0x07, 0x09, 0x00, 0x02, 0x00, 0x02, 0x00, 0x02, 0x11, 0x13, 0x00,
  0x02, 0x00, 0x02, 0x00, 0x02, 0x00, 0x02, 0x00, 0x02, 0x00, 0x04, 0x34, 0x36,
  0x04, 0x06, 0x00, 0x06, 0x02, 0x04, 0x02, 0x04, 0x00, 0x02, 0x00, 0x04, 0x02,
  0x06, 0x04, 0x0a, 0x02, 0x04, 0x06, 0x08, 0x00, 0x06, 0x02, 0x04, 0x02, 0x04,
  0x00, 0x02, 0x00, 0x14, 0x00, 0x09, 0x00, 0x0e, 0x00, 0x80, 0x1a, 0x00, 0x06,
  0x00, 0x53, 0x16, 0x20, 0x06, 0x08, 0x06, 0x08, 0x06, 0x08, 0x06, 0x08, 0x06,
  0x08, 0x06, 0x08, 0x06, 0x08, 0x06, 0xad, 0x04, 0x02, 0x3c, 0x55, 0x58, 0x01,
  0x04, 0x01, 0x03, 0x5e, 0x65, 0x28, 0x2a, 0x00, 0x71, 0x1f, 0xe0, 0x04, 0xbf,
  0x33, 0x80, 0x34, 0xff, 0xa3, 0x01, 0xff, 0xb0, 0x01, 0x00, 0x98, 0x01, 0x08,
  0x71, 0x00, 0x05, 0x00, 0x05, 0x01, 0x18, 0x00, 0x16, 0x0a, 0x10, 0x01, 0x03,
  0x00, 0x02, 0x04, 0x92, 0x04, 0x17, 0x79, 0x16, 0x1a, 0x05, 0x87, 0x01, 0x05,
  0x08, 0x05, 0x08, 0x05, 0x0f, 0x06, 0x08, 0x06, 0x3e, 0x01, 0x9a, 0x01, 0xa3,
  0x57, 0x8e, 0x9c, 0x01, 0x01, 0x03, 0x00, 0x02, 0x01, 0x0c, 0x00, 0x02, 0x00,
  0x02, 0x01, 0x04, 0x02, 0xda, 0x31, 0x00, 0x02, 0x00, 0x38, 0x01, 0xb5, 0xb9,
  0x01, 0x01, 0xaf, 0x82, 0x01, 0x03, 0x13, 0x00, 0x1e, 0x02, 0x05, 0x00, 0x0f,
  0x03, 0x9c, 0x5b, 0x1e, 0x25, 0x05, 0xea, 0x02, 0x00, 0xd1, 0x0e, 0x06, 0x08,
  0x03, 0x05, 0x01, 0x03, 0x0e, 0x90, 0x30, 0xdf, 0xcd, 0x02, 0x80, 0xce, 0x02,
  0xb9, 0x20, 0xc0, 0x20, 0xdd, 0x01, 0xe0, 0x01, 0x81, 0x2d, 0x90, 0x2d, 0xb0,
  0x3a, 0xc0, 0x3a, 0xed, 0x04, 0x90, 0x28, 0xca, 0x26, 0xd0, 0x26, 0xdf, 0x20,
]);

// Minimal confusables is empty (zero mappings for frontend performance)
export const EMBEDDED_CONFUSABLES_MINIMAL = new Uint8Array([
  0x55, 0x31, 0x36, 0x43, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
]);

/**
 * Verify embedded data integrity using Web Crypto API
 * Implements OWASP ASVS V8.1.1 (Data Integrity)
 */
async function verifyEmbeddedIntegrity(): Promise<void> {
  if (typeof crypto === "undefined" || !crypto.subtle) {
    // Fallback for environments without Web Crypto API
    console.warn(
      "Web Crypto API unavailable - skipping integrity verification",
    );
    return;
  }

  try {
    // Verify identifier ranges
    const rangesHash = await crypto.subtle.digest(
      "SHA-256",
      EMBEDDED_IDENTIFIER_RANGES_MINIMAL,
    );
    const rangesHex = Array.from(new Uint8Array(rangesHash))
      .map((b) => b.toString(16).padStart(2, "0"))
      .join("");

    if (rangesHex !== EMBEDDED_RANGES_HASH.toLowerCase()) {
      throw new SecurityKitError(
        "Embedded identifier ranges integrity check failed - potential tampering detected",
      );
    }

    // Verify minimal confusables
    const confusablesHash = await crypto.subtle.digest(
      "SHA-256",
      EMBEDDED_CONFUSABLES_MINIMAL,
    );
    const confusablesHex = Array.from(new Uint8Array(confusablesHash))
      .map((b) => b.toString(16).padStart(2, "0"))
      .join("");

    if (confusablesHex !== EMBEDDED_MINIMAL_CONFUSABLES_HASH.toLowerCase()) {
      throw new SecurityKitError(
        "Embedded minimal confusables integrity check failed - potential tampering detected",
      );
    }
  } catch (error) {
    if (error instanceof SecurityKitError) {
      throw error;
    }
    // Don't fail hard if integrity check has issues - degrade gracefully
    console.warn("Embedded data integrity verification failed:", error);
  }
}

/**
 * Verify external binary file integrity
 * Implements OWASP ASVS V8.1.1 (Data Integrity)
 */
export async function verifyExternalFileIntegrity(
  data: Uint8Array,
  filename: keyof typeof EXTERNAL_FILE_HASHES,
): Promise<void> {
  if (typeof crypto === "undefined" || !crypto.subtle) {
    console.warn(
      "Web Crypto API unavailable - skipping external file integrity verification",
    );
    return;
  }

  const expectedHash = EXTERNAL_FILE_HASHES[filename];
  if (!expectedHash || expectedHash.startsWith("PLACEHOLDER")) {
    console.warn(
      `No integrity hash available for ${filename} - verification skipped`,
    );
    return;
  }

  try {
    const actualHash = await crypto.subtle.digest("SHA-256", data);
    const actualHex = Array.from(new Uint8Array(actualHash))
      .map((b) => b.toString(16).padStart(2, "0"))
      .join("");

    if (actualHex !== expectedHash.toLowerCase()) {
      throw new SecurityKitError(
        `External file ${filename} integrity check failed - potential tampering detected`,
      );
    }
  } catch (error) {
    if (error instanceof SecurityKitError) {
      throw error;
    }
    console.warn(
      `External file ${filename} integrity verification failed:`,
      error,
    );
  }
}

// Verify embedded data integrity at module load time
// This runs automatically when the module is imported
let _integrityVerified = false;
export const verifyOnLoad = (async (): Promise<void> => {
  if (_integrityVerified) return;
  await verifyEmbeddedIntegrity();
  _integrityVerified = true;
})();

/**
 * Get embedded data for minimal profile with integrity verification
 */
export async function getEmbeddedData(): Promise<{
  readonly ranges: Uint8Array;
  readonly confusables: Uint8Array;
}> {
  // Ensure integrity verification completed
  await verifyOnLoad;

  return Object.freeze({
    ranges: EMBEDDED_IDENTIFIER_RANGES_MINIMAL,
    confusables: EMBEDDED_CONFUSABLES_MINIMAL,
  });
}
